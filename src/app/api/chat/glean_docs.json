{
  "crawl_info": {
    "start_url": "https://developers.glean.com/",
    "timestamp": "2025-09-19T12:56:09.410319",
    "pages_visited": 655,
    "max_depth": 4
  },
  "topics": {
    "authentication": [
      {
        "url": "https://developers.glean.com/api/client-api/authentication/overview",
        "content_description": "This page documents the Authentication API, which allows developers to create and manage secure tokens for authenticating access to Glean's services, specifically covering token generation for the Web SDK and clarifying its non-use with the Client API."
      },
      {
        "url": "https://developers.glean.com/api-info/client/authentication/overview",
        "content_description": "This page provides an overview of authentication methods for Glean's Client API, comparing OAuth and Glean-issued tokens, and guiding developers on choosing, setting up, and testing the appropriate method for their use case. It serves as a starting point for integrating secure access to search, chat, collections, and other user-facing features via the Client API."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/authentication/overview",
        "content_description": "This page provides a comprehensive guide to authenticating with Glean's Indexing API using Glean-issued tokens, covering token creation, security features like IP restrictions and rotation, proper request formatting, and troubleshooting common errors. The main purpose is to help administrators securely set up and manage authentication for document indexing and datasource operations."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/authentication-overview",
        "content_description": "This page provides an overview of authentication for the Indexing API, including managing and rotating tokens, setting up tokens across environments, and integrating third-party services. It outlines use cases and API endpoints for secure access to Glean's indexing functionality."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/activity",
        "content_description": "This page describes how to use the Indexing API's activity endpoint to report user interactions (like VIEW or EDIT) for documents, which influences search ranking. It covers authentication requirements, token scoping, and provides an example request to send activity data server-to-server."
      },
      {
        "url": "https://developers.glean.com/get-started/authentication",
        "content_description": "This page provides an overview of Glean's authentication methods for accessing its APIs, explaining the differences between OAuth and Glean-issued tokens, which APIs they support, and guidance on choosing the right method based on use case. It also covers how to find your Glean instance, user roles, permissions, and security best practices for API integration."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/3rd-party-cookies",
        "content_description": "This page explains how third-party cookie restrictions in modern browsers affect the Glean Web SDK, particularly for user authentication, and outlines the built-in mechanisms and developer configurations needed to request and grant cookie access. It provides guidance on troubleshooting cookie-related issues when embedding Glean on customer websites."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/authentication",
        "content_description": "This page describes the authentication process for the Web SDK, including the default flow involving email entry and SSO, as well as methods to optimize authentication by skipping steps using backend parameters or auth tokens."
      },
      {
        "url": "https://developers.glean.com/api/client-api/authentication/createauthtoken",
        "content_description": "This page documents the Client API endpoint for creating authentication tokens, specifically for use with the Web SDK, and clarifies that these tokens are not valid for the Client API itself. It includes details on the POST request, responses, and authorization requirements."
      },
      {
        "url": "https://developers.glean.com/api-info/client/authentication/glean-issued",
        "content_description": "This page explains how to authenticate with the Client API using Glean-issued tokens, detailing user-scoped and global token types, their setup, required headers, scopes, and best practices for security and token management. It primarily focuses on implementing and troubleshooting token-based authentication for API access."
      },
      {
        "url": "https://developers.glean.com/api-info/client/authentication/oauth",
        "content_description": "This page provides detailed guidance on configuring and using OAuth authentication for the Client API, including setup instructions for supported identity providers (Google, Azure, Okta, OneLogin), required headers, implementation examples, and troubleshooting tips. The main purpose is to enable developers to authenticate Client API requests using their existing OAuth infrastructure."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/authentication/token-rotation",
        "content_description": "This page explains how to rotate authentication tokens for the Indexing API to enhance security. It covers the process of exchanging a rotatable token for a new one using the /rotatetoken endpoint, including implementation guidance and best practices like using cron jobs for automation."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/rotate-token",
        "content_description": "This page provides reference documentation for rotating an Indexing API token's secret value using a POST request. It explains how to perform the rotation and the expected responses, emphasizing secure authentication practices."
      },
      {
        "url": "https://developers.glean.com/guides/actions/authentication",
        "content_description": "This page provides guidance on securing Glean Actions using OAuth 2.0 and request verification via JWT signatures. It covers authentication types, OAuth configuration, and implementation examples for verifying that requests originate from Glean."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/java",
        "content_description": "This page documents the Java API client for Glean, providing setup instructions, code examples for chat and search functionality, Spring Boot integration, authentication via API tokens, error handling, and testing practices. Its main purpose is to help Java developers integrate Glean's Client API into enterprise applications."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/google-docs-update",
        "content_description": "This page provides a comprehensive guide to creating an execution action that allows Glean Assistant to update Google Docs by configuring an OpenAPI specification, setting up OAuth 2.0 authentication, and deploying the action within an organization. The main focus is on integrating external services (Google Docs) with Glean through custom actions that perform real-time document modifications."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/google-calendar-events",
        "content_description": "This page provides a step-by-step guide for creating a retrieval action that integrates Google Calendar with Glean Assistant, allowing users to query their calendar events securely via OAuth authentication and the Google Calendar API. The main focus is on building, configuring, and deploying the integration with best practices for security, performance, and error handling."
      }
    ],
    "getting-started": [
      {
        "url": "https://developers.glean.com/",
        "content_description": "This page serves as an entry point to the Glean Developer Platform, introducing core functionalities like AI-powered search, chat, agent automation, and data indexing. It highlights key features including permission-aware APIs, client SDKs, and MCP integration for connecting AI assistants to enterprise data."
      },
      {
        "url": "https://developers.glean.com/api-info/client/authentication/overview",
        "content_description": "This page provides an overview of authentication methods for Glean's Client API, comparing OAuth and Glean-issued tokens, and guiding developers on choosing, setting up, and testing the appropriate method for their use case. It serves as a starting point for integrating secure access to search, chat, collections, and other user-facing features via the Client API."
      },
      {
        "url": "https://developers.glean.com/guides/chat/overview",
        "content_description": "This page provides an overview of Glean's Chat API, detailing how to build conversational AI applications using enterprise knowledge, with guidance on getting started, key features, architecture patterns, best practices, and related resources. Its main purpose is to help developers understand and begin implementing chat-based applications with Glean's tools and APIs."
      },
      {
        "url": "https://developers.glean.com/guides/agents/overview",
        "content_description": "This page provides an overview of the different approaches to building AI agents using Glean, including direct API integration, LangChain, MCP, and the Glean Agent Toolkit, along with guidance on choosing the right method based on technical needs and environment. It also covers authentication setup and introduces the no-code Agent Builder for rapid agent development."
      },
      {
        "url": "https://developers.glean.com/guides/search/overview",
        "content_description": "This page provides an overview of Glean's Search API, detailing how to integrate enterprise search capabilities into applications. It covers core features like querying, filtering, autocomplete, analytics, and building UIs, along with code examples for implementation using API clients."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/getting-started/overview",
        "content_description": "This page provides an overview of the Glean Indexing API, focusing on how to get started with creating datasources, indexing custom content (documents, entities, user data), and managing permissions. It outlines key capabilities, common use cases, and the workflow for integrating external systems into Glean's search and AI ecosystem."
      },
      {
        "url": "https://developers.glean.com/get-started/authentication",
        "content_description": "This page provides an overview of Glean's authentication methods for accessing its APIs, explaining the differences between OAuth and Glean-issued tokens, which APIs they support, and guidance on choosing the right method based on use case. It also covers how to find your Glean instance, user roles, permissions, and security best practices for API integration."
      },
      {
        "url": "https://developers.glean.com/get-started/key-terms",
        "content_description": "This page introduces foundational terminology and concepts for the Glean platform, helping developers understand key components like agents, APIs, connectors, and authentication. It serves as a glossary-style guide to orient users before diving into more specific documentation."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients",
        "content_description": "This page provides an overview of Glean's official API clients for various programming languages, detailing their features, supported APIs (Client and Indexing), and what developers can expect in terms of functionality, integrations, and tooling. It serves as a starting point for developers to integrate Glean's search, chat, and document management capabilities into their applications using language-specific libraries."
      },
      {
        "url": "https://developers.glean.com/api-info/client/getting-started/overview",
        "content_description": "This page provides an introduction to the Glean Client API, outlining its key capabilities such as search, generative AI chat, document access, and content management. It guides developers through authentication, choosing an SDK or REST API approach, and starting development with best practices for production use."
      },
      {
        "url": "https://developers.glean.com/api-info/client/getting-started/basic-usage",
        "content_description": "This page provides a foundational guide for developers starting with Glean's Client API, covering core APIs (Chat, Search, Agents), key concepts like fragments, permissions, and streaming, and common integration patterns. It explains how to use the API to build knowledge chatbots, search applications, and automated workflows, making it a high-level onboarding resource for understanding and implementing Glean's API capabilities."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/getting-started/setup-datasource",
        "content_description": "This page provides a guide on how to set up a datasource using either the Glean admin console or the /adddatasource API endpoint, which is the first step in using the Indexing API. It outlines required fields, configuration options, and includes code examples for creating a datasource."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/getting-started/index-documents",
        "content_description": "This page provides a beginner's guide to using the Indexing API, focusing on how to configure a datasource, index a document with key metadata, and enable search visibility. It includes code examples in cURL and Python, and covers core concepts like document structure, permissions, and troubleshooting tips."
      },
      {
        "url": "https://developers.glean.com/guides/chat/chatbot-example",
        "content_description": "This page provides a step-by-step guide for building a chatbot using Glean's Chat API and the official Python client. It covers basic setup, streaming responses, conversation history, error handling, and integration tips, making it a practical introduction for developers starting with Glean's chat functionality."
      }
    ],
    "chat": [
      {
        "url": "https://developers.glean.com/",
        "content_description": "This page serves as an entry point to the Glean Developer Platform, introducing core functionalities like AI-powered search, chat, agent automation, and data indexing. It highlights key features including permission-aware APIs, client SDKs, and MCP integration for connecting AI assistants to enterprise data."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/overview",
        "content_description": "The page provides an overview of the Web SDK, detailing pre-built components for integrating AI-powered search and chat functionalities into intranet portals, with options for embedding chat, autocomplete, search results, modals, sidebars, and recommendation widgets."
      },
      {
        "url": "https://developers.glean.com/api/client-api/messages/overview",
        "content_description": "The page provides an overview of the Messages API, which allows developers to retrieve, search, and analyze messages from chat platforms like Slack and Microsoft Teams, enabling use cases such as communication search, knowledge extraction, and analytics."
      },
      {
        "url": "https://developers.glean.com/guides/chat/overview",
        "content_description": "This page provides an overview of Glean's Chat API, detailing how to build conversational AI applications using enterprise knowledge, with guidance on getting started, key features, architecture patterns, best practices, and related resources. Its main purpose is to help developers understand and begin implementing chat-based applications with Glean's tools and APIs."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/overview",
        "content_description": "This page provides an overview and reference for the Chat API, which enables developers to build AI-powered conversational applications using Glean. It covers endpoints for managing conversations, uploading context files, and retrieving chat history."
      },
      {
        "url": "https://developers.glean.com/guides/actions/overview",
        "content_description": "This page provides an overview of Actions in Glean, explaining how they enable automation within Glean Chat by allowing users to perform tasks like creating tickets or retrieving unindexed data through natural language queries. It outlines how actions are created, deployed, and executed using external APIs, with optional user confirmation and proper authentication."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/sidebar",
        "content_description": "This page describes how to implement the Glean Sidebar, a UI component that integrates search, chat, and contextual recommendations into a web application using the Web SDK. It provides setup instructions, customization options, and a working example for developers."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/chat",
        "content_description": "This page provides guidance on implementing Glean Chat using the Web SDK, including how to integrate the JavaScript library, configure the chat interface, and set up dedicated or unified search and chat experiences. It includes code examples, setup requirements, and links to further customization options."
      },
      {
        "url": "https://developers.glean.com/guides/chat/chatbot-example",
        "content_description": "This page provides a step-by-step guide for building a chatbot using Glean's Chat API and the official Python client. It covers basic setup, streaming responses, conversation history, error handling, and integration tips, making it a practical introduction for developers starting with Glean's chat functionality."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/listchats",
        "content_description": "This page provides API reference documentation for retrieving saved chat metadata between the user and Glean Assistant, including endpoint details, request/response formats, and status codes. It focuses on the Client API's functionality for managing chat history without exposing conversational content."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/getchat",
        "content_description": "This page provides a reference for the Client API endpoint that retrieves chat history between a user and Glean Assistant. It details the request structure, response codes, and related operations for managing saved chats."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/chat",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/getchatapplication",
        "content_description": "This page provides a reference for the Client API endpoint that retrieves metadata and details for a custom Chat application by its ID. It is part of the chat functionality and falls under client-facing API interactions."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/uploadchatfiles",
        "content_description": "This page provides API reference documentation for uploading files in a chat context, detailing the endpoint, request structure, and possible responses. Its main purpose is to guide developers on how to use the Client API to upload files for Chat functionality."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/chat-stream",
        "content_description": "This page provides reference documentation for the Client API endpoint used to stream chat interactions with Glean AI, detailing request and response formats, status codes, and usage for conversational queries."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/deletechatfiles",
        "content_description": "This page provides API reference documentation for deleting files uploaded by a user in the context of chat, detailing the endpoint, request structure, and possible responses. It is part of the Client API and focuses on file management within chat functionality."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/getchatfiles",
        "content_description": "This page documents the Client API endpoint for retrieving files uploaded by a user in the context of Chat, including request details, response codes, and navigation to related operations. Its main purpose is to provide developers with reference information for managing user-uploaded chat files via API."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/deleteallchats",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/deletechats",
        "content_description": "This page documents the Client API endpoint for deleting saved chats, including request details, response codes, and its impact on conversational data. It is part of the broader chat and client API reference documentation."
      },
      {
        "url": "https://developers.glean.com/guides/agents/direct-api",
        "content_description": "This page provides guidance on building custom agents using Glean's REST APIs and official client libraries, demonstrating how to integrate search, chat, and summarization capabilities into agent logic. It includes code examples, best practices, and client library instructions for implementing, extending, and managing agents programmatically."
      },
      {
        "url": "https://developers.glean.com/guides/agents/nvidia-example",
        "content_description": "This page provides a guide for building an agentic AI using NVIDIA NIM and Glean to answer questions about a company's internal knowledge base. It covers agent architecture, integration with Glean Search API and NVIDIA microservices, and demonstrates how to implement a RAG-based chat agent using LangGraph."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/typescript",
        "content_description": "This page documents Glean's official TypeScript/JavaScript API client, focusing on how to integrate it into web applications and Node.js services to access Glean's chat and search functionalities with type safety. It includes installation instructions, usage examples for chat and search, framework integrations (Next.js, React, Express), authentication methods, and testing guidance."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/go",
        "content_description": "This page documents Glean's Go API client, providing idiomatic Go interfaces for integrating enterprise search and AI-powered chat capabilities into Go applications. It includes installation instructions, quick start examples, usage of core features like Chat and Search APIs, framework integrations, concurrency patterns, authentication methods, error handling, and testing guidance."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/python",
        "content_description": "This page documents the Python API client for Glean's Client API, enabling developers to integrate chat, search, and agent functionalities into Python applications. It covers installation, authentication, core features like chat and search, framework integrations, and testing practices."
      }
    ],
    "search": [
      {
        "url": "https://developers.glean.com/libraries/web-sdk/overview",
        "content_description": "The page provides an overview of the Web SDK, detailing pre-built components for integrating AI-powered search and chat functionalities into intranet portals, with options for embedding chat, autocomplete, search results, modals, sidebars, and recommendation widgets."
      },
      {
        "url": "https://developers.glean.com/api/client-api/messages/overview",
        "content_description": "The page provides an overview of the Messages API, which allows developers to retrieve, search, and analyze messages from chat platforms like Slack and Microsoft Teams, enabling use cases such as communication search, knowledge extraction, and analytics."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/shortcuts-overview",
        "content_description": "This page provides reference documentation for the Indexing API's shortcut functionality, enabling developers to create and manage search shortcuts for quick access to tools, dashboards, and external resources. Its main purpose is to enhance search productivity through bulk indexing and management of shortcuts."
      },
      {
        "url": "https://developers.glean.com/guides/search/overview",
        "content_description": "This page provides an overview of Glean's Search API, detailing how to integrate enterprise search capabilities into applications. It covers core features like querying, filtering, autocomplete, analytics, and building UIs, along with code examples for implementation using API clients."
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/overview",
        "content_description": "The page provides reference documentation for the Pins API, which enables developers to programmatically manage pinned search results to improve search relevance and user experience by promoting important content for specific queries."
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/overview",
        "content_description": "The page documents the Shortcuts API, which allows developers to create, manage, and retrieve search shortcuts that provide quick access to frequent queries and resources, improving user efficiency and workflow navigation."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/overview",
        "content_description": "This page provides an overview of Glean's Search API, detailing endpoints for searching content, retrieving autocomplete suggestions, personalized feeds, and document recommendations. It focuses on enabling developers to build custom search experiences using Glean's client API."
      },
      {
        "url": "https://developers.glean.com/api/client-api/activity/overview",
        "content_description": "The page documents the Activity API, which allows clients to report user interactions with indexed documents and search results to improve search relevance and gather usage analytics. Its main purpose is to enhance search quality through activity tracking and feedback collection."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/rendering-search-results",
        "content_description": "This page explains how search results from datasources are rendered in the UI, based on datasource categories, custom render configurations, or by reusing existing rendering presets. It covers the default behaviors for categories like PUBLISHED_CONTENT and KNOWLEDGE_HUB, options for customization, and how to apply rendering presets during datasource setup."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/modal-search",
        "content_description": "This page describes Glean's Modal Search feature, which allows developers to add a lightweight, overlay-based search interface to their web applications using a single line of JavaScript. It covers implementation steps, customization options, and theming through the Web SDK."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/autocomplete",
        "content_description": "This page provides guidance on implementing Glean's Autocomplete and Search Results components using the Web SDK to create a customizable search experience. It covers setup, JavaScript integration, event handling, and theming options for developers building search interfaces."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/sidebar",
        "content_description": "This page describes how to implement the Glean Sidebar, a UI component that integrates search, chat, and contextual recommendations into a web application using the Web SDK. It provides setup instructions, customization options, and a working example for developers."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/recommendations",
        "content_description": "The page details the Recommendations component of the Web SDK, which provides context-aware content suggestions and integrated search functionality. It covers implementation steps, customization options, and styling guidelines for embedding the component into web applications."
      },
      {
        "url": "https://developers.glean.com/guides/search/filtering-results",
        "content_description": "This page provides a detailed guide on how to filter search results using the /search REST API, covering general filters, field-specific filtering, time-based filters, and special values. It explains how to construct facetFilter objects, use universal and entity-specific field names, and handle edge cases like timezones and user-specific filters."
      },
      {
        "url": "https://developers.glean.com/guides/search/llm-content",
        "content_description": "This page explains how to retrieve expanded LLM-optimized content in search results using the Search API by configuring parameters like maxSnippetSize and returnLlmContentOverSnippets. It details the differences between standard and LLM-oriented snippet formatting, response structure, and provides usage tips and FAQs for developers integrating search results into LLM applications."
      },
      {
        "url": "https://developers.glean.com/guides/search/faceted-filters",
        "content_description": "This page explains how to filter facets in search results using a prefix, particularly for narrowing down buckets in faceted search by field and prefix, with support for preferred name matching in people-related fields. It provides guidance on using the facetBucketFilter in API requests to refine search responses."
      },
      {
        "url": "https://developers.glean.com/guides/search/datasource-filters",
        "content_description": "This page explains how to use datasource-specific filters in search queries, particularly focusing on retrieving facet information for specific datasources like Confluence or Slack using the Glean UI or Search API. It provides guidance on making API requests to get facet metadata and optimize performance by retrieving only facet results."
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/pin",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/search",
        "content_description": "This page provides reference documentation for the Client API's search endpoint, detailing how to retrieve indexed results using queries and filters, along with possible responses and error codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/activity/feedback",
        "content_description": "This page documents the Client API endpoint for reporting user activity such as search result views and clicks, which helps improve search relevance and provides insights into user interactions within the Glean client UI."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/search-agents",
        "content_description": "This page documents the Client API endpoint for searching agents by name, including request details, response codes, and its beta status. It is part of the API reference for interacting with agents programmatically."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/autocomplete",
        "content_description": "This page provides reference documentation for the Autocomplete API endpoint, which returns query suggestions, operators, and document matches based on a partially typed search query. It is part of the Client API and supports search functionality within the platform."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/adminsearch",
        "content_description": "This page documents the admin search endpoint in the Client API, which allows privileged users to perform search queries against the index without permission checks. It is intended for administrative use and is currently in beta."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/typescript",
        "content_description": "This page documents Glean's official TypeScript/JavaScript API client, focusing on how to integrate it into web applications and Node.js services to access Glean's chat and search functionalities with type safety. It includes installation instructions, usage examples for chat and search, framework integrations (Next.js, React, Express), authentication methods, and testing guidance."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/go",
        "content_description": "This page documents Glean's Go API client, providing idiomatic Go interfaces for integrating enterprise search and AI-powered chat capabilities into Go applications. It includes installation instructions, quick start examples, usage of core features like Chat and Search APIs, framework integrations, concurrency patterns, authentication methods, error handling, and testing guidance."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/python",
        "content_description": "This page documents the Python API client for Glean's Client API, enabling developers to integrate chat, search, and agent functionalities into Python applications. It covers installation, authentication, core features like chat and search, framework integrations, and testing practices."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/guides/zendesk",
        "content_description": "This page provides step-by-step instructions for integrating Glean's search functionality into Zendesk Guide using the Web SDK, offering two implementation options: modal search and autocomplete with dedicated search results. It covers code modifications, theme customization, and initialization needed to embed Glean search within a Zendesk help center."
      }
    ],
    "agents": [
      {
        "url": "https://developers.glean.com/guides/agents/overview",
        "content_description": "This page provides an overview of the different approaches to building AI agents using Glean, including direct API integration, LangChain, MCP, and the Glean Agent Toolkit, along with guidance on choosing the right method based on technical needs and environment. It also covers authentication setup and introduces the no-code Agent Builder for rapid agent development."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/overview",
        "content_description": "This page provides a reference for the Client API's Agents endpoints, detailing how to programmatically discover, execute, and manage AI agents within Glean. It covers use cases like streaming responses, batch processing, schema inspection, and integration with external applications, along with authentication and common implementation patterns."
      },
      {
        "url": "https://developers.glean.com/guides/agents/langchain",
        "content_description": "This page provides guidance on integrating Glean with the LangChain framework to build AI agents that can search and reason over organizational knowledge. It covers installation, configuration, and usage examples for retrieving data, building agents with tools, and implementing RAG workflows using Glean's Python client."
      },
      {
        "url": "https://developers.glean.com/guides/agents/direct-api",
        "content_description": "This page provides guidance on building custom agents using Glean's REST APIs and official client libraries, demonstrating how to integrate search, chat, and summarization capabilities into agent logic. It includes code examples, best practices, and client library instructions for implementing, extending, and managing agents programmatically."
      },
      {
        "url": "https://developers.glean.com/guides/agents/toolkit",
        "content_description": "The page introduces the Glean Agent Toolkit, a Python library that enables developers to integrate Glean's enterprise knowledge capabilities—such as search and employee lookup—into AI agents across multiple frameworks like LangChain, CrewAI, and OpenAI. It emphasizes reusable, production-ready tools and demonstrates how to build, compose, and deploy agent tools consistently across different platforms."
      },
      {
        "url": "https://developers.glean.com/guides/agents/nvidia-example",
        "content_description": "This page provides a guide for building an agentic AI using NVIDIA NIM and Glean to answer questions about a company's internal knowledge base. It covers agent architecture, integration with Glean Search API and NVIDIA microservices, and demonstrates how to implement a RAG-based chat agent using LangGraph."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/create-and-wait-run",
        "content_description": "This page provides reference documentation for the Client API endpoint to create an agent run and synchronously wait for its response. It details the POST request structure, status codes, and beta status of the API."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/get-agent-schemas",
        "content_description": "This page documents the Client API endpoint for listing an agent's input and output schemas, enabling developers to detect changes in an agent's structure. It is part of the agents API reference and is currently in beta."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/get-agent",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/search-agents",
        "content_description": "This page documents the Client API endpoint for searching agents by name, including request details, response codes, and its beta status. It is part of the API reference for interacting with agents programmatically."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/create-and-stream-run",
        "content_description": "This page provides reference documentation for the Client API endpoint to create an agent run and stream the response using server-sent events (SSE). It details the POST request structure, status codes, and beta status of the streaming functionality."
      }
    ],
    "actions": [
      {
        "url": "https://developers.glean.com/api/client-api/tools/overview",
        "content_description": "The page provides an overview of the Tools API, which allows developers to discover and execute tools and integrations within Glean for workflow automation and third-party service integration. Its main purpose is to enable programmatic execution of tools and list available tools via API endpoints."
      },
      {
        "url": "https://developers.glean.com/guides/actions/overview",
        "content_description": "This page provides an overview of Actions in Glean, explaining how they enable automation within Glean Chat by allowing users to perform tasks like creating tickets or retrieving unindexed data through natural language queries. It outlines how actions are created, deployed, and executed using external APIs, with optional user confirmation and proper authentication."
      },
      {
        "url": "https://developers.glean.com/api/client-api/tools/execute-the-specified-tool",
        "content_description": "This page documents the Client API endpoint for executing a specific tool, including request details, parameters, and possible responses. It focuses on tool execution as part of the available API actions."
      },
      {
        "url": "https://developers.glean.com/guides/actions/faq",
        "content_description": "This page provides a FAQ about Actions in Glean, focusing on how to define and optimize them using type hints, authentication setup, LLM interpretation of fields, and technical constraints like data size limits and VPN access. Its main purpose is to guide developers in effectively building and integrating API-based Actions with Glean's AI system."
      },
      {
        "url": "https://developers.glean.com/guides/actions/create-actions",
        "content_description": "This page provides a step-by-step guide for creating and configuring custom Actions in Glean, which enable automated workflows and integrations with external applications. It covers setting up trigger conditions, defining functionality via API specs, authentication, testing, and deployment options for both Chat and Agents."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/jira-issue-creation",
        "content_description": "This page provides a detailed guide on creating an execution action that integrates Glean Assistant with Jira to enable automated issue creation, using OAuth authentication and a custom server implementation. It covers setup, security, user attribution, error handling, and best practices for integration deployment."
      },
      {
        "url": "https://developers.glean.com/guides/actions/authentication",
        "content_description": "This page provides guidance on securing Glean Actions using OAuth 2.0 and request verification via JWT signatures. It covers authentication types, OAuth configuration, and implementation examples for verifying that requests originate from Glean."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/zendesk-ticket-redirection",
        "content_description": "This page provides a detailed guide on creating a redirect action that integrates Glean Assistant with Zendesk, enabling users to create support tickets with pre-populated fields via URL parameters. It covers implementation, best practices, testing, and troubleshooting for seamless workflow automation between the two systems."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/google-docs-update",
        "content_description": "This page provides a comprehensive guide to creating an execution action that allows Glean Assistant to update Google Docs by configuring an OpenAPI specification, setting up OAuth 2.0 authentication, and deploying the action within an organization. The main focus is on integrating external services (Google Docs) with Glean through custom actions that perform real-time document modifications."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/google-calendar-events",
        "content_description": "This page provides a step-by-step guide for creating a retrieval action that integrates Google Calendar with Glean Assistant, allowing users to query their calendar events securely via OAuth authentication and the Google Calendar API. The main focus is on building, configuring, and deploying the integration with best practices for security, performance, and error handling."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/jira-issue-creation-redirect",
        "content_description": "This page provides a guide on implementing a redirect action that enables users to create Jira issues through Glean Assistant by redirecting them to Jira's native interface with pre-filled fields. It covers configuration, best practices, testing, and security considerations for integrating Glean with Jira using redirect actions."
      }
    ],
    "mcp": [
      {
        "url": "https://developers.glean.com/",
        "content_description": "This page serves as an entry point to the Glean Developer Platform, introducing core functionalities like AI-powered search, chat, agent automation, and data indexing. It highlights key features including permission-aware APIs, client SDKs, and MCP integration for connecting AI assistants to enterprise data."
      },
      {
        "url": "https://developers.glean.com/guides/agents/overview",
        "content_description": "This page provides an overview of the different approaches to building AI agents using Glean, including direct API integration, LangChain, MCP, and the Glean Agent Toolkit, along with guidance on choosing the right method based on technical needs and environment. It also covers authentication setup and introduces the no-code Agent Builder for rapid agent development."
      },
      {
        "url": "https://developers.glean.com/changelog",
        "content_description": "This page is a changelog for Glean's developer platform, documenting recent updates, new features, breaking changes, and bug fixes across APIs, SDKs, and services. It primarily covers changes to API clients, MCP server capabilities, and developer documentation improvements."
      }
    ],
    "web-sdk": [
      {
        "url": "https://developers.glean.com/libraries/web-sdk/overview",
        "content_description": "The page provides an overview of the Web SDK, detailing pre-built components for integrating AI-powered search and chat functionalities into intranet portals, with options for embedding chat, autocomplete, search results, modals, sidebars, and recommendation widgets."
      },
      {
        "url": "https://developers.glean.com/api/client-api/authentication/overview",
        "content_description": "This page documents the Authentication API, which allows developers to create and manage secure tokens for authenticating access to Glean's services, specifically covering token generation for the Web SDK and clarifying its non-use with the Client API."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/modal-search",
        "content_description": "This page describes Glean's Modal Search feature, which allows developers to add a lightweight, overlay-based search interface to their web applications using a single line of JavaScript. It covers implementation steps, customization options, and theming through the Web SDK."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/autocomplete",
        "content_description": "This page provides guidance on implementing Glean's Autocomplete and Search Results components using the Web SDK to create a customizable search experience. It covers setup, JavaScript integration, event handling, and theming options for developers building search interfaces."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/guides/react",
        "content_description": "This page provides a React implementation example for integrating Glean's Web SDK, demonstrating how to render search components like the search box and results page using custom React hooks and state management. The main purpose is to guide developers on embedding Glean's search functionality into React applications."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/3rd-party-cookies",
        "content_description": "This page explains how third-party cookie restrictions in modern browsers affect the Glean Web SDK, particularly for user authentication, and outlines the built-in mechanisms and developer configurations needed to request and grant cookie access. It provides guidance on troubleshooting cookie-related issues when embedding Glean on customer websites."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/authentication",
        "content_description": "This page describes the authentication process for the Web SDK, including the default flow involving email entry and SSO, as well as methods to optimize authentication by skipping steps using backend parameters or auth tokens."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/sidebar",
        "content_description": "This page describes how to implement the Glean Sidebar, a UI component that integrates search, chat, and contextual recommendations into a web application using the Web SDK. It provides setup instructions, customization options, and a working example for developers."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/chat",
        "content_description": "This page provides guidance on implementing Glean Chat using the Web SDK, including how to integrate the JavaScript library, configure the chat interface, and set up dedicated or unified search and chat experiences. It includes code examples, setup requirements, and links to further customization options."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/recommendations",
        "content_description": "The page details the Recommendations component of the Web SDK, which provides context-aware content suggestions and integrated search functionality. It covers implementation steps, customization options, and styling guidelines for embedding the component into web applications."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/guides/brightspot",
        "content_description": "This page provides step-by-step instructions for replacing a Brightspot site's native search with Glean's modal search interface using the Web SDK, including custom script injection and DOM integration. It focuses on frontend implementation and configuration within a specific CMS platform."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/guides/lumapps",
        "content_description": "This page provides instructions for integrating Glean's modal search interface into LumApps by adding custom HTML and JavaScript code to the site header. It covers loading the Glean Web SDK, attaching search functionality, and disabling native search suggestions."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/guides/zendesk",
        "content_description": "This page provides step-by-step instructions for integrating Glean's search functionality into Zendesk Guide using the Web SDK, offering two implementation options: modal search and autocomplete with dedicated search results. It covers code modifications, theme customization, and initialization needed to embed Glean search within a Zendesk help center."
      }
    ],
    "api-clients": [
      {
        "url": "https://developers.glean.com/get-started/rate-limits",
        "content_description": "This page outlines the rate limits applied to API requests in Glean, including deployment, user, and endpoint-level limits, and provides guidance on handling rate-limited responses with retries and backoff strategies. It helps developers understand and manage API usage to ensure stable and reliable integrations."
      },
      {
        "url": "https://developers.glean.com/api/client-api/entities/overview",
        "content_description": "This page provides an overview and reference for the Entities API, which allows developers to query and retrieve organizational entities like people and teams within a Glean instance. It supports use cases such as building employee directories, team management tools, and entity search integrations."
      },
      {
        "url": "https://developers.glean.com/guides/chat/overview",
        "content_description": "This page provides an overview of Glean's Chat API, detailing how to build conversational AI applications using enterprise knowledge, with guidance on getting started, key features, architecture patterns, best practices, and related resources. Its main purpose is to help developers understand and begin implementing chat-based applications with Glean's tools and APIs."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/overview",
        "content_description": "This page provides an overview and reference for the Collections API, which enables developers to programmatically create, manage, and organize collections of documents and resources. It details API endpoints for CRUD operations on collections and their items, supporting use cases like content curation and knowledge organization."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/overview",
        "content_description": "This page provides an overview and reference for the Chat API, which enables developers to build AI-powered conversational applications using Glean. It covers endpoints for managing conversations, uploading context files, and retrieving chat history."
      },
      {
        "url": "https://developers.glean.com/api/client-api/tools/overview",
        "content_description": "The page provides an overview of the Tools API, which allows developers to discover and execute tools and integrations within Glean for workflow automation and third-party service integration. Its main purpose is to enable programmatic execution of tools and list available tools via API endpoints."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/authentication-overview",
        "content_description": "This page provides an overview of authentication for the Indexing API, including managing and rotating tokens, setting up tokens across environments, and integrating third-party services. It outlines use cases and API endpoints for secure access to Glean's indexing functionality."
      },
      {
        "url": "https://developers.glean.com/guides/search/overview",
        "content_description": "This page provides an overview of Glean's Search API, detailing how to integrate enterprise search capabilities into applications. It covers core features like querying, filtering, autocomplete, analytics, and building UIs, along with code examples for implementation using API clients."
      },
      {
        "url": "https://developers.glean.com/api/client-api/documents/overview",
        "content_description": "This page provides an overview of the Documents API, which allows developers to retrieve document metadata, content, and access permissions programmatically. It supports use cases like document discovery, permission management, and content analysis through specific API endpoints."
      },
      {
        "url": "https://developers.glean.com/get-started/authentication",
        "content_description": "This page provides an overview of Glean's authentication methods for accessing its APIs, explaining the differences between OAuth and Glean-issued tokens, which APIs they support, and guidance on choosing the right method based on use case. It also covers how to find your Glean instance, user roles, permissions, and security best practices for API integration."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/overview",
        "content_description": "This page provides a reference for the Client API's Agents endpoints, detailing how to programmatically discover, execute, and manage AI agents within Glean. It covers use cases like streaming responses, batch processing, schema inspection, and integration with external applications, along with authentication and common implementation patterns."
      },
      {
        "url": "https://developers.glean.com/changelog",
        "content_description": "This page is a changelog for Glean's developer platform, documenting recent updates, new features, breaking changes, and bug fixes across APIs, SDKs, and services. It primarily covers changes to API clients, MCP server capabilities, and developer documentation improvements."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/overview",
        "content_description": "This page provides an overview of Glean's Search API, detailing endpoints for searching content, retrieving autocomplete suggestions, personalized feeds, and document recommendations. It focuses on enabling developers to build custom search experiences using Glean's client API."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients",
        "content_description": "This page provides an overview of Glean's official API clients for various programming languages, detailing their features, supported APIs (Client and Indexing), and what developers can expect in terms of functionality, integrations, and tooling. It serves as a starting point for developers to integrate Glean's search, chat, and document management capabilities into their applications using language-specific libraries."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-external-shortcuts",
        "content_description": "This page provides reference documentation for the Bulk Index External Shortcuts API endpoint, which allows developers to replace all currently indexed external shortcuts in a paginated manner. It specifically covers indexing non-Glean-hosted shortcuts and distinguishes between external and Glean-hosted shortcuts."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-get-user-information",
        "content_description": "This page documents a beta endpoint in the Indexing API that retrieves debug information for a specific user to assist with troubleshooting. It includes details on request/response codes and references related troubleshooting resources."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-get-information-of-a-batch-of-documents",
        "content_description": "This page provides reference documentation for a beta Indexing API endpoint that retrieves debugging information for a batch of documents. Its main purpose is to help developers troubleshoot issues when processing documents in a datasource."
      },
      {
        "url": "https://developers.glean.com/guides/search/filtering-results",
        "content_description": "This page provides a detailed guide on how to filter search results using the /search REST API, covering general filters, field-specific filtering, time-based filters, and special values. It explains how to construct facetFilter objects, use universal and entity-specific field names, and handle edge cases like timezones and user-specific filters."
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/updateshortcut",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/guides/chat/chatbot-example",
        "content_description": "This page provides a step-by-step guide for building a chatbot using Glean's Chat API and the official Python client. It covers basic setup, streaming responses, conversation history, error handling, and integration tips, making it a practical introduction for developers starting with Glean's chat functionality."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/addcollectionitems",
        "content_description": "This page provides reference documentation for the Client API endpoint to add items to a Collection, including request details and possible responses. It is part of the API documentation focused on managing collections programmatically."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/createcollection",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/editcollectionitem",
        "content_description": "This page provides reference documentation for the API endpoint used to update an item within a Collection, including modifying its URL, Glean Document ID, and description. It details the request structure, responses, and status codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/uploadchatfiles",
        "content_description": "This page provides API reference documentation for uploading files in a chat context, detailing the endpoint, request structure, and possible responses. Its main purpose is to guide developers on how to use the Client API to upload files for Chat functionality."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/getchatfiles",
        "content_description": "This page documents the Client API endpoint for retrieving files uploaded by a user in the context of Chat, including request details, response codes, and navigation to related operations. Its main purpose is to provide developers with reference information for managing user-uploaded chat files via API."
      },
      {
        "url": "https://developers.glean.com/guides/agents/langchain",
        "content_description": "This page provides guidance on integrating Glean with the LangChain framework to build AI agents that can search and reason over organizational knowledge. It covers installation, configuration, and usage examples for retrieving data, building agents with tools, and implementing RAG workflows using Glean's Python client."
      },
      {
        "url": "https://developers.glean.com/guides/agents/direct-api",
        "content_description": "This page provides guidance on building custom agents using Glean's REST APIs and official client libraries, demonstrating how to integrate search, chat, and summarization capabilities into agent logic. It includes code examples, best practices, and client library instructions for implementing, extending, and managing agents programmatically."
      },
      {
        "url": "https://developers.glean.com/guides/search/llm-content",
        "content_description": "This page explains how to retrieve expanded LLM-optimized content in search results using the Search API by configuring parameters like maxSnippetSize and returnLlmContentOverSnippets. It details the differences between standard and LLM-oriented snippet formatting, response structure, and provides usage tips and FAQs for developers integrating search results into LLM applications."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/create-and-wait-run",
        "content_description": "This page provides reference documentation for the Client API endpoint to create an agent run and synchronously wait for its response. It details the POST request structure, status codes, and beta status of the API."
      },
      {
        "url": "https://developers.glean.com/guides/search/faceted-filters",
        "content_description": "This page explains how to filter facets in search results using a prefix, particularly for narrowing down buckets in faceted search by field and prefix, with support for preferred name matching in people-related fields. It provides guidance on using the facetBucketFilter in API requests to refine search responses."
      },
      {
        "url": "https://developers.glean.com/guides/search/datasource-filters",
        "content_description": "This page explains how to use datasource-specific filters in search queries, particularly focusing on retrieving facet information for specific datasources like Confluence or Slack using the Glean UI or Search API. It provides guidance on making API requests to get facet metadata and optimize performance by retrieving only facet results."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/downloadpolicycsv",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/listpolicies",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/getreportstatus",
        "content_description": "This page provides a reference for the Client API endpoint that retrieves the status of a report run in the governance system. It outlines the request details, possible responses, and related permissions."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/downloadreportcsv",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/guides/actions/faq",
        "content_description": "This page provides a FAQ about Actions in Glean, focusing on how to define and optimize them using type hints, authentication setup, LLM interpretation of fields, and technical constraints like data size limits and VPN access. Its main purpose is to guide developers in effectively building and integrating API-based Actions with Glean's AI system."
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/getshortcut",
        "content_description": "This page provides reference documentation for the Client API endpoint to retrieve details of a specific shortcut by its ID, including request structure, responses, and error codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/search",
        "content_description": "This page provides reference documentation for the Client API's search endpoint, detailing how to retrieve indexed results using queries and filters, along with possible responses and error codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/get-agent-schemas",
        "content_description": "This page documents the Client API endpoint for listing an agent's input and output schemas, enabling developers to detect changes in an agent's structure. It is part of the agents API reference and is currently in beta."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/get-agent",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/create-and-stream-run",
        "content_description": "This page provides reference documentation for the Client API endpoint to create an agent run and stream the response using server-sent events (SSE). It details the POST request structure, status codes, and beta status of the streaming functionality."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/typescript",
        "content_description": "This page documents Glean's official TypeScript/JavaScript API client, focusing on how to integrate it into web applications and Node.js services to access Glean's chat and search functionalities with type safety. It includes installation instructions, usage examples for chat and search, framework integrations (Next.js, React, Express), authentication methods, and testing guidance."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/go",
        "content_description": "This page documents Glean's Go API client, providing idiomatic Go interfaces for integrating enterprise search and AI-powered chat capabilities into Go applications. It includes installation instructions, quick start examples, usage of core features like Chat and Search APIs, framework integrations, concurrency patterns, authentication methods, error handling, and testing guidance."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/python",
        "content_description": "This page documents the Python API client for Glean's Client API, enabling developers to integrate chat, search, and agent functionalities into Python applications. It covers installation, authentication, core features like chat and search, framework integrations, and testing practices."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/java",
        "content_description": "This page documents the Java API client for Glean, providing setup instructions, code examples for chat and search functionality, Spring Boot integration, authentication via API tokens, error handling, and testing practices. Its main purpose is to help Java developers integrate Glean's Client API into enterprise applications."
      }
    ],
    "client-api": [
      {
        "url": "https://developers.glean.com/api/client-api/verification/overview",
        "content_description": "This page details the Verification API, which enables users to create, list, and update verification reminders for documents to ensure content accuracy and compliance. It supports workflows for reviewing and verifying information, with specific endpoints for managing verification status across an organization's knowledge base."
      },
      {
        "url": "https://developers.glean.com/api/client-api/authentication/overview",
        "content_description": "This page documents the Authentication API, which allows developers to create and manage secure tokens for authenticating access to Glean's services, specifically covering token generation for the Web SDK and clarifying its non-use with the Client API."
      },
      {
        "url": "https://developers.glean.com/api-info/client/authentication/overview",
        "content_description": "This page provides an overview of authentication methods for Glean's Client API, comparing OAuth and Glean-issued tokens, and guiding developers on choosing, setting up, and testing the appropriate method for their use case. It serves as a starting point for integrating secure access to search, chat, collections, and other user-facing features via the Client API."
      },
      {
        "url": "https://developers.glean.com/api/client-api/entities/overview",
        "content_description": "This page provides an overview and reference for the Entities API, which allows developers to query and retrieve organizational entities like people and teams within a Glean instance. It supports use cases such as building employee directories, team management tools, and entity search integrations."
      },
      {
        "url": "https://developers.glean.com/api/client-api/insights/overview",
        "content_description": "This page documents the Insights API, which provides aggregated analytics on user behavior, search patterns, and content engagement within a Glean instance. It enables organizations to generate reports and dashboards for usage analysis and performance optimization."
      },
      {
        "url": "https://developers.glean.com/api/client-api/summarize/overview",
        "content_description": "The page provides reference documentation for the Summarize API, which uses AI to generate concise summaries of documents and extract key insights. Its main purpose is to enable developers to integrate AI-powered summarization functionality into their applications."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/overview",
        "content_description": "This page provides an overview and reference for the Collections API, which enables developers to programmatically create, manage, and organize collections of documents and resources. It details API endpoints for CRUD operations on collections and their items, supporting use cases like content curation and knowledge organization."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/overview",
        "content_description": "This page provides an overview and reference for the Chat API, which enables developers to build AI-powered conversational applications using Glean. It covers endpoints for managing conversations, uploading context files, and retrieving chat history."
      },
      {
        "url": "https://developers.glean.com/api/client-api/announcements/overview",
        "content_description": "The page provides a reference for the Announcements API, which enables administrators to create, update, and delete organizational announcements targeted by department and location. It focuses on managing internal communications through API endpoints for company-wide or segmented messaging."
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/overview",
        "content_description": "The page provides reference documentation for the Pins API, which enables developers to programmatically manage pinned search results to improve search relevance and user experience by promoting important content for specific queries."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/overview",
        "content_description": "This page provides reference documentation for the Governance API, which allows administrators to create and manage data governance policies, generate compliance reports, and control document visibility through visibility overrides. The main purpose is to enable programmatic oversight of data access, security, and regulatory compliance using client API endpoints."
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/overview",
        "content_description": "The page documents the Shortcuts API, which allows developers to create, manage, and retrieve search shortcuts that provide quick access to frequent queries and resources, improving user efficiency and workflow navigation."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/overview",
        "content_description": "This page provides a reference for the Client API's Agents endpoints, detailing how to programmatically discover, execute, and manage AI agents within Glean. It covers use cases like streaming responses, batch processing, schema inspection, and integration with external applications, along with authentication and common implementation patterns."
      },
      {
        "url": "https://developers.glean.com/api/client-api/answers/overview",
        "content_description": "This page provides reference documentation for the Answers API, which allows developers to create, manage, and retrieve user-generated answers to frequently asked questions. Its main purpose is to support knowledge base creation, FAQ management, and search enhancement through programmatic access to Q&A content."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/overview",
        "content_description": "This page provides an overview of Glean's Search API, detailing endpoints for searching content, retrieving autocomplete suggestions, personalized feeds, and document recommendations. It focuses on enabling developers to build custom search experiences using Glean's client API."
      },
      {
        "url": "https://developers.glean.com/api/client-api/activity/overview",
        "content_description": "The page documents the Activity API, which allows clients to report user interactions with indexed documents and search results to improve search relevance and gather usage analytics. Its main purpose is to enhance search quality through activity tracking and feedback collection."
      },
      {
        "url": "https://developers.glean.com/api-info/client/getting-started/overview",
        "content_description": "This page provides an introduction to the Glean Client API, outlining its key capabilities such as search, generative AI chat, document access, and content management. It guides developers through authentication, choosing an SDK or REST API approach, and starting development with best practices for production use."
      },
      {
        "url": "https://developers.glean.com/api/client-api/verification/verify",
        "content_description": "This page provides reference documentation for the Client API's verification endpoint, specifically the POST /rest/api/v1/verify operation, which allows developers to verify documents and ensure the knowledge corpus remains up to date. It outlines request structure, responses, and error codes related to document verification."
      },
      {
        "url": "https://developers.glean.com/api/client-api/tools/execute-the-specified-tool",
        "content_description": "This page documents the Client API endpoint for executing a specific tool, including request details, parameters, and possible responses. It focuses on tool execution as part of the available API actions."
      },
      {
        "url": "https://developers.glean.com/api/client-api/verification/listverifications",
        "content_description": "This page provides API reference documentation for listing verifications in the verification dashboard, including details on endpoint usage, request structure, and response codes. It focuses on retrieving verification information for documents owned by a user via the Client API."
      },
      {
        "url": "https://developers.glean.com/api/client-api/verification/addverificationreminder",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/messages/messages",
        "content_description": "This page provides reference documentation for the Client API endpoint to read messages from messaging or chat datasources like Slack and Teams. It outlines the POST request structure, response codes, and notes that the endpoint is in beta."
      },
      {
        "url": "https://developers.glean.com/api/client-api/insights/insights",
        "content_description": "This page provides reference documentation for the Client API endpoint to retrieve aggregated insights data on user queries and content. It details the POST request structure and possible responses for the insights resource."
      },
      {
        "url": "https://developers.glean.com/api/client-api/answers/listanswers",
        "content_description": "This page provides a reference for the Client API endpoint to list Answers created by the current user, including details on request structure, responses, and error codes. It serves as a technical guide for developers interacting with the Answers functionality via the API."
      },
      {
        "url": "https://developers.glean.com/api/client-api/authentication/createauthtoken",
        "content_description": "This page documents the Client API endpoint for creating authentication tokens, specifically for use with the Web SDK, and clarifies that these tokens are not valid for the Client API itself. It includes details on the POST request, responses, and authorization requirements."
      },
      {
        "url": "https://developers.glean.com/api-info/client/authentication/glean-issued",
        "content_description": "This page explains how to authenticate with the Client API using Glean-issued tokens, detailing user-scoped and global token types, their setup, required headers, scopes, and best practices for security and token management. It primarily focuses on implementing and troubleshooting token-based authentication for API access."
      },
      {
        "url": "https://developers.glean.com/api-info/client/getting-started/basic-usage",
        "content_description": "This page provides a foundational guide for developers starting with Glean's Client API, covering core APIs (Chat, Search, Agents), key concepts like fragments, permissions, and streaming, and common integration patterns. It explains how to use the API to build knowledge chatbots, search applications, and automated workflows, making it a high-level onboarding resource for understanding and implementing Glean's API capabilities."
      },
      {
        "url": "https://developers.glean.com/api-info/client/authentication/oauth",
        "content_description": "This page provides detailed guidance on configuring and using OAuth authentication for the Client API, including setup instructions for supported identity providers (Google, Azure, Okta, OneLogin), required headers, implementation examples, and troubleshooting tips. The main purpose is to enable developers to authenticate Client API requests using their existing OAuth infrastructure."
      },
      {
        "url": "https://developers.glean.com/api/client-api/entities/people",
        "content_description": "This page provides reference documentation for the Client API endpoint to read person entities by their IDs, detailing request structure, responses, and possible status codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/deletecollectionitem",
        "content_description": "This page provides API reference documentation for deleting a single item from a Collection using the Client API. It details the POST request endpoint, parameters, and possible responses when removing a document or item from a collection."
      },
      {
        "url": "https://developers.glean.com/api/client-api/entities/listentities",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/setdocvisibility",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/updateshortcut",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/summarize/summarize",
        "content_description": "This page provides reference documentation for the Client API's document summarization endpoint, which uses AI to generate summaries of requested documents. It outlines the POST request structure and possible responses, focusing on programmatic access to AI-generated document summaries."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/addcollectionitems",
        "content_description": "This page provides reference documentation for the Client API endpoint to add items to a Collection, including request details and possible responses. It is part of the API documentation focused on managing collections programmatically."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/createcollection",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/getcollection",
        "content_description": "This page provides documentation for the Client API endpoint to read the details of a Collection by its ID, including request structure, responses, and status codes. It specifically covers retrieving metadata about a Collection without fetching its contents."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/listcollections",
        "content_description": "This page documents the Client API endpoint for listing all existing Collections, including request details and possible responses such as success, invalid request, or authorization errors."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/editcollectionitem",
        "content_description": "This page provides reference documentation for the API endpoint used to update an item within a Collection, including modifying its URL, Glean Document ID, and description. It details the request structure, responses, and status codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/deletecollection",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/documents/getdocumentsbyfacets",
        "content_description": "This page provides reference documentation for the Client API endpoint that retrieves documents based on facet conditions, including metadata. It details the POST request structure, available responses, and notes the beta status of the endpoint."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/editcollection",
        "content_description": "This page provides reference documentation for updating an existing Collection via the Client API, detailing the endpoint, request parameters, and possible responses. It focuses on the functionality to modify Collection properties programmatically."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/listchats",
        "content_description": "This page provides API reference documentation for retrieving saved chat metadata between the user and Glean Assistant, including endpoint details, request/response formats, and status codes. It focuses on the Client API's functionality for managing chat history without exposing conversational content."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/getchat",
        "content_description": "This page provides a reference for the Client API endpoint that retrieves chat history between a user and Glean Assistant. It details the request structure, response codes, and related operations for managing saved chats."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/chat",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/getchatapplication",
        "content_description": "This page provides a reference for the Client API endpoint that retrieves metadata and details for a custom Chat application by its ID. It is part of the chat functionality and falls under client-facing API interactions."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/chat-stream",
        "content_description": "This page provides reference documentation for the Client API endpoint used to stream chat interactions with Glean AI, detailing request and response formats, status codes, and usage for conversational queries."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/deletechatfiles",
        "content_description": "This page provides API reference documentation for deleting files uploaded by a user in the context of chat, detailing the endpoint, request structure, and possible responses. It is part of the Client API and focuses on file management within chat functionality."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/getchatfiles",
        "content_description": "This page documents the Client API endpoint for retrieving files uploaded by a user in the context of Chat, including request details, response codes, and navigation to related operations. Its main purpose is to provide developers with reference information for managing user-uploaded chat files via API."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/deleteallchats",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/deletechats",
        "content_description": "This page documents the Client API endpoint for deleting saved chats, including request details, response codes, and its impact on conversational data. It is part of the broader chat and client API reference documentation."
      },
      {
        "url": "https://developers.glean.com/api/client-api/tools/list-available-tools",
        "content_description": "This page provides reference documentation for the Client API endpoint that lists available tools, supporting developers in discovering and filtering tools programmatically. It includes details on request parameters, responses, and error codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/announcements/updateannouncement",
        "content_description": "This page provides API reference documentation for updating textual announcements accessible to specific users based on department and location. It details the POST endpoint, request structure, and possible responses related to managing in-app announcements."
      },
      {
        "url": "https://developers.glean.com/api/client-api/announcements/createannouncement",
        "content_description": "This page documents the Client API endpoint for creating textual announcements targeted to specific user groups based on department and location. It includes details on request structure, responses, and status codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/create-and-wait-run",
        "content_description": "This page provides reference documentation for the Client API endpoint to create an agent run and synchronously wait for its response. It details the POST request structure, status codes, and beta status of the API."
      },
      {
        "url": "https://developers.glean.com/api/client-api/announcements/deleteannouncement",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/activity/activity",
        "content_description": "This page documents the Client API endpoint for reporting user activity on indexed documents, such as viewing or editing. The collected activity data helps improve search relevance and provides insights into document usage."
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/listpins",
        "content_description": "This page provides reference documentation for the Client API endpoint that lists all pins. It details the POST request structure, response codes, and related operations."
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/editpin",
        "content_description": "This page provides reference documentation for updating an existing user-generated pin via the client API, detailing the endpoint, request structure, and possible responses."
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/unpin",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/pin",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/getpin",
        "content_description": "This page provides reference documentation for the Client API endpoint to retrieve pin details by ID, including request structure, responses, and status codes. It is part of the API functionality for managing pins programmatically."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/downloadpolicycsv",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/getpolicy",
        "content_description": "This page provides a reference for the Client API endpoint to retrieve a specific data governance policy by ID, including versioning behavior and response codes. It is part of the broader governance and API client documentation for managing data policies programmatically."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/createreport",
        "content_description": "This page details a specific endpoint in the Client API for creating and executing one-time governance reports, including permissions and error responses. It focuses on programmatic report generation for compliance and auditing purposes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/listpolicies",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/getdocvisibility",
        "content_description": "This page documents a Client API endpoint that retrieves the visibility override status of documents, focusing on governance and permissions controls within the system."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/updatepolicy",
        "content_description": "This page is part of the Client API reference and details how to update an existing governance policy via a POST request to the specified endpoint. It outlines the required parameters, response codes, and permissions needed for the operation."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/getreportstatus",
        "content_description": "This page provides a reference for the Client API endpoint that retrieves the status of a report run in the governance system. It outlines the request details, possible responses, and related permissions."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/createpolicy",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/documents/getdocuments",
        "content_description": "This page provides a reference for the Client API endpoint to retrieve documents by their IDs or URLs, including metadata, while also detailing access permissions and potential error responses."
      },
      {
        "url": "https://developers.glean.com/api/client-api/documents/getdocpermissions",
        "content_description": "This page documents the Client API endpoint for retrieving the list of users who have access to a specific document, detailing request structure, response codes, and permissions handling."
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/getshortcut",
        "content_description": "This page provides reference documentation for the Client API endpoint to retrieve details of a specific shortcut by its ID, including request structure, responses, and error codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/deleteshortcut",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/listshortcuts",
        "content_description": "This page provides a reference for the Client API endpoint to list shortcuts that are editable or owned by the authenticated user, including details on request structure, responses, and status codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/createshortcut",
        "content_description": "This page provides reference documentation for the Client API endpoint to create a user-generated shortcut, including the alias and destination URL. It details the POST request structure, responses, and status codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/search",
        "content_description": "This page provides reference documentation for the Client API's search endpoint, detailing how to retrieve indexed results using queries and filters, along with possible responses and error codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/activity/feedback",
        "content_description": "This page documents the Client API endpoint for reporting user activity such as search result views and clicks, which helps improve search relevance and provides insights into user interactions within the Glean client UI."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/get-agent-schemas",
        "content_description": "This page documents the Client API endpoint for listing an agent's input and output schemas, enabling developers to detect changes in an agent's structure. It is part of the agents API reference and is currently in beta."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/get-agent",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/search-agents",
        "content_description": "This page documents the Client API endpoint for searching agents by name, including request details, response codes, and its beta status. It is part of the API reference for interacting with agents programmatically."
      },
      {
        "url": "https://developers.glean.com/api/client-api/agents/create-and-stream-run",
        "content_description": "This page provides reference documentation for the Client API endpoint to create an agent run and stream the response using server-sent events (SSE). It details the POST request structure, status codes, and beta status of the streaming functionality."
      },
      {
        "url": "https://developers.glean.com/api/client-api/answers/getanswer",
        "content_description": "This page provides reference documentation for the Client API endpoint used to retrieve details of a specific Answer by its ID. It outlines the request structure, possible responses, and error codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/answers/createanswer",
        "content_description": "This page documents the Client API endpoint for creating a user-generated answer, including the question and answer content. It provides details on the POST request, parameters, and possible responses."
      },
      {
        "url": "https://developers.glean.com/api/client-api/answers/deleteanswer",
        "content_description": "This page provides reference documentation for the Client API endpoint used to delete a user-generated answer, including request method, URL, and possible responses. It is part of the Answers API functionality within the broader client-facing API suite."
      },
      {
        "url": "https://developers.glean.com/api/client-api/answers/editanswer",
        "content_description": "This page documents the Client API endpoint for updating an existing user-generated Answer, including request details and possible responses like 200 OK, 400, 401, and 429 status codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/autocomplete",
        "content_description": "This page provides reference documentation for the Autocomplete API endpoint, which returns query suggestions, operators, and document matches based on a partially typed search query. It is part of the Client API and supports search functionality within the platform."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/adminsearch",
        "content_description": "This page documents the admin search endpoint in the Client API, which allows privileged users to perform search queries against the index without permission checks. It is intended for administrative use and is currently in beta."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/feed",
        "content_description": "This page documents the Client API endpoint for retrieving a personalized feed of documents and events, such as suggestions, recent activity, and calendar events. It outlines request and response details, including status codes and structure."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/recommendations",
        "content_description": "This page provides reference documentation for the Client API's recommendations endpoint, which retrieves suggested documents based on a given URL or Glean Document ID. It details request/response formats, status codes, and notes the beta status of the feature."
      }
    ],
    "indexing-api": [
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/datasource-config",
        "content_description": "This page provides guidance on debugging and retrieving datasource configuration details using the Indexing API, including sample requests and responses to verify the current state of a datasource config. It helps developers ensure their datasource settings are correctly applied and troubleshoot configuration issues."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/permissions-overview",
        "content_description": "This page provides an overview of the Indexing API's permissions management capabilities, focusing on controlling user and group access to content for secure and compliant search results. It details endpoints for indexing, updating, and deleting users, groups, and memberships to manage content visibility dynamically."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/documents-overview",
        "content_description": "This page provides an overview of the Indexing API, focusing on endpoints for indexing, updating, and managing documents in Glean, including real-time indexing, bulk operations, permission updates, and document deletion."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/shortcuts-overview",
        "content_description": "This page provides reference documentation for the Indexing API's shortcut functionality, enabling developers to create and manage search shortcuts for quick access to tools, dashboards, and external resources. Its main purpose is to enhance search productivity through bulk indexing and management of shortcuts."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/troubleshooting-overview",
        "content_description": "This page provides reference and guidance for troubleshooting indexing operations, including monitoring status, verifying data integrity, testing access controls, and diagnosing performance issues. It covers diagnostic API endpoints for checking document, user, and datasource statuses within the indexing pipeline."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/people-overview",
        "content_description": "This page provides reference documentation for the Indexing API's people management functionality, enabling organizations to sync employee and team data from live HR systems into broles in to a Glean instance. Its main purpose is to support synchronization of organizational structure for people search, content attribution, and access control."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/authentication/overview",
        "content_description": "This page provides a comprehensive guide to authenticating with Glean's Indexing API using Glean-issued tokens, covering token creation, security features like IP restrictions and rotation, proper request formatting, and troubleshooting common errors. The main purpose is to help administrators securely set up and manage authentication for document indexing and datasource operations."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/datasources-overview",
        "content_description": "This page provides an overview of datasources in the Indexing API, explaining how to configure and manage content sources for indexing into Glean. It covers use cases like custom datasource setup, configuration management, and integration monitoring, along with relevant API endpoints."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/authentication-overview",
        "content_description": "This page provides an overview of authentication for the Indexing API, including managing and rotating tokens, setting up tokens across environments, and integrating third-party services. It outlines use cases and API endpoints for secure access to Glean's indexing functionality."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/activity",
        "content_description": "This page describes how to use the Indexing API's activity endpoint to report user interactions (like VIEW or EDIT) for documents, which influences search ranking. It covers authentication requirements, token scoping, and provides an example request to send activity data server-to-server."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/getting-started/overview",
        "content_description": "This page provides an overview of the Glean Indexing API, focusing on how to get started with creating datasources, indexing custom content (documents, entities, user data), and managing permissions. It outlines key capabilities, common use cases, and the workflow for integrating external systems into Glean's search and AI ecosystem."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/custom-properties",
        "content_description": "This page explains how to define and use custom properties for documents within a datasource using the Indexing API, including configuration, uploading, and their use in filtering (operators/facets), rendering in search results, and improving searchability and ranking."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/datasource-status",
        "content_description": "This page provides guidance on using the Indexing API to debug and retrieve the status of a datasource, including document and identity processing history, upload counts, and bulk upload details. It helps developers monitor and troubleshoot data synchronization and indexing issues."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/document-count",
        "content_description": "This page describes how to use the Indexing API to retrieve the count of documents in a datasource, with optional filtering by object type, and provides code examples for making the request using cURL and Python."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/datasource-user",
        "content_description": "This page provides documentation for an Indexing API endpoint used to debug user-related issues, offering details such as user permissions, group memberships, and upload status. It includes sample requests and responses in cURL and Python to help developers diagnose user data problems."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/rendering-search-results",
        "content_description": "This page explains how search results from datasources are rendered in the UI, based on datasource categories, custom render configurations, or by reusing existing rendering presets. It covers the default behaviors for categories like PUBLISHED_CONTENT and KNOWLEDGE_HUB, options for customization, and how to apply rendering presets during datasource setup."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/document-access",
        "content_description": "This page provides guidance on using the Indexing API to check whether a specific user has access to a document, including sample requests and responses in cURL and Python. It focuses on debugging document-level permissions and understanding access control for troubleshooting purposes."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/datasource-document",
        "content_description": "This page provides guidance on using the Indexing API to debug document-level issues, offering details such as upload and indexing status, permissions, and timestamps for a specific document within a datasource."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-user",
        "content_description": "This page documents the Indexing API endpoint for adding or updating a datasource user, including request details and possible responses. It focuses on managing user permissions within a datasource through the API."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-teams",
        "content_description": "This page provides API reference documentation for bulk indexing teams using the Indexing API, allowing replacement of currently indexed teams via paginated batch calls. It outlines request details, responses, and links to related bulk indexing documentation."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-membership",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-group",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-memberships-for-a-group",
        "content_description": "This page documents the Indexing API endpoint for bulk indexing group memberships within a datasource, detailing how to replace memberships using paginated batch requests and highlighting relevant response codes."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-users",
        "content_description": "This page documents the Bulk Index Users API endpoint, which allows replacing users in a datasource via paginated batch requests. It outlines authentication, request structure, and possible responses, focusing on bulk management of user data within a datasource."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-group-memberships",
        "content_description": "This page documents an Indexing API endpoint that allows scheduling the immediate processing of group memberships. Its main purpose is to trigger on-demand processing of memberships uploaded via the API, which are otherwise processed asynchronously."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-user",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-groups",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-membership",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-users",
        "content_description": "This page documents a POST endpoint in the Indexing API that allows controlling visibility of a datasource for beta users by specifying which users can access it. It outlines request structure and possible responses, focusing on permission management for early-access features."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-group",
        "content_description": "This page is part of the Indexing API reference and documents the \"Delete group\" endpoint, which removes a group from a datasource while handling various response codes such as success, authorization errors, and conflicts."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-document",
        "content_description": "This page provides reference documentation for the Indexing API's \"Index document\" endpoint, which allows developers to add a new document to the index or update an existing one via a POST request. It includes details on request structure, responses, and common status codes."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/get-datasource-config",
        "content_description": "This page provides reference documentation for the Indexing API endpoint that retrieves the configuration of a specified custom datasource. Its main purpose is to support developers in managing and accessing datasource configurations programmatically."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/update-document-permissions",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-uploaded-documents",
        "content_description": "This page documents the Indexing API endpoint that triggers immediate processing of uploaded documents, either across all datasources or a specific one, and explains rate limiting behavior and usage constraints. Its main purpose is to allow developers to automate document indexing and understand processing scheduling limitations."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-document",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-documents",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-documents",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/upload-shortcuts",
        "content_description": "This page provides reference documentation for the Indexing API's upload shortcuts endpoint, which allows uploading external shortcuts to be hosted and managed within Glean. The main functionality enables indexing of shortcuts as documents for use in the knowledge base."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-external-shortcuts",
        "content_description": "This page provides reference documentation for the Bulk Index External Shortcuts API endpoint, which allows developers to replace all currently indexed external shortcuts in a paginated manner. It specifically covers indexing non-Glean-hosted shortcuts and distinguishes between external and Glean-hosted shortcuts."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/get-user-count",
        "content_description": "This page provides reference documentation for the deprecated /api/index/v1/getusercount endpoint, which retrieves the user count for a custom datasource. It includes response codes and a recommendation to use a different endpoint for more detailed information."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/check-document-access",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-get-user-information",
        "content_description": "This page documents a beta endpoint in the Indexing API that retrieves debug information for a specific user to assist with troubleshooting. It includes details on request/response codes and references related troubleshooting resources."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/get-document-count",
        "content_description": "This page provides reference and troubleshooting information for the Indexing API, specifically detailing a deprecated endpoint for fetching document count in a custom datasource, along with guidance to use a debug alternative for more comprehensive status data."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-get-information-of-a-batch-of-documents",
        "content_description": "This page provides reference documentation for a beta Indexing API endpoint that retrieves debugging information for a batch of documents. Its main purpose is to help developers troubleshoot issues when processing documents in a datasource."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-get-document-information",
        "content_description": "This page provides a beta API endpoint to retrieve debugging information for a specific document within a datasource, helping developers troubleshoot indexing issues. It is part of the Indexing API and focuses on diagnostic capabilities during document processing."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/get-document-upload-and-indexing-status",
        "content_description": "This page provides reference documentation for a deprecated endpoint in the Indexing API used to check the upload and indexing status of documents. It is intended for debugging purposes and suggests a newer alternative for retrieving document information."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-get-datasource-status",
        "content_description": "This page provides reference documentation for a beta endpoint that retrieves the status of a datasource within the Indexing API. It is primarily used for troubleshooting and monitoring datasource health during indexing operations."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-employee",
        "content_description": "This page provides reference documentation for the Indexing API's endpoint to add or update employee information in the index. It outlines the POST request structure, possible responses, and relates to managing employee entities within the system."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-team",
        "content_description": "This page documents the Indexing API endpoint for adding or updating a team within the system. It focuses on managing team entities as part of the indexing process."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-employee",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-uploaded-employees-and-teams",
        "content_description": "This page documents the Indexing API endpoint for triggering the immediate processing of uploaded employees and teams data. Its main purpose is to allow developers to programmatically schedule data processing after bulk uploads."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-employees",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-team",
        "content_description": "This page provides reference documentation for the Indexing API endpoint to delete a team by ID, including request details and possible responses. It focuses on managing team entities within the indexing system."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/getting-started/setup-datasource",
        "content_description": "This page provides a guide on how to set up a datasource using either the Glean admin console or the /adddatasource API endpoint, which is the first step in using the Indexing API. It outlines required fields, configuration options, and includes code examples for creating a datasource."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/authentication/token-rotation",
        "content_description": "This page explains how to rotate authentication tokens for the Indexing API to enhance security. It covers the process of exchanging a rotatable token for a new one using the /rotatetoken endpoint, including implementation guidance and best practices like using cron jobs for automation."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/getting-started/index-documents",
        "content_description": "This page provides a beginner's guide to using the Indexing API, focusing on how to configure a datasource, index a document with key metadata, and enable search visibility. It includes code examples in cURL and Python, and covers core concepts like document structure, permissions, and troubleshooting tips."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/rotate-token",
        "content_description": "This page provides reference documentation for rotating an Indexing API token's secret value using a POST request. It explains how to perform the rotation and the expected responses, emphasizing secure authentication practices."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/add-or-update-datasource",
        "content_description": "This page provides reference documentation for the \"Add or update datasource\" endpoint in the Indexing API, allowing developers to create or modify a custom datasource and its schema via a POST request. It includes details on request structure, responses, and status codes."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/supported-mimetypes",
        "content_description": "This page details the MIME types supported and unsupported by the Indexing API when processing documents, providing guidance on acceptable file formats for indexing. Its main purpose is to help developers ensure their document content meets API requirements for successful ingestion."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/bulk-upload-model",
        "content_description": "This page describes the bulk upload model in the Indexing API, focusing on how to upload documents in batches, manage upload sessions, and control document deletion behavior during bulk operations. It covers key fields like uploadId, pagination flags, and safeguards against accidental data loss."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/permissions",
        "content_description": "This page explains how to configure document-level permissions using the Indexing API, including setting access for anonymous users, specific users, all datasource users, and predefined groups. It covers the necessary steps to index users, groups, and memberships to enable fine-grained access control for documents in Glean."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/document-model",
        "content_description": "This page describes the document model used in the Indexing API to structure and upload documents to Glean, including core fields like id, body, datasource, permissions, and custom properties. It serves as a guide for developers to understand how to format documents for indexing."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/bulk-indexing",
        "content_description": "This page explains how to use the Bulk Indexing endpoint of the Indexing API to replace all documents in a custom datasource, contrasting it with incremental indexing, and provides a sample request along with key considerations for successful document ingestion."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/test-datasource",
        "content_description": "This page explains how to set up and configure a test datasource using the Indexing API, including marking it as a test and restricting visibility to select users via the betausers endpoint, ensuring it does not impact production rankings or access."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/category",
        "content_description": "This page explains how to categorize datasources in the Indexing API to improve content ranking, providing definitions for each category and guidance on proper classification based on content type."
      }
    ],
    "documents": [
      {
        "url": "https://developers.glean.com/api/client-api/verification/overview",
        "content_description": "This page details the Verification API, which enables users to create, list, and update verification reminders for documents to ensure content accuracy and compliance. It supports workflows for reviewing and verifying information, with specific endpoints for managing verification status across an organization's knowledge base."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/documents-overview",
        "content_description": "This page provides an overview of the Indexing API, focusing on endpoints for indexing, updating, and managing documents in Glean, including real-time indexing, bulk operations, permission updates, and document deletion."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/troubleshooting-overview",
        "content_description": "This page provides reference and guidance for troubleshooting indexing operations, including monitoring status, verifying data integrity, testing access controls, and diagnosing performance issues. It covers diagnostic API endpoints for checking document, user, and datasource statuses within the indexing pipeline."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/people-overview",
        "content_description": "This page provides reference documentation for the Indexing API's people management functionality, enabling organizations to sync employee and team data from live HR systems into broles in to a Glean instance. Its main purpose is to support synchronization of organizational structure for people search, content attribution, and access control."
      },
      {
        "url": "https://developers.glean.com/api/client-api/documents/overview",
        "content_description": "This page provides an overview of the Documents API, which allows developers to retrieve document metadata, content, and access permissions programmatically. It supports use cases like document discovery, permission management, and content analysis through specific API endpoints."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/custom-properties",
        "content_description": "This page explains how to define and use custom properties for documents within a datasource using the Indexing API, including configuration, uploading, and their use in filtering (operators/facets), rendering in search results, and improving searchability and ranking."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-document",
        "content_description": "This page provides reference documentation for the Indexing API's \"Index document\" endpoint, which allows developers to add a new document to the index or update an existing one via a POST request. It includes details on request structure, responses, and common status codes."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-uploaded-documents",
        "content_description": "This page documents the Indexing API endpoint that triggers immediate processing of uploaded documents, either across all datasources or a specific one, and explains rate limiting behavior and usage constraints. Its main purpose is to allow developers to automate document indexing and understand processing scheduling limitations."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-document",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-documents",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-documents",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/upload-shortcuts",
        "content_description": "This page provides reference documentation for the Indexing API's upload shortcuts endpoint, which allows uploading external shortcuts to be hosted and managed within Glean. The main functionality enables indexing of shortcuts as documents for use in the knowledge base."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-employee",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-employees",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/deletecollectionitem",
        "content_description": "This page provides API reference documentation for deleting a single item from a Collection using the Client API. It details the POST request endpoint, parameters, and possible responses when removing a document or item from a collection."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/setdocvisibility",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/getting-started/index-documents",
        "content_description": "This page provides a beginner's guide to using the Indexing API, focusing on how to configure a datasource, index a document with key metadata, and enable search visibility. It includes code examples in cURL and Python, and covers core concepts like document structure, permissions, and troubleshooting tips."
      },
      {
        "url": "https://developers.glean.com/api/client-api/summarize/summarize",
        "content_description": "This page provides reference documentation for the Client API's document summarization endpoint, which uses AI to generate summaries of requested documents. It outlines the POST request structure and possible responses, focusing on programmatic access to AI-generated document summaries."
      },
      {
        "url": "https://developers.glean.com/api/client-api/documents/getdocumentsbyfacets",
        "content_description": "This page provides reference documentation for the Client API endpoint that retrieves documents based on facet conditions, including metadata. It details the POST request structure, available responses, and notes the beta status of the endpoint."
      },
      {
        "url": "https://developers.glean.com/api/client-api/chat/deletechatfiles",
        "content_description": "This page provides API reference documentation for deleting files uploaded by a user in the context of chat, detailing the endpoint, request structure, and possible responses. It is part of the Client API and focuses on file management within chat functionality."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/supported-mimetypes",
        "content_description": "This page details the MIME types supported and unsupported by the Indexing API when processing documents, providing guidance on acceptable file formats for indexing. Its main purpose is to help developers ensure their document content meets API requirements for successful ingestion."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/bulk-upload-model",
        "content_description": "This page describes the bulk upload model in the Indexing API, focusing on how to upload documents in batches, manage upload sessions, and control document deletion behavior during bulk operations. It covers key fields like uploadId, pagination flags, and safeguards against accidental data loss."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/permissions",
        "content_description": "This page explains how to configure document-level permissions using the Indexing API, including setting access for anonymous users, specific users, all datasource users, and predefined groups. It covers the necessary steps to index users, groups, and memberships to enable fine-grained access control for documents in Glean."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/document-model",
        "content_description": "This page describes the document model used in the Indexing API to structure and upload documents to Glean, including core fields like id, body, datasource, permissions, and custom properties. It serves as a guide for developers to understand how to format documents for indexing."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/bulk-indexing",
        "content_description": "This page explains how to use the Bulk Indexing endpoint of the Indexing API to replace all documents in a custom datasource, contrasting it with incremental indexing, and provides a sample request along with key considerations for successful document ingestion."
      },
      {
        "url": "https://developers.glean.com/api/client-api/documents/getdocuments",
        "content_description": "This page provides a reference for the Client API endpoint to retrieve documents by their IDs or URLs, including metadata, while also detailing access permissions and potential error responses."
      },
      {
        "url": "https://developers.glean.com/api/client-api/documents/getdocpermissions",
        "content_description": "This page documents the Client API endpoint for retrieving the list of users who have access to a specific document, detailing request structure, response codes, and permissions handling."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/feed",
        "content_description": "This page documents the Client API endpoint for retrieving a personalized feed of documents and events, such as suggestions, recent activity, and calendar events. It outlines request and response details, including status codes and structure."
      },
      {
        "url": "https://developers.glean.com/api/client-api/search/recommendations",
        "content_description": "This page provides reference documentation for the Client API's recommendations endpoint, which retrieves suggested documents based on a given URL or Glean Document ID. It details request/response formats, status codes, and notes the beta status of the feature."
      }
    ],
    "collections": [
      {
        "url": "https://developers.glean.com/api/client-api/collections/overview",
        "content_description": "This page provides an overview and reference for the Collections API, which enables developers to programmatically create, manage, and organize collections of documents and resources. It details API endpoints for CRUD operations on collections and their items, supporting use cases like content curation and knowledge organization."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-teams",
        "content_description": "This page provides API reference documentation for bulk indexing teams using the Indexing API, allowing replacement of currently indexed teams via paginated batch calls. It outlines request details, responses, and links to related bulk indexing documentation."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/deletecollectionitem",
        "content_description": "This page provides API reference documentation for deleting a single item from a Collection using the Client API. It details the POST request endpoint, parameters, and possible responses when removing a document or item from a collection."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/addcollectionitems",
        "content_description": "This page provides reference documentation for the Client API endpoint to add items to a Collection, including request details and possible responses. It is part of the API documentation focused on managing collections programmatically."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/createcollection",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/getcollection",
        "content_description": "This page provides documentation for the Client API endpoint to read the details of a Collection by its ID, including request structure, responses, and status codes. It specifically covers retrieving metadata about a Collection without fetching its contents."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/listcollections",
        "content_description": "This page documents the Client API endpoint for listing all existing Collections, including request details and possible responses such as success, invalid request, or authorization errors."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/editcollectionitem",
        "content_description": "This page provides reference documentation for the API endpoint used to update an item within a Collection, including modifying its URL, Glean Document ID, and description. It details the request structure, responses, and status codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/deletecollection",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/collections/editcollection",
        "content_description": "This page provides reference documentation for updating an existing Collection via the Client API, detailing the endpoint, request parameters, and possible responses. It focuses on the functionality to modify Collection properties programmatically."
      }
    ],
    "entities": [
      {
        "url": "https://developers.glean.com/api/client-api/entities/overview",
        "content_description": "This page provides an overview and reference for the Entities API, which allows developers to query and retrieve organizational entities like people and teams within a Glean instance. It supports use cases such as building employee directories, team management tools, and entity search integrations."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-employee",
        "content_description": "This page provides reference documentation for the Indexing API's endpoint to add or update employee information in the index. It outlines the POST request structure, possible responses, and relates to managing employee entities within the system."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-team",
        "content_description": "This page documents the Indexing API endpoint for adding or updating a team within the system. It focuses on managing team entities as part of the indexing process."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-team",
        "content_description": "This page provides reference documentation for the Indexing API endpoint to delete a team by ID, including request details and possible responses. It focuses on managing team entities within the indexing system."
      },
      {
        "url": "https://developers.glean.com/api/client-api/entities/people",
        "content_description": "This page provides reference documentation for the Client API endpoint to read person entities by their IDs, detailing request structure, responses, and possible status codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/entities/listentities",
        "content_description": ""
      }
    ],
    "permissions": [
      {
        "url": "https://developers.glean.com/api/indexing-api/permissions-overview",
        "content_description": "This page provides an overview of the Indexing API's permissions management capabilities, focusing on controlling user and group access to content for secure and compliant search results. It details endpoints for indexing, updating, and deleting users, groups, and memberships to manage content visibility dynamically."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/documents-overview",
        "content_description": "This page provides an overview of the Indexing API, focusing on endpoints for indexing, updating, and managing documents in Glean, including real-time indexing, bulk operations, permission updates, and document deletion."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/overview",
        "content_description": "This page provides reference documentation for the Governance API, which allows administrators to create and manage data governance policies, generate compliance reports, and control document visibility through visibility overrides. The main purpose is to enable programmatic oversight of data access, security, and regulatory compliance using client API endpoints."
      },
      {
        "url": "https://developers.glean.com/api/client-api/documents/overview",
        "content_description": "This page provides an overview of the Documents API, which allows developers to retrieve document metadata, content, and access permissions programmatically. It supports use cases like document discovery, permission management, and content analysis through specific API endpoints."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/datasource-user",
        "content_description": "This page provides documentation for an Indexing API endpoint used to debug user-related issues, offering details such as user permissions, group memberships, and upload status. It includes sample requests and responses in cURL and Python to help developers diagnose user data problems."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/document-access",
        "content_description": "This page provides guidance on using the Indexing API to check whether a specific user has access to a document, including sample requests and responses in cURL and Python. It focuses on debugging document-level permissions and understanding access control for troubleshooting purposes."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-user",
        "content_description": "This page documents the Indexing API endpoint for adding or updating a datasource user, including request details and possible responses. It focuses on managing user permissions within a datasource through the API."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-membership",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-group",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-memberships-for-a-group",
        "content_description": "This page documents the Indexing API endpoint for bulk indexing group memberships within a datasource, detailing how to replace memberships using paginated batch requests and highlighting relevant response codes."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-users",
        "content_description": "This page documents the Bulk Index Users API endpoint, which allows replacing users in a datasource via paginated batch requests. It outlines authentication, request structure, and possible responses, focusing on bulk management of user data within a datasource."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-group-memberships",
        "content_description": "This page documents an Indexing API endpoint that allows scheduling the immediate processing of group memberships. Its main purpose is to trigger on-demand processing of memberships uploaded via the API, which are otherwise processed asynchronously."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-user",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-groups",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-membership",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-users",
        "content_description": "This page documents a POST endpoint in the Indexing API that allows controlling visibility of a datasource for beta users by specifying which users can access it. It outlines request structure and possible responses, focusing on permission management for early-access features."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-group",
        "content_description": "This page is part of the Indexing API reference and documents the \"Delete group\" endpoint, which removes a group from a datasource while handling various response codes such as success, authorization errors, and conflicts."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/update-document-permissions",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/check-document-access",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/permissions",
        "content_description": "This page explains how to configure document-level permissions using the Indexing API, including setting access for anonymous users, specific users, all datasource users, and predefined groups. It covers the necessary steps to index users, groups, and memberships to enable fine-grained access control for documents in Glean."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/getdocvisibility",
        "content_description": "This page documents a Client API endpoint that retrieves the visibility override status of documents, focusing on governance and permissions controls within the system."
      },
      {
        "url": "https://developers.glean.com/api/client-api/documents/getdocpermissions",
        "content_description": "This page documents the Client API endpoint for retrieving the list of users who have access to a specific document, detailing request structure, response codes, and permissions handling."
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/listshortcuts",
        "content_description": "This page provides a reference for the Client API endpoint to list shortcuts that are editable or owned by the authenticated user, including details on request structure, responses, and status codes."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/test-datasource",
        "content_description": "This page explains how to set up and configure a test datasource using the Indexing API, including marking it as a test and restricting visibility to select users via the betausers endpoint, ensuring it does not impact production rankings or access."
      }
    ],
    "troubleshooting": [
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/datasource-config",
        "content_description": "This page provides guidance on debugging and retrieving datasource configuration details using the Indexing API, including sample requests and responses to verify the current state of a datasource config. It helps developers ensure their datasource settings are correctly applied and troubleshoot configuration issues."
      },
      {
        "url": "https://developers.glean.com/get-started/rate-limits",
        "content_description": "This page outlines the rate limits applied to API requests in Glean, including deployment, user, and endpoint-level limits, and provides guidance on handling rate-limited responses with retries and backoff strategies. It helps developers understand and manage API usage to ensure stable and reliable integrations."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/troubleshooting-overview",
        "content_description": "This page provides reference and guidance for troubleshooting indexing operations, including monitoring status, verifying data integrity, testing access controls, and diagnosing performance issues. It covers diagnostic API endpoints for checking document, user, and datasource statuses within the indexing pipeline."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/authentication/overview",
        "content_description": "This page provides a comprehensive guide to authenticating with Glean's Indexing API using Glean-issued tokens, covering token creation, security features like IP restrictions and rotation, proper request formatting, and troubleshooting common errors. The main purpose is to help administrators securely set up and manage authentication for document indexing and datasource operations."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/datasource-status",
        "content_description": "This page provides guidance on using the Indexing API to debug and retrieve the status of a datasource, including document and identity processing history, upload counts, and bulk upload details. It helps developers monitor and troubleshoot data synchronization and indexing issues."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/document-count",
        "content_description": "This page describes how to use the Indexing API to retrieve the count of documents in a datasource, with optional filtering by object type, and provides code examples for making the request using cURL and Python."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/datasource-user",
        "content_description": "This page provides documentation for an Indexing API endpoint used to debug user-related issues, offering details such as user permissions, group memberships, and upload status. It includes sample requests and responses in cURL and Python to help developers diagnose user data problems."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/document-access",
        "content_description": "This page provides guidance on using the Indexing API to check whether a specific user has access to a document, including sample requests and responses in cURL and Python. It focuses on debugging document-level permissions and understanding access control for troubleshooting purposes."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/datasource-document",
        "content_description": "This page provides guidance on using the Indexing API to debug document-level issues, offering details such as upload and indexing status, permissions, and timestamps for a specific document within a datasource."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/get-user-count",
        "content_description": "This page provides reference documentation for the deprecated /api/index/v1/getusercount endpoint, which retrieves the user count for a custom datasource. It includes response codes and a recommendation to use a different endpoint for more detailed information."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/check-document-access",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-get-user-information",
        "content_description": "This page documents a beta endpoint in the Indexing API that retrieves debug information for a specific user to assist with troubleshooting. It includes details on request/response codes and references related troubleshooting resources."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/get-document-count",
        "content_description": "This page provides reference and troubleshooting information for the Indexing API, specifically detailing a deprecated endpoint for fetching document count in a custom datasource, along with guidance to use a debug alternative for more comprehensive status data."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-get-information-of-a-batch-of-documents",
        "content_description": "This page provides reference documentation for a beta Indexing API endpoint that retrieves debugging information for a batch of documents. Its main purpose is to help developers troubleshoot issues when processing documents in a datasource."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-get-document-information",
        "content_description": "This page provides a beta API endpoint to retrieve debugging information for a specific document within a datasource, helping developers troubleshoot indexing issues. It is part of the Indexing API and focuses on diagnostic capabilities during document processing."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/get-document-upload-and-indexing-status",
        "content_description": "This page provides reference documentation for a deprecated endpoint in the Indexing API used to check the upload and indexing status of documents. It is intended for debugging purposes and suggests a newer alternative for retrieving document information."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-get-datasource-status",
        "content_description": "This page provides reference documentation for a beta endpoint that retrieves the status of a datasource within the Indexing API. It is primarily used for troubleshooting and monitoring datasource health during indexing operations."
      }
    ],
    "verification": [
      {
        "url": "https://developers.glean.com/api/client-api/verification/overview",
        "content_description": "This page details the Verification API, which enables users to create, list, and update verification reminders for documents to ensure content accuracy and compliance. It supports workflows for reviewing and verifying information, with specific endpoints for managing verification status across an organization's knowledge base."
      },
      {
        "url": "https://developers.glean.com/api/client-api/verification/verify",
        "content_description": "This page provides reference documentation for the Client API's verification endpoint, specifically the POST /rest/api/v1/verify operation, which allows developers to verify documents and ensure the knowledge corpus remains up to date. It outlines request structure, responses, and error codes related to document verification."
      },
      {
        "url": "https://developers.glean.com/api/client-api/verification/listverifications",
        "content_description": "This page provides API reference documentation for listing verifications in the verification dashboard, including details on endpoint usage, request structure, and response codes. It focuses on retrieving verification information for documents owned by a user via the Client API."
      },
      {
        "url": "https://developers.glean.com/api/client-api/verification/addverificationreminder",
        "content_description": ""
      }
    ],
    "messages": [
      {
        "url": "https://developers.glean.com/api/client-api/messages/overview",
        "content_description": "The page provides an overview of the Messages API, which allows developers to retrieve, search, and analyze messages from chat platforms like Slack and Microsoft Teams, enabling use cases such as communication search, knowledge extraction, and analytics."
      },
      {
        "url": "https://developers.glean.com/api/client-api/announcements/overview",
        "content_description": "The page provides a reference for the Announcements API, which enables administrators to create, update, and delete organizational announcements targeted by department and location. It focuses on managing internal communications through API endpoints for company-wide or segmented messaging."
      },
      {
        "url": "https://developers.glean.com/api/client-api/messages/messages",
        "content_description": "This page provides reference documentation for the Client API endpoint to read messages from messaging or chat datasources like Slack and Teams. It outlines the POST request structure, response codes, and notes that the endpoint is in beta."
      },
      {
        "url": "https://developers.glean.com/api/client-api/announcements/updateannouncement",
        "content_description": "This page provides API reference documentation for updating textual announcements accessible to specific users based on department and location. It details the POST endpoint, request structure, and possible responses related to managing in-app announcements."
      },
      {
        "url": "https://developers.glean.com/api/client-api/announcements/createannouncement",
        "content_description": "This page documents the Client API endpoint for creating textual announcements targeted to specific user groups based on department and location. It includes details on request structure, responses, and status codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/announcements/deleteannouncement",
        "content_description": ""
      }
    ],
    "insights": [
      {
        "url": "https://developers.glean.com/api/client-api/insights/overview",
        "content_description": "This page documents the Insights API, which provides aggregated analytics on user behavior, search patterns, and content engagement within a Glean instance. It enables organizations to generate reports and dashboards for usage analysis and performance optimization."
      },
      {
        "url": "https://developers.glean.com/api/client-api/summarize/overview",
        "content_description": "The page provides reference documentation for the Summarize API, which uses AI to generate concise summaries of documents and extract key insights. Its main purpose is to enable developers to integrate AI-powered summarization functionality into their applications."
      },
      {
        "url": "https://developers.glean.com/api/client-api/activity/overview",
        "content_description": "The page documents the Activity API, which allows clients to report user interactions with indexed documents and search results to improve search relevance and gather usage analytics. Its main purpose is to enhance search quality through activity tracking and feedback collection."
      },
      {
        "url": "https://developers.glean.com/api/client-api/insights/insights",
        "content_description": "This page provides reference documentation for the Client API endpoint to retrieve aggregated insights data on user queries and content. It details the POST request structure and possible responses for the insights resource."
      },
      {
        "url": "https://developers.glean.com/api/client-api/activity/activity",
        "content_description": "This page documents the Client API endpoint for reporting user activity on indexed documents, such as viewing or editing. The collected activity data helps improve search relevance and provides insights into document usage."
      },
      {
        "url": "https://developers.glean.com/api/client-api/activity/feedback",
        "content_description": "This page documents the Client API endpoint for reporting user activity such as search result views and clicks, which helps improve search relevance and provides insights into user interactions within the Glean client UI."
      }
    ],
    "datasources": [
      {
        "url": "https://developers.glean.com/api/indexing-api/datasources-overview",
        "content_description": "This page provides an overview of datasources in the Indexing API, explaining how to configure and manage content sources for indexing into Glean. It covers use cases like custom datasource setup, configuration management, and integration monitoring, along with relevant API endpoints."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/activity",
        "content_description": "This page describes how to use the Indexing API's activity endpoint to report user interactions (like VIEW or EDIT) for documents, which influences search ranking. It covers authentication requirements, token scoping, and provides an example request to send activity data server-to-server."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/getting-started/overview",
        "content_description": "This page provides an overview of the Glean Indexing API, focusing on how to get started with creating datasources, indexing custom content (documents, entities, user data), and managing permissions. It outlines key capabilities, common use cases, and the workflow for integrating external systems into Glean's search and AI ecosystem."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/custom-properties",
        "content_description": "This page explains how to define and use custom properties for documents within a datasource using the Indexing API, including configuration, uploading, and their use in filtering (operators/facets), rendering in search results, and improving searchability and ranking."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/datasource-status",
        "content_description": "This page provides guidance on using the Indexing API to debug and retrieve the status of a datasource, including document and identity processing history, upload counts, and bulk upload details. It helps developers monitor and troubleshoot data synchronization and indexing issues."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/document-count",
        "content_description": "This page describes how to use the Indexing API to retrieve the count of documents in a datasource, with optional filtering by object type, and provides code examples for making the request using cURL and Python."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/rendering-search-results",
        "content_description": "This page explains how search results from datasources are rendered in the UI, based on datasource categories, custom render configurations, or by reusing existing rendering presets. It covers the default behaviors for categories like PUBLISHED_CONTENT and KNOWLEDGE_HUB, options for customization, and how to apply rendering presets during datasource setup."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/debugging/datasource-document",
        "content_description": "This page provides guidance on using the Indexing API to debug document-level issues, offering details such as upload and indexing status, permissions, and timestamps for a specific document within a datasource."
      },
      {
        "url": "https://developers.glean.com/api/client-api/messages/messages",
        "content_description": "This page provides reference documentation for the Client API endpoint to read messages from messaging or chat datasources like Slack and Teams. It outlines the POST request structure, response codes, and notes that the endpoint is in beta."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-membership",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-group",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-memberships-for-a-group",
        "content_description": "This page documents the Indexing API endpoint for bulk indexing group memberships within a datasource, detailing how to replace memberships using paginated batch requests and highlighting relevant response codes."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-users",
        "content_description": "This page documents the Bulk Index Users API endpoint, which allows replacing users in a datasource via paginated batch requests. It outlines authentication, request structure, and possible responses, focusing on bulk management of user data within a datasource."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/delete-user",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-groups",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/index-membership",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-users",
        "content_description": "This page documents a POST endpoint in the Indexing API that allows controlling visibility of a datasource for beta users by specifying which users can access it. It outlines request structure and possible responses, focusing on permission management for early-access features."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/get-datasource-config",
        "content_description": "This page provides reference documentation for the Indexing API endpoint that retrieves the configuration of a specified custom datasource. Its main purpose is to support developers in managing and accessing datasource configurations programmatically."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/bulk-index-documents",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/beta-get-document-information",
        "content_description": "This page provides a beta API endpoint to retrieve debugging information for a specific document within a datasource, helping developers troubleshoot indexing issues. It is part of the Indexing API and focuses on diagnostic capabilities during document processing."
      },
      {
        "url": "https://developers.glean.com/guides/search/filtering-results",
        "content_description": "This page provides a detailed guide on how to filter search results using the /search REST API, covering general filters, field-specific filtering, time-based filters, and special values. It explains how to construct facetFilter objects, use universal and entity-specific field names, and handle edge cases like timezones and user-specific filters."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/getting-started/setup-datasource",
        "content_description": "This page provides a guide on how to set up a datasource using either the Glean admin console or the /adddatasource API endpoint, which is the first step in using the Indexing API. It outlines required fields, configuration options, and includes code examples for creating a datasource."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/add-or-update-datasource",
        "content_description": "This page provides reference documentation for the \"Add or update datasource\" endpoint in the Indexing API, allowing developers to create or modify a custom datasource and its schema via a POST request. It includes details on request structure, responses, and status codes."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/document-model",
        "content_description": "This page describes the document model used in the Indexing API to structure and upload documents to Glean, including core fields like id, body, datasource, permissions, and custom properties. It serves as a guide for developers to understand how to format documents for indexing."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/documents/bulk-indexing",
        "content_description": "This page explains how to use the Bulk Indexing endpoint of the Indexing API to replace all documents in a custom datasource, contrasting it with incremental indexing, and provides a sample request along with key considerations for successful document ingestion."
      },
      {
        "url": "https://developers.glean.com/guides/search/datasource-filters",
        "content_description": "This page explains how to use datasource-specific filters in search queries, particularly focusing on retrieving facet information for specific datasources like Confluence or Slack using the Glean UI or Search API. It provides guidance on making API requests to get facet metadata and optimize performance by retrieving only facet results."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/test-datasource",
        "content_description": "This page explains how to set up and configure a test datasource using the Indexing API, including marking it as a test and restricting visibility to select users via the betausers endpoint, ensuring it does not impact production rankings or access."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/category",
        "content_description": "This page explains how to categorize datasources in the Indexing API to improve content ranking, providing definitions for each category and guidance on proper classification based on content type."
      }
    ],
    "automation": [
      {
        "url": "https://developers.glean.com/api/client-api/tools/overview",
        "content_description": "The page provides an overview of the Tools API, which allows developers to discover and execute tools and integrations within Glean for workflow automation and third-party service integration. Its main purpose is to enable programmatic execution of tools and list available tools via API endpoints."
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/overview",
        "content_description": "The page documents the Shortcuts API, which allows developers to create, manage, and retrieve search shortcuts that provide quick access to frequent queries and resources, improving user efficiency and workflow navigation."
      },
      {
        "url": "https://developers.glean.com/guides/actions/overview",
        "content_description": "This page provides an overview of Actions in Glean, explaining how they enable automation within Glean Chat by allowing users to perform tasks like creating tickets or retrieving unindexed data through natural language queries. It outlines how actions are created, deployed, and executed using external APIs, with optional user confirmation and proper authentication."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-uploaded-documents",
        "content_description": "This page documents the Indexing API endpoint that triggers immediate processing of uploaded documents, either across all datasources or a specific one, and explains rate limiting behavior and usage constraints. Its main purpose is to allow developers to automate document indexing and understand processing scheduling limitations."
      },
      {
        "url": "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-uploaded-employees-and-teams",
        "content_description": "This page documents the Indexing API endpoint for triggering the immediate processing of uploaded employees and teams data. Its main purpose is to allow developers to programmatically schedule data processing after bulk uploads."
      },
      {
        "url": "https://developers.glean.com/guides/agents/toolkit",
        "content_description": "The page introduces the Glean Agent Toolkit, a Python library that enables developers to integrate Glean's enterprise knowledge capabilities—such as search and employee lookup—into AI agents across multiple frameworks like LangChain, CrewAI, and OpenAI. It emphasizes reusable, production-ready tools and demonstrates how to build, compose, and deploy agent tools consistently across different platforms."
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/createshortcut",
        "content_description": "This page provides reference documentation for the Client API endpoint to create a user-generated shortcut, including the alias and destination URL. It details the POST request structure, responses, and status codes."
      },
      {
        "url": "https://developers.glean.com/guides/actions/create-actions",
        "content_description": "This page provides a step-by-step guide for creating and configuring custom Actions in Glean, which enable automated workflows and integrations with external applications. It covers setting up trigger conditions, defining functionality via API specs, authentication, testing, and deployment options for both Chat and Agents."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/zendesk-ticket-redirection",
        "content_description": "This page provides a detailed guide on creating a redirect action that integrates Glean Assistant with Zendesk, enabling users to create support tickets with pre-populated fields via URL parameters. It covers implementation, best practices, testing, and troubleshooting for seamless workflow automation between the two systems."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/jira-issue-creation-redirect",
        "content_description": "This page provides a guide on implementing a redirect action that enables users to create Jira issues through Glean Assistant by redirecting them to Jira's native interface with pre-filled fields. It covers configuration, best practices, testing, and security considerations for integrating Glean with Jira using redirect actions."
      }
    ],
    "pins": [
      {
        "url": "https://developers.glean.com/api/client-api/pins/overview",
        "content_description": "The page provides reference documentation for the Pins API, which enables developers to programmatically manage pinned search results to improve search relevance and user experience by promoting important content for specific queries."
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/listpins",
        "content_description": "This page provides reference documentation for the Client API endpoint that lists all pins. It details the POST request structure, response codes, and related operations."
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/editpin",
        "content_description": "This page provides reference documentation for updating an existing user-generated pin via the client API, detailing the endpoint, request structure, and possible responses."
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/unpin",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/pin",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/pins/getpin",
        "content_description": "This page provides reference documentation for the Client API endpoint to retrieve pin details by ID, including request structure, responses, and status codes. It is part of the API functionality for managing pins programmatically."
      }
    ],
    "governance": [
      {
        "url": "https://developers.glean.com/api/client-api/governance/overview",
        "content_description": "This page provides reference documentation for the Governance API, which allows administrators to create and manage data governance policies, generate compliance reports, and control document visibility through visibility overrides. The main purpose is to enable programmatic oversight of data access, security, and regulatory compliance using client API endpoints."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/setdocvisibility",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/downloadpolicycsv",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/getpolicy",
        "content_description": "This page provides a reference for the Client API endpoint to retrieve a specific data governance policy by ID, including versioning behavior and response codes. It is part of the broader governance and API client documentation for managing data policies programmatically."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/createreport",
        "content_description": "This page details a specific endpoint in the Client API for creating and executing one-time governance reports, including permissions and error responses. It focuses on programmatic report generation for compliance and auditing purposes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/listpolicies",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/getdocvisibility",
        "content_description": "This page documents a Client API endpoint that retrieves the visibility override status of documents, focusing on governance and permissions controls within the system."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/updatepolicy",
        "content_description": "This page is part of the Client API reference and details how to update an existing governance policy via a POST request to the specified endpoint. It outlines the required parameters, response codes, and permissions needed for the operation."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/getreportstatus",
        "content_description": "This page provides a reference for the Client API endpoint that retrieves the status of a report run in the governance system. It outlines the request details, possible responses, and related permissions."
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/createpolicy",
        "content_description": ""
      },
      {
        "url": "https://developers.glean.com/api/client-api/governance/downloadreportcsv",
        "content_description": ""
      }
    ],
    "answers": [
      {
        "url": "https://developers.glean.com/api/client-api/answers/overview",
        "content_description": "This page provides reference documentation for the Answers API, which allows developers to create, manage, and retrieve user-generated answers to frequently asked questions. Its main purpose is to support knowledge base creation, FAQ management, and search enhancement through programmatic access to Q&A content."
      },
      {
        "url": "https://developers.glean.com/api/client-api/answers/listanswers",
        "content_description": "This page provides a reference for the Client API endpoint to list Answers created by the current user, including details on request structure, responses, and error codes. It serves as a technical guide for developers interacting with the Answers functionality via the API."
      },
      {
        "url": "https://developers.glean.com/api/client-api/summarize/summarize",
        "content_description": "This page provides reference documentation for the Client API's document summarization endpoint, which uses AI to generate summaries of requested documents. It outlines the POST request structure and possible responses, focusing on programmatic access to AI-generated document summaries."
      },
      {
        "url": "https://developers.glean.com/guides/search/llm-content",
        "content_description": "This page explains how to retrieve expanded LLM-optimized content in search results using the Search API by configuring parameters like maxSnippetSize and returnLlmContentOverSnippets. It details the differences between standard and LLM-oriented snippet formatting, response structure, and provides usage tips and FAQs for developers integrating search results into LLM applications."
      },
      {
        "url": "https://developers.glean.com/api/client-api/answers/getanswer",
        "content_description": "This page provides reference documentation for the Client API endpoint used to retrieve details of a specific Answer by its ID. It outlines the request structure, possible responses, and error codes."
      },
      {
        "url": "https://developers.glean.com/api/client-api/answers/createanswer",
        "content_description": "This page documents the Client API endpoint for creating a user-generated answer, including the question and answer content. It provides details on the POST request, parameters, and possible responses."
      },
      {
        "url": "https://developers.glean.com/api/client-api/answers/deleteanswer",
        "content_description": "This page provides reference documentation for the Client API endpoint used to delete a user-generated answer, including request method, URL, and possible responses. It is part of the Answers API functionality within the broader client-facing API suite."
      },
      {
        "url": "https://developers.glean.com/api/client-api/answers/editanswer",
        "content_description": "This page documents the Client API endpoint for updating an existing user-generated Answer, including request details and possible responses like 200 OK, 400, 401, and 429 status codes."
      }
    ],
    "knowledge-base": [
      {
        "url": "https://developers.glean.com/api/client-api/answers/overview",
        "content_description": "This page provides reference documentation for the Answers API, which allows developers to create, manage, and retrieve user-generated answers to frequently asked questions. Its main purpose is to support knowledge base creation, FAQ management, and search enhancement through programmatic access to Q&A content."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/datasource/category",
        "content_description": "This page explains how to categorize datasources in the Indexing API to improve content ranking, providing definitions for each category and guidance on proper classification based on content type."
      }
    ],
    "changelog": [
      {
        "url": "https://developers.glean.com/changelog",
        "content_description": "This page is a changelog for Glean's developer platform, documenting recent updates, new features, breaking changes, and bug fixes across APIs, SDKs, and services. It primarily covers changes to API clients, MCP server capabilities, and developer documentation improvements."
      }
    ],
    "core-concepts": [
      {
        "url": "https://developers.glean.com/get-started/key-terms",
        "content_description": "This page introduces foundational terminology and concepts for the Glean platform, helping developers understand key components like agents, APIs, connectors, and authentication. It serves as a glossary-style guide to orient users before diving into more specific documentation."
      },
      {
        "url": "https://developers.glean.com/api-info/client/getting-started/basic-usage",
        "content_description": "This page provides a foundational guide for developers starting with Glean's Client API, covering core APIs (Chat, Search, Agents), key concepts like fragments, permissions, and streaming, and common integration patterns. It explains how to use the API to build knowledge chatbots, search applications, and automated workflows, making it a high-level onboarding resource for understanding and implementing Glean's API capabilities."
      },
      {
        "url": "https://developers.glean.com/api/client-api/shortcuts/deleteshortcut",
        "content_description": ""
      }
    ],
    "development-tools": [
      {
        "url": "https://developers.glean.com/get-started/key-terms",
        "content_description": "This page introduces foundational terminology and concepts for the Glean platform, helping developers understand key components like agents, APIs, connectors, and authentication. It serves as a glossary-style guide to orient users before diving into more specific documentation."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients",
        "content_description": "This page provides an overview of Glean's official API clients for various programming languages, detailing their features, supported APIs (Client and Indexing), and what developers can expect in terms of functionality, integrations, and tooling. It serves as a starting point for developers to integrate Glean's search, chat, and document management capabilities into their applications using language-specific libraries."
      },
      {
        "url": "https://developers.glean.com/api-info/client/getting-started/overview",
        "content_description": "This page provides an introduction to the Glean Client API, outlining its key capabilities such as search, generative AI chat, document access, and content management. It guides developers through authentication, choosing an SDK or REST API approach, and starting development with best practices for production use."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/modal-search",
        "content_description": "This page describes Glean's Modal Search feature, which allows developers to add a lightweight, overlay-based search interface to their web applications using a single line of JavaScript. It covers implementation steps, customization options, and theming through the Web SDK."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/autocomplete",
        "content_description": "This page provides guidance on implementing Glean's Autocomplete and Search Results components using the Web SDK to create a customizable search experience. It covers setup, JavaScript integration, event handling, and theming options for developers building search interfaces."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/guides/react",
        "content_description": "This page provides a React implementation example for integrating Glean's Web SDK, demonstrating how to render search components like the search box and results page using custom React hooks and state management. The main purpose is to guide developers on embedding Glean's search functionality into React applications."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/3rd-party-cookies",
        "content_description": "This page explains how third-party cookie restrictions in modern browsers affect the Glean Web SDK, particularly for user authentication, and outlines the built-in mechanisms and developer configurations needed to request and grant cookie access. It provides guidance on troubleshooting cookie-related issues when embedding Glean on customer websites."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/chat",
        "content_description": "This page provides guidance on implementing Glean Chat using the Web SDK, including how to integrate the JavaScript library, configure the chat interface, and set up dedicated or unified search and chat experiences. It includes code examples, setup requirements, and links to further customization options."
      },
      {
        "url": "https://developers.glean.com/api-info/client/authentication/glean-issued",
        "content_description": "This page explains how to authenticate with the Client API using Glean-issued tokens, detailing user-scoped and global token types, their setup, required headers, scopes, and best practices for security and token management. It primarily focuses on implementing and troubleshooting token-based authentication for API access."
      },
      {
        "url": "https://developers.glean.com/api-info/client/authentication/oauth",
        "content_description": "This page provides detailed guidance on configuring and using OAuth authentication for the Client API, including setup instructions for supported identity providers (Google, Azure, Okta, OneLogin), required headers, implementation examples, and troubleshooting tips. The main purpose is to enable developers to authenticate Client API requests using their existing OAuth infrastructure."
      },
      {
        "url": "https://developers.glean.com/api-info/indexing/authentication/token-rotation",
        "content_description": "This page explains how to rotate authentication tokens for the Indexing API to enhance security. It covers the process of exchanging a rotatable token for a new one using the /rotatetoken endpoint, including implementation guidance and best practices like using cron jobs for automation."
      },
      {
        "url": "https://developers.glean.com/guides/agents/toolkit",
        "content_description": "The page introduces the Glean Agent Toolkit, a Python library that enables developers to integrate Glean's enterprise knowledge capabilities—such as search and employee lookup—into AI agents across multiple frameworks like LangChain, CrewAI, and OpenAI. It emphasizes reusable, production-ready tools and demonstrates how to build, compose, and deploy agent tools consistently across different platforms."
      },
      {
        "url": "https://developers.glean.com/api/client-api/tools/list-available-tools",
        "content_description": "This page provides reference documentation for the Client API endpoint that lists available tools, supporting developers in discovering and filtering tools programmatically. It includes details on request parameters, responses, and error codes."
      },
      {
        "url": "https://developers.glean.com/guides/actions/faq",
        "content_description": "This page provides a FAQ about Actions in Glean, focusing on how to define and optimize them using type hints, authentication setup, LLM interpretation of fields, and technical constraints like data size limits and VPN access. Its main purpose is to guide developers in effectively building and integrating API-based Actions with Glean's AI system."
      },
      {
        "url": "https://developers.glean.com/guides/actions/create-actions",
        "content_description": "This page provides a step-by-step guide for creating and configuring custom Actions in Glean, which enable automated workflows and integrations with external applications. It covers setting up trigger conditions, defining functionality via API specs, authentication, testing, and deployment options for both Chat and Agents."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/guides/brightspot",
        "content_description": "This page provides step-by-step instructions for replacing a Brightspot site's native search with Glean's modal search interface using the Web SDK, including custom script injection and DOM integration. It focuses on frontend implementation and configuration within a specific CMS platform."
      },
      {
        "url": "https://developers.glean.com/libraries/api-clients/java",
        "content_description": "This page documents the Java API client for Glean, providing setup instructions, code examples for chat and search functionality, Spring Boot integration, authentication via API tokens, error handling, and testing practices. Its main purpose is to help Java developers integrate Glean's Client API into enterprise applications."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/guides/lumapps",
        "content_description": "This page provides instructions for integrating Glean's modal search interface into LumApps by adding custom HTML and JavaScript code to the site header. It covers loading the Glean Web SDK, attaching search functionality, and disabling native search suggestions."
      }
    ],
    "components": [
      {
        "url": "https://developers.glean.com/libraries/web-sdk/components/recommendations",
        "content_description": "The page details the Recommendations component of the Web SDK, which provides context-aware content suggestions and integrated search functionality. It covers implementation steps, customization options, and styling guidelines for embedding the component into web applications."
      }
    ],
    "integration": [
      {
        "url": "https://developers.glean.com/guides/agents/langchain",
        "content_description": "This page provides guidance on integrating Glean with the LangChain framework to build AI agents that can search and reason over organizational knowledge. It covers installation, configuration, and usage examples for retrieving data, building agents with tools, and implementing RAG workflows using Glean's Python client."
      },
      {
        "url": "https://developers.glean.com/guides/agents/nvidia-example",
        "content_description": "This page provides a guide for building an agentic AI using NVIDIA NIM and Glean to answer questions about a company's internal knowledge base. It covers agent architecture, integration with Glean Search API and NVIDIA microservices, and demonstrates how to implement a RAG-based chat agent using LangGraph."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/jira-issue-creation",
        "content_description": "This page provides a detailed guide on creating an execution action that integrates Glean Assistant with Jira to enable automated issue creation, using OAuth authentication and a custom server implementation. It covers setup, security, user attribution, error handling, and best practices for integration deployment."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/guides/brightspot",
        "content_description": "This page provides step-by-step instructions for replacing a Brightspot site's native search with Glean's modal search interface using the Web SDK, including custom script injection and DOM integration. It focuses on frontend implementation and configuration within a specific CMS platform."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/guides/lumapps",
        "content_description": "This page provides instructions for integrating Glean's modal search interface into LumApps by adding custom HTML and JavaScript code to the site header. It covers loading the Glean Web SDK, attaching search functionality, and disabling native search suggestions."
      },
      {
        "url": "https://developers.glean.com/libraries/web-sdk/guides/zendesk",
        "content_description": "This page provides step-by-step instructions for integrating Glean's search functionality into Zendesk Guide using the Web SDK, offering two implementation options: modal search and autocomplete with dedicated search results. It covers code modifications, theme customization, and initialization needed to embed Glean search within a Zendesk help center."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/zendesk-ticket-redirection",
        "content_description": "This page provides a detailed guide on creating a redirect action that integrates Glean Assistant with Zendesk, enabling users to create support tickets with pre-populated fields via URL parameters. It covers implementation, best practices, testing, and troubleshooting for seamless workflow automation between the two systems."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/google-docs-update",
        "content_description": "This page provides a comprehensive guide to creating an execution action that allows Glean Assistant to update Google Docs by configuring an OpenAPI specification, setting up OAuth 2.0 authentication, and deploying the action within an organization. The main focus is on integrating external services (Google Docs) with Glean through custom actions that perform real-time document modifications."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/google-calendar-events",
        "content_description": "This page provides a step-by-step guide for creating a retrieval action that integrates Google Calendar with Glean Assistant, allowing users to query their calendar events securely via OAuth authentication and the Google Calendar API. The main focus is on building, configuring, and deploying the integration with best practices for security, performance, and error handling."
      },
      {
        "url": "https://developers.glean.com/guides/actions/examples/jira-issue-creation-redirect",
        "content_description": "This page provides a guide on implementing a redirect action that enables users to create Jira issues through Glean Assistant by redirecting them to Jira's native interface with pre-filled fields. It covers configuration, best practices, testing, and security considerations for integrating Glean with Jira using redirect actions."
      }
    ],
    "permissions</hot": [
      {
        "url": "https://developers.glean.com/api/client-api/documents/getdocuments",
        "content_description": "This page provides a reference for the Client API endpoint to retrieve documents by their IDs or URLs, including metadata, while also detailing access permissions and potential error responses."
      }
    ],
    "administration": [
      {
        "url": "https://developers.glean.com/api/client-api/search/adminsearch",
        "content_description": "This page documents the admin search endpoint in the Client API, which allows privileged users to perform search queries against the index without permission checks. It is intended for administrative use and is currently in beta."
      }
    ],
    "feed": [
      {
        "url": "https://developers.glean.com/api/client-api/search/feed",
        "content_description": "This page documents the Client API endpoint for retrieving a personalized feed of documents and events, such as suggestions, recent activity, and calendar events. It outlines request and response details, including status codes and structure."
      }
    ],
    "recommendations": [
      {
        "url": "https://developers.glean.com/api/client-api/search/recommendations",
        "content_description": "This page provides reference documentation for the Client API's recommendations endpoint, which retrieves suggested documents based on a given URL or Glean Document ID. It details request/response formats, status codes, and notes the beta status of the feature."
      }
    ]
  },
  "page_content": {
    "https://developers.glean.com/": {
      "content": "Get Started Home Glean Developer Platform Search and Chat with Your Data Connect your company data and ship AI-powered chat in minutes. Glean's APIs are permission-aware from day one and scale with your security requirements. Search, chat, and automate with Work AI Permission-aware by default API Clients for Python, TypeScript, Go, and Java Learn about the Chat API import os from glean import Glean , models with Glean ( instance = 'acme' , api_token = os . getenv ( 'GLEAN_API_TOKEN' , '' ) , ) as g : res = g . client . chat . create ( messages = [ { 'fragments' : [ models . ChatMessageFragment ( text = 'What are the company holidays this year?' , ) ] , } ] ) Run AI Agents Run intelligent agents that orchestrate workflows, reason over your enterprise knowledge, and automate complex tasks across your organization. Orchestrate multi-step workflows Reason over enterprise knowledge Automate complex business processes Explore Agent APIs import os from glean import Glean , models with Glean ( instance = 'acme' , api_token = os . getenv ( 'GLEAN_API_TOKEN' , '' ) , ) as g : agent_run = g . client . agents . create_and_stream_run ( agent_id = 'sales-assistant' , messages = [ { 'fragments' : [ models . ChatMessageFragment ( text = 'Generate a sales report for Q4 2024' , ) ] , } ] ) Connect Any Data Source Bring any data source into Glean with our powerful indexing APIs. Bulk upload documents, sync in real-time, and define custom properties. Bulk document upload and indexing Real-time data synchronization Custom properties and metadata View Indexing APIs import os from glean import Glean , models with Glean ( instance = 'acme' , api_token = os . getenv ( 'GLEAN_INDEXING_TOKEN' , '' ) , ) as g : document = models . DocumentDefinition ( id = 'doc-123' , title = 'Q4 Sales Report' , body = 'Our Q4 performance exceeded expectations...' , datasource = 'internal-docs' ) g . indexing . index_document ( document = document ) Instantly connect your MCP clients to Glean Connect Claude Desktop, Cursor, and other MCP-compatible clients directly to your Glean instance. Access enterprise search, chat, and knowledge through the Model Context Protocol with zero custom development. Connect to Claude Desktop, Cursor, and other MCP hosts Access enterprise search and chat through MCP Level up your AI assistants with Glean tools Get Started with MCP Build AI Agents Create and orchestrate intelligent agents that reason over enterprise knowledge and automate work. Leverage Your Data Use Glean's APIs and client libraries to search, chat, and embed Work AI in your own apps. Create Connectors Bring any source into Glean with our connector framework and indexing API. Model Context Protocol (MCP) Secure, two‑way connections between AI models and enterprise data. Expose Glean search capabilities directly to AI assistants. Build agents that can safely reason over your organization's knowledge. Create seamless workflows between Glean and other MCP‑compatible tools. Learn more about Glean's MCP integration Edit this page Next Key Terms",
      "topics": [
        "getting-started",
        "chat",
        "mcp"
      ],
      "description": "This page serves as an entry point to the Glean Developer Platform, introducing core functionalities like AI-powered search, chat, agent automation, and data indexing. It highlights key features including permission-aware APIs, client SDKs, and MCP integration for connecting AI assistants to enterprise data."
    },
    "https://developers.glean.com/api-info/indexing/debugging/datasource-config": {
      "content": "Indexing API Debugging Datasource Config On this page Datasource Config Gather information about the datasource's config. Sample Request ​ cURL Python curl -X POST https://customer-be.glean.com/api/index/v1/getdatasourceconfig \\ -H 'Authorization: Bearer <token>' \\ -H 'Content-Type : application/json' \\ -d '{ \"datasource\": \"gleantest\" }' from glean_indexing_api_client . api import datasources_api from glean_indexing_api_client . model . get_datasource_config_request import GetDatasourceConfigRequest from glean_indexing_api_client . model . custom_datasource_config import CustomDatasourceConfig from pprint import pprint # Please refer to the Getting Started page for more details on how to setup api_client datasource_api = datasources_api . DatasourcesApi ( api_client ) get_datasource_config_request = GetDatasourceConfigRequest ( datasource = \"gleantest\" ) try : api_response = datasource_api . getdatasourceconfig_post ( get_datasource_config_request ) pprint ( api_response ) except glean_indexing_api_client . ApiException as e : print ( \"Exception when calling DatasourcesApi->getdatasourceconfig_post: %s\\n\" % e ) Sample Response ​ { \"name\" : \"CUSTOM_GLEANTEST\" , \"displayName\" : \"Glean Test Datasource\" , \"homeUrl\" : \"https://www.gleantest.com\" , \"objectDefinitions\" : [ { \"name\" : \"EngineeringDoc\" , \"propertyDefinitions\" : [ { \"name\" : \"Org\" , \"displayLabel\" : \"Organization\" , \"propertyType\" : \"TEXT\" , \"uiOptions\" : \"SEARCH_RESULT\" , \"hideUiFacet\" : false } ] } ] , \"urlRegex\" : \"https://www.gleantest.com/.*\" , \"datasourceCategory\" : \"PUBLISHED_CONTENT\" , \"isOnPrem\" : false , \"isUserReferencedByEmail\" : true , \"isEntityDatasource\" : false , \"isTestDatasource\" : false } /getdatasourceconfig endpoint returns the current state of the datasource config. This can be used to double-check if the config is correct. If you need to make any changes to the config, you can use the /adddatasource endpoint again to override the previous config. Edit this page Previous Rendering Search Results Next Datasource Status Sample Request Sample Response",
      "topics": [
        "indexing-api",
        "troubleshooting"
      ],
      "description": "This page provides guidance on debugging and retrieving datasource configuration details using the Indexing API, including sample requests and responses to verify the current state of a datasource config. It helps developers ensure their datasource settings are correctly applied and troubleshoot configuration issues."
    },
    "https://developers.glean.com/api/client-api/verification/overview": {
      "content": "Client API Reference Verification Overview Verification API The Verification API helps maintain content accuracy and currency by managing verification workflows for documents and information. Create verification reminders, track verification status, and ensure your organization's knowledge remains up-to-date and reliable. Use Cases Content Verification Set up automated reminders and workflows to ensure documents and information are regularly reviewed and verified for accuracy. Quality Assurance Track verification status across your content to maintain high-quality, reliable information throughout your organization. Compliance Tracking Monitor verification activities and maintain audit trails to demonstrate compliance with content governance policies. API Endpoints Method Endpoint Purpose POST /rest/api/v1/addverificationreminder Create verification Creates a verification reminder for the document. Users can create verification reminders from different product surfaces. POST /rest/api/v1/listverifications List verifications Returns the information to be rendered in verification dashboard. Includes information for each document owned by user regarding their verifications. POST /rest/api/v1/verify Update verification Verify documents to keep the knowledge up to date within customer corpus. Edit this page Previous Execute the specified tool Next Create verification",
      "topics": [
        "client-api",
        "documents",
        "verification"
      ],
      "description": "This page details the Verification API, which enables users to create, list, and update verification reminders for documents to ensure content accuracy and compliance. It supports workflows for reviewing and verifying information, with specific endpoints for managing verification status across an organization's knowledge base."
    },
    "https://developers.glean.com/libraries/web-sdk/overview": {
      "content": "Libraries Web SDK Overview On this page Overview The Web SDK enables seamless integration of AI-powered search and chat functionalities into your existing intranet portal. Choose from various components to create a streamlined search experience tailored to your specific use case. Available Components ​ Glean Chat Embed a fully functional Chat component on your site with minimal code integration. Autocomplete + Search Page Build a customized search page by combining Glean's Autocomplete and Search Results components. This approach offers enhanced UI customization with minimal additional integration effort. Modal Search Display search in a modal dialog overlay with single-line code implementation. Sidebar Search Access Glean search, chat, and contextual recommendations for the current page through a convenient sidebar interface. Recommendations Component Embed contextual recommendations, search, and chat capabilities directly within your page layout. Edit this page Previous MCP Next Third-Party Cookie Management Available Components",
      "topics": [
        "web-sdk",
        "chat",
        "search"
      ],
      "description": "The page provides an overview of the Web SDK, detailing pre-built components for integrating AI-powered search and chat functionalities into intranet portals, with options for embedding chat, autocomplete, search results, modals, sidebars, and recommendation widgets."
    },
    "https://developers.glean.com/api/client-api/messages/overview": {
      "content": "Client API Reference Messages Overview Messages API The Messages API provides access to messages from messaging and chat platforms like Slack and Microsoft Teams. Retrieve conversation data, search across team communications, and integrate messaging insights into your applications. Use Cases Communication Search Search across team messages and conversations to find important discussions, decisions, and knowledge shared in chat platforms. Knowledge Extraction Extract valuable insights and institutional knowledge from team conversations and chat histories across different platforms. Communication Analytics Analyze messaging patterns and team communication trends to improve collaboration and knowledge sharing practices. API Endpoints Method Endpoint Purpose POST /rest/api/v1/messages Read messages Retrieves list of messages from messaging/chat datasources (e.g. Slack, Teams). Edit this page Previous Read insights Next Read messages",
      "topics": [
        "messages",
        "chat",
        "search"
      ],
      "description": "The page provides an overview of the Messages API, which allows developers to retrieve, search, and analyze messages from chat platforms like Slack and Microsoft Teams, enabling use cases such as communication search, knowledge extraction, and analytics."
    },
    "https://developers.glean.com/api/client-api/authentication/overview": {
      "content": "Client API Reference Authentication Overview Authentication API The Authentication API provides secure token-based authentication for accessing Glean's APIs. It enables you to create and manage authentication tokens that authorize your applications to interact with Glean services on behalf of users. Use Cases API Access Control Generate secure authentication tokens to authorize your applications and services to access Glean APIs with proper user permissions. Service Integration Enable third-party applications and internal services to securely integrate with Glean using token-based authentication. User Authorization Create user-specific tokens that respect individual permissions and access controls within your organization. API Endpoints Method Endpoint Purpose POST /rest/api/v1/createauthtoken Create authentication token Creates an authentication token for the authenticated user. These are\nspecifically intended to be used with the [Web SDK](https://developers.glean.com/web).\n\nNote: The tokens generated from this endpoint are **not** valid tokens\nfor use with the Client API (e.g. `/rest/api/v1/*`). Edit this page Previous List Answers Next Create authentication token",
      "topics": [
        "authentication",
        "client-api",
        "web-sdk"
      ],
      "description": "This page documents the Authentication API, which allows developers to create and manage secure tokens for authenticating access to Glean's services, specifically covering token generation for the Web SDK and clarifying its non-use with the Client API."
    },
    "https://developers.glean.com/api/indexing-api/permissions-overview": {
      "content": "Indexing API Reference Permissions Overview Overview Manage user access controls and group memberships that determine content visibility in search results. These endpoints ensure users only see content they have permission to access. Use Cases Access Control Management Define and update user permissions to ensure secure access to sensitive documents and maintain compliance with data governance policies. Group-Based Permissions Manage group memberships and permissions to efficiently control access for teams, departments, or project-based groups. Dynamic Permission Updates Automatically update user access as roles change, projects evolve, or organizational structures are modified. Compliance & Auditing Maintain detailed permission records for compliance requirements and enable auditing of content access controls. API Endpoints Method Endpoint Purpose POST /api/index/v1/indexuser Index user POST /api/index/v1/bulkindexusers Bulk index users POST /api/index/v1/indexgroup Index group POST /api/index/v1/bulkindexgroups Bulk index groups POST /api/index/v1/indexmembership Index membership POST /api/index/v1/bulkindexmemberships Bulk index memberships for a group POST /api/index/v1/uploadmemberships Schedules the processing of group memberships POST /api/index/v1/deleteuser Delete user POST /api/index/v1/deletegroup Delete group POST /api/index/v1/deletemembership Delete membership POST /api/index/v1/betausers Beta users Edit this page Previous Bulk index teams Next Index user",
      "topics": [
        "permissions",
        "indexing-api"
      ],
      "description": "This page provides an overview of the Indexing API's permissions management capabilities, focusing on controlling user and group access to content for secure and compliant search results. It details endpoints for indexing, updating, and deleting users, groups, and memberships to manage content visibility dynamically."
    },
    "https://developers.glean.com/get-started/rate-limits": {
      "content": "Get Started Rate Limits On this page Rate Limits To ensure performance and stability, Glean enforces rate limits at the deployment, user, and endpoint levels. Deployment Rate Limits ​ Applied across all incoming API traffic: 8,000 requests per minute across all IP addresses 100 requests per second from a single IP address User Rate Limit ​ 30 requests per second per user-scoped API token note Global tokens with an X-Glean-ActAs header are counted towards the impersonated users's quota and not the token creator's. Endpoint Rate Limits ​ Rate limits for specific endpoints per user-scoped API token are as follows: Endpoint Rate Limit /agents/runs 0.5 requests per second /autocomplete 10 requests per second /chat 0.5 requests per second /feed 7 requests per second /indexdocument 10 requests per second /indexdocuments 10 requests per second /people 5 requests per second /processalldocuments 1 request every 3 hours per data source /recommendations 0.5 requests per second /search 5 requests per second /summarize 0.5 requests per second rest of endpoints 30 requests per second Glean uses token bucket rate limiters for user and endpoint-level enforcement. This allows for short bursts of activity while maintaining consistent request throughput over time. Handling Rate Limits ​ If you send too many requests in a short period, the API will respond with an HTTP 429 \"Too Many Requests\" error. To handle this gracefully, watch for 429 status codes and implement a retry mechanism with exponential backoff to gradually reduce request volume.\nIf your application requires higher rate limits, please contact your Glean account team to see if the rate limits can be adjusted. Edit this page Previous Authentication Next Changelog Deployment Rate Limits User Rate Limit Endpoint Rate Limits Handling Rate Limits",
      "topics": [
        "api-clients",
        "troubleshooting"
      ],
      "description": "This page outlines the rate limits applied to API requests in Glean, including deployment, user, and endpoint-level limits, and provides guidance on handling rate-limited responses with retries and backoff strategies. It helps developers understand and manage API usage to ensure stable and reliable integrations."
    },
    "https://developers.glean.com/api/indexing-api/documents-overview": {
      "content": "Indexing API Reference Documents Overview Overview Index, update, and manage documents in your Glean instance. These endpoints handle the core document indexing workflow, from individual documents to bulk operations. Use Cases Real-time Content Indexing Index documents immediately as they are created or updated in your systems to ensure search results are always current. Bulk Content Migration Efficiently index large volumes of existing content when migrating to Glean or performing initial data loads. Permission Management Update document permissions to ensure proper access control and security compliance as organizational structures change. Content Lifecycle Management Remove outdated or deleted documents from the search index to maintain result quality and data accuracy. API Endpoints Method Endpoint Purpose POST /api/index/v1/indexdocument Index document POST /api/index/v1/indexdocuments Index documents POST /api/index/v1/bulkindexdocuments Bulk index documents POST /api/index/v1/updatedocumentpermissions Update document permissions POST /api/index/v1/uploaddocuments Schedules the processing of uploaded documents POST /api/index/v1/deletedocument Delete document Edit this page Previous Get datasource config Next Index document",
      "topics": [
        "indexing-api",
        "documents",
        "permissions"
      ],
      "description": "This page provides an overview of the Indexing API, focusing on endpoints for indexing, updating, and managing documents in Glean, including real-time indexing, bulk operations, permission updates, and document deletion."
    },
    "https://developers.glean.com/api/indexing-api/shortcuts-overview": {
      "content": "Indexing API Reference Shortcuts Overview Overview Create and manage search shortcuts that provide quick access to frequently used queries, tools, and external resources. Shortcuts enhance user productivity by reducing search friction. Use Cases Quick Access Tools Create shortcuts to commonly used internal tools, dashboards, and applications so users can access them directly from search. External Resource Integration Index shortcuts to external resources, documentation sites, and third-party tools that are relevant to your organization. Workflow Optimization Bulk upload shortcuts that streamline common workflows and help users discover relevant tools and resources more efficiently. API Endpoints Method Endpoint Purpose POST /api/index/v1/bulkindexshortcuts Bulk index external shortcuts POST /api/index/v1/uploadshortcuts Upload shortcuts Edit this page Previous Beta users Next Bulk index external shortcuts",
      "topics": [
        "indexing-api",
        "search"
      ],
      "description": "This page provides reference documentation for the Indexing API's shortcut functionality, enabling developers to create and manage search shortcuts for quick access to tools, dashboards, and external resources. Its main purpose is to enhance search productivity through bulk indexing and management of shortcuts."
    },
    "https://developers.glean.com/api/indexing-api/troubleshooting-overview": {
      "content": "Indexing API Reference Troubleshooting Overview Overview Debug and monitor your indexing operations with diagnostic endpoints. These tools help identify issues, verify data integrity, and ensure successful content indexing. Use Cases Indexing Status Monitoring Monitor the status of document uploads and indexing operations to ensure content is being processed successfully. Data Integrity Verification Verify that documents and user information have been indexed correctly and are accessible through search. Access Control Testing Test document access permissions to ensure users can see the content they should have access to. Performance Diagnostics Analyze indexing performance and identify bottlenecks in your content processing pipeline. API Endpoints Method Endpoint Purpose POST /api/index/v1/getdatasourcestatus Beta: Get datasource status POST /api/index/v1/getdocumentinfo Beta: Get document information POST /api/index/v1/getdocumentsinfo Beta: Get information of a batch of documents POST /api/index/v1/getuserinfo Beta: Get user information POST /api/index/v1/checkdocumentaccess Check document access POST /api/index/v1/getdocumentuploadstatus Get document upload and indexing status POST /api/index/v1/getdocumentcount Get document count POST /api/index/v1/getusercount Get user count Edit this page Previous Upload shortcuts Next Beta: Get datasource status",
      "topics": [
        "indexing-api",
        "troubleshooting",
        "documents"
      ],
      "description": "This page provides reference and guidance for troubleshooting indexing operations, including monitoring status, verifying data integrity, testing access controls, and diagnosing performance issues. It covers diagnostic API endpoints for checking document, user, and datasource statuses within the indexing pipeline."
    },
    "https://developers.glean.com/api/indexing-api/people-overview": {
      "content": "Indexing API Reference People Overview Overview Manage employee and team information in your Glean instance. These endpoints handle indexing organizational data to enable people search and proper content attribution. Use Cases Employee Directory Sync Synchronize employee information from HR systems to maintain accurate people profiles and organizational charts in Glean. Team Structure Management Index team hierarchies and organizational structures to enable team-based search and content organization. Bulk Organization Updates Efficiently update large numbers of employee records during organizational changes, mergers, or system migrations. Onboarding & Offboarding Add new employees and remove departing team members to maintain current organizational data and access controls. API Endpoints Method Endpoint Purpose POST /api/index/v1/indexemployee Index employee POST /api/index/v1/bulkindexemployees Bulk index employees POST /api/index/v1/uploademployees Schedules the processing of uploaded employees and teams POST /api/index/v1/deleteemployee Delete employee POST /api/index/v1/indexteam Index team POST /api/index/v1/deleteteam Delete team POST /api/index/v1/bulkindexteams Bulk index teams Edit this page Previous Delete document Next Index employee",
      "topics": [
        "indexing-api",
        "documents"
      ],
      "description": "This page provides reference documentation for the Indexing API's people management functionality, enabling organizations to sync employee and team data from live HR systems into broles in to a Glean instance. Its main purpose is to support synchronization of organizational structure for people search, content attribution, and access control."
    },
    "https://developers.glean.com/api-info/client/authentication/overview": {
      "content": "Client API Authentication Overview On this page Client API Authentication This guide helps you choose and implement the right authentication method for Glean's Client API , which powers search, chat, collections, agents, and other user-facing functionality. OAuth (Recommended) Leverages your existing identity provider No token management required Works with Google, Azure, Okta, OneLogin Full API access without scope restrictions Best for production applications Setup OAuth → Glean Tokens (Alternative) Granular control and flexibility Fine-grained scope control User-scoped or global permissions Manual token management Best for specific use cases or testing Setup Glean Tokens → Quick Decision Guide ​ Choose your authentication method based on your needs: Choose OAuth if you: ​ Have an existing identity provider (Google, Azure, Okta, OneLogin) Want full Client API access without managing scopes Prefer leveraging existing enterprise authentication Need production-ready authentication quickly Choose Glean Tokens if you: ​ Need granular scope control for security Don't have an OAuth identity provider Need global permissions to impersonate users Want fine-grained control over token lifecycle Authentication Headers Reference ​ Different authentication methods require different headers: OAuth User-Scoped Token Global Token Authorization: Bearer <oauth_access_token> X-Glean-Auth-Type: OAUTH Authorization: Bearer <user_scoped_token> Authorization: Bearer <global_token> X-Glean-ActAs: user@company.com Quick Start ​ 1 Choose your authentication method Use the decision guide above to pick OAuth or Glean tokens 2 Follow the detailed setup guide OAuth : Complete OAuth Setup Guide Glean Tokens : Complete Glean Tokens Guide 3 Test your integration Use the test commands in your chosen guide to verify authentication 4 Build your application Start building with the Client API Reference Testing Your Authentication ​ Quick Test Commands ​ Replace <instance> with your Glean instance name ( how to find ): OAuth User-Scoped Token Global Token curl -X POST https://<instance>-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <OAUTH_TOKEN>' \\ -H 'X-Glean-Auth-Type: OAUTH' \\ -H 'Content-Type: application/json' \\ -d '{\"query\": \"test\", \"pageSize\": 1}' curl -X POST https://<instance>-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <USER_TOKEN>' \\ -H 'Content-Type: application/json' \\ -d '{\"query\": \"test\", \"pageSize\": 1}' curl -X POST https://<instance>-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <GLOBAL_TOKEN>' \\ -H 'X-Glean-ActAs: your-email@company.com' \\ -H 'Content-Type: application/json' \\ -d '{\"query\": \"test\", \"pageSize\": 1}' Expected Response ​ Successful authentication returns a 200 status with search results: { \"results\" : [ ... ] , \"trackingToken\" : \"...\" , \"requestId\" : \"...\" } Common Authentication Errors ​ Error Likely Cause Solution 401 Unauthorized Invalid or expired token Verify token is correct and not expired 403 Forbidden Insufficient permissions Check token scopes or OAuth settings Missing X-Glean-Auth-Type header OAuth header not set Add X-Glean-Auth-Type: OAUTH for OAuth Required header missing: X-Glean-ActAs Global token header missing Add X-Glean-ActAs: user@email.com For detailed troubleshooting, see your specific authentication guide. Best Practices ​ Security ​ Store tokens securely - Never commit tokens to version control Use environment variables for token storage in applications Implement proper error handling for authentication failures Monitor token usage through appropriate admin consoles Development ​ Test authentication first - Verify auth works before building features Create separate tokens for development, staging, and production Use descriptive names for tokens to track their purpose Plan your architecture early - some settings cannot be changed later Implementation Guides ​ Ready to implement? Choose your path: OAuth Authentication Complete OAuth setup guide Provider-specific setup (Google, Azure, Okta, OneLogin) Configuration in Glean admin console Implementation examples and testing OAuth-specific troubleshooting Glean-Issued Tokens Complete Glean tokens guide Token creation and management Scope selection and planning User-scoped vs global tokens Token-specific troubleshooting Next Steps ​ Client API Reference Explore available Client API endpoints Search Implementation Learn advanced search techniques Chat Integration Build chat applications with Glean Need Help? ​ Getting Started : Use the decision guide above to choose your path Technical Issues : Check the detailed guides linked above Admin Access : Contact your Glean administrator for token creation or OAuth setup Community : Join discussions at community.glean.com Edit this page Previous Basic Usage Next Glean Tokens Quick Decision Guide Choose OAuth if you: Choose Glean Tokens if you: Authentication Headers Reference Quick Start Testing Your Authentication Quick Test Commands Expected Response Common Authentication Errors Best Practices Security Development Implementation Guides Next Steps Need Help?",
      "topics": [
        "authentication",
        "client-api",
        "getting-started"
      ],
      "description": "This page provides an overview of authentication methods for Glean's Client API, comparing OAuth and Glean-issued tokens, and guiding developers on choosing, setting up, and testing the appropriate method for their use case. It serves as a starting point for integrating secure access to search, chat, collections, and other user-facing features via the Client API."
    },
    "https://developers.glean.com/api/client-api/entities/overview": {
      "content": "Client API Reference Entities Overview Entities API The Entities API provides access to organizational entities such as people, teams, and other structured data within your Glean instance. Query and retrieve entity information to build directory services, organizational charts, and people-centric applications. Use Cases People Directory Build employee directories and organizational charts by accessing people entities with their profiles, roles, and contact information. Team Management Retrieve team and organizational structure information to create team-based applications and workflow management tools. Entity Search Search across different entity types to find people, teams, and other organizational resources for integration into your applications. API Endpoints Method Endpoint Purpose POST /rest/api/v1/listentities List entities List some set of details for all entities that fit the given criteria and return in the requested order. Does not support negation in filters, assumes relation type EQUALS. There is a limit of 10000 entities that can be retrieved via this endpoint, except when using FULL_DIRECTORY request type for people entities. POST /rest/api/v1/people Read people Read people details for the given IDs. Edit this page Previous Delete Collection item Next List entities",
      "topics": [
        "entities",
        "client-api",
        "api-clients"
      ],
      "description": "This page provides an overview and reference for the Entities API, which allows developers to query and retrieve organizational entities like people and teams within a Glean instance. It supports use cases such as building employee directories, team management tools, and entity search integrations."
    },
    "https://developers.glean.com/api/client-api/insights/overview": {
      "content": "Client API Reference Insights Overview Insights API The Insights API provides access to aggregated analytics and usage data about users, queries, and content within your Glean instance. Generate reports and dashboards to understand how your organization uses knowledge resources and identify opportunities for improvement. Use Cases Usage Analytics Analyze user behavior, search patterns, and content engagement to understand how your organization accesses and uses knowledge resources. Performance Metrics Track search performance, user satisfaction, and content effectiveness to optimize your knowledge management strategy. Business Intelligence Create custom dashboards and reports to provide leadership with insights into knowledge usage and organizational productivity. API Endpoints Method Endpoint Purpose POST /rest/api/v1/insights Read insights Reads the aggregate information for each user, query, and content. Edit this page Previous Hide or unhide docs Next Read insights",
      "topics": [
        "client-api",
        "insights"
      ],
      "description": "This page documents the Insights API, which provides aggregated analytics on user behavior, search patterns, and content engagement within a Glean instance. It enables organizations to generate reports and dashboards for usage analysis and performance optimization."
    },
    "https://developers.glean.com/api-info/indexing/authentication/overview": {
      "content": "Indexing API Authentication Overview On this page Indexing API Authentication This guide covers implementing authentication for Glean's Indexing API , which powers document indexing, datasource management, and administrative operations. The Indexing API only supports Glean-issued tokens - OAuth authentication is not available. warning Critical : The Indexing API does NOT support OAuth authentication . You must use Glean-issued tokens for all Indexing API operations. Glean-Issued Tokens (Only Option) Manually created through admin console Authentication : Glean tokens only (no OAuth support) Permissions : Global by default (no user-scoping) Scopes : Full indexing API access (no scope restrictions) Advanced Features : IP restrictions, token rotation, custom expiry Use Cases : Document indexing, datasource management, bulk operations Authentication Headers Reference ​ The Indexing API uses a simple authentication header format since it only supports Glean-issued tokens: Authorization: Bearer <indexing_api_token> Header Details ​ Header Required Description Example Value Authorization Always Bearer token with your Indexing API token Bearer glean_XYZ123... note Unlike the Client API, Indexing API tokens do not require additional headers like X-Glean-Auth-Type or X-Glean-ActAs . Quick Setup Overview ​ 1 Admin Access Required Only Super Admins can create Indexing API tokens 2 Navigate to Token Management Go to Indexing API Settings 3 Create New Token Configure token with optional IP restrictions and rotation settings 4 Use Token in Requests Include Authorization: Bearer <token> header in all Indexing API calls Creating Indexing API Tokens ​ Prerequisites ​ Super Admin access to Glean's admin console Datasource configured in Glean (for document indexing) IP ranges identified (if using IP restrictions) Token Creation Process ​ 1 Navigate to Indexing Tokens Go to Glean Admin Console → Platform → API Tokens → Indexing Tokens tab 2 Add New Token Click \"Add API token\" and configure: Token Name : Descriptive name for tracking Global Permissions : Full indexing API access App Permissions : Limit to specific datasources (optional) Expires On : Optional expiration date IP Restrictions : Optional IP range limitations Rotation Settings : Optional automated rotation 3 Save Token Securely warning The token is only displayed once after creation. Save it securely - you cannot retrieve it again. Token Properties ​ API Support : Indexing API only (Client API not supported) User Context : Global permissions (no user-scoping available) Scopes : Full indexing API access (no granular scope control) Expiration : Optional custom expiry dates Security : Support for IP restrictions and rotation Advanced Token Features ​ IP Address Restrictions ​ Restrict token usage to specific IP ranges for enhanced security: IP Restrictions Setup Configure IP Ranges During token creation, specify Greenlisted IPs Use comma-separated list of CIDR format ranges Example: 192.168.1.0/24,10.0.0.0/16 CIDR Format Examples CIDR Notation Description IP Range 192.168.1.0/24 Single subnet 192.168.1.1 - 192.168.1.254 10.0.0.0/16 Large network 10.0.0.1 - 10.0.255.254 203.0.113.5/32 Single IP 203.0.113.5 only Benefits Restrict API access to known infrastructure Prevent unauthorized usage if token is compromised Meet compliance requirements for IP-based access control Token Rotation ​ Enable automatic token rotation for enhanced security: Token Rotation Setup Configure Rotation During token creation, set Rotation Period (in minutes) Use the rotation API endpoint to rotate tokens programmatically Minimum rotation period: 1440 minutes (24 hours) Using the Rotation API curl -X POST https://instance-be.glean.com/api/index/v1/rotatetoken \\ -H 'Authorization: Bearer <CURRENT_TOKEN>' \\ -H 'Content-Type: application/json' \\ -d '{ \"tokenId\": \"your-token-id\" }' Response { \"newToken\" : \"new-rotated-token-value\" , \"expiresAt\" : \"2024-12-31T23:59:59Z\" } Best Practices Implement rotation in your application logic Store both old and new tokens during rotation period Test rotation in development environment first Using Indexing API Tokens ​ Authentication Header ​ All Indexing API requests require a single authentication header: Authorization: Bearer <indexing_api_token> Example Requests ​ Replace instance with your Glean instance name ( how to find ): Index Document Bulk Index Documents Get Document Count Add Datasource curl -X POST https://instance-be.glean.com/api/index/v1/indexdocument \\ -H 'Authorization: Bearer <INDEXING_TOKEN>' \\ -H 'Content-Type: application/json' \\ -d '{ \"datasource\": \"my-datasource\", \"document\": { \"id\": \"doc-123\", \"title\": \"Example Document\", \"body\": {\"mimeType\": \"text/plain\", \"textContent\": \"Document content\"}, \"updatedAt\": \"2024-01-15T10:30:00Z\" } }' curl -X POST https://instance-be.glean.com/api/index/v1/bulkindexdocuments \\ -H 'Authorization: Bearer <INDEXING_TOKEN>' \\ -H 'Content-Type: application/json' \\ -d '{ \"datasource\": \"my-datasource\", \"documents\": [ { \"id\": \"doc-1\", \"title\": \"First Document\", \"body\": {\"mimeType\": \"text/plain\", \"textContent\": \"Content 1\"} }, { \"id\": \"doc-2\", \"title\": \"Second Document\", \"body\": {\"mimeType\": \"text/plain\", \"textContent\": \"Content 2\"} } ] }' curl -X GET https://instance-be.glean.com/api/index/v1/getdocumentcount \\ -H 'Authorization: Bearer <INDEXING_TOKEN>' \\ -H 'Content-Type: application/json' curl -X POST https://instance-be.glean.com/api/index/v1/adddatasource \\ -H 'Authorization: Bearer <INDEXING_TOKEN>' \\ -H 'Content-Type: application/json' \\ -d '{ \"datasource\": { \"name\": \"My Custom Datasource\", \"displayName\": \"Custom Data Source\", \"homeUrl\": \"https://example.com\" } }' Testing Your Authentication ​ Quick Verification ​ Test your token with a simple document count request: curl -X GET https://<instance>-be.glean.com/api/index/v1/getdocumentcount \\ -H 'Authorization: Bearer <YOUR_INDEXING_TOKEN>' \\ -H 'Content-Type: application/json' Expected Response ​ Successful authentication returns document count data: { \"totalDocumentCount\" : 1234 , \"datasourceDocumentCounts\" : [ { \"datasource\" : \"datasource-1\" , \"documentCount\" : 567 } , { \"datasource\" : \"datasource-2\" , \"documentCount\" : 667 } ] } Test Document Indexing ​ Test document indexing with a minimal document: curl -X POST https://<instance>-be.glean.com/api/index/v1/indexdocument \\ -H 'Authorization: Bearer <YOUR_INDEXING_TOKEN>' \\ -H 'Content-Type: application/json' \\ -d '{ \"datasource\": \"test-datasource\", \"document\": { \"id\": \"test-doc-001\", \"title\": \"Test Document\", \"body\": { \"mimeType\": \"text/plain\", \"textContent\": \"This is a test document for authentication verification.\" }, \"updatedAt\": \"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'\" } }' Troubleshooting ​ Common Authentication Errors ​ Error Cause Solution 401 Unauthorized Invalid or expired token Verify token is correct and not expired 403 Forbidden - IP not allowed Request from non-whitelisted IP Add your IP to token's allowed IP ranges 400 Bad Request - Invalid datasource Datasource doesn't exist Create datasource first or verify name 413 Request Entity Too Large Document/request too large Split into smaller requests or use bulk operations 429 Too Many Requests Rate limit exceeded Implement exponential backoff retry logic 500 Internal Server Error Glean service issue Check Glean status page, retry with backoff Debugging Steps ​ 1 Verify token validity Check that token hasn't expired Ensure token was created for Indexing API (not Client API) Test with simple endpoint like document count 2 Check IP restrictions Verify your IP is in allowed ranges (if IP restrictions enabled) Test from different IP if needed Check CIDR format in token configuration 3 Validate request format Ensure Content-Type header is set correctly Verify JSON payload is valid Check required fields are present 4 Test with minimal request Start with document count or datasource status endpoints Use minimal document for indexing tests Gradually add complexity once basic auth works Indexing-Specific Issues ​ Document Indexing Troubleshooting Common Document Indexing Issues Issue Cause Solution Document not appearing in search Processing delay Wait 5-10 minutes, check document status API Permissions error User lacks access Verify document permissions are set correctly Invalid MIME type Unsupported file format Check supported MIME types documentation Document too large Size exceeds limits Split document or compress content Validation Steps Check document status : Use the document status API to verify indexing completion Verify permissions : Ensure document permissions allow intended users access Test search : Search for indexed document using specific terms from content Monitor logs : Check Glean's admin console for indexing errors Best Practices ​ Security ​ Store tokens securely - never commit tokens to version control Use IP restrictions when possible to limit token usage Enable token rotation for long-running applications Set expiration dates for tokens used in temporary projects Monitor token usage through the admin console Create separate tokens for different environments (dev/staging/prod) Performance ​ Use bulk operations when indexing multiple documents Implement retry logic with exponential backoff Monitor rate limits and adjust request frequency Batch requests efficiently to reduce API calls Use appropriate content chunking for large documents Development ​ Test thoroughly in development environment first Use descriptive token names to track purpose and usage Document token configuration for team members Plan for token rotation in application architecture Implement proper error handling for all API responses Operational ​ Monitor indexing status regularly through admin console Set up alerts for indexing failures or errors Track document counts to verify successful indexing Regular token audits to remove unused tokens Backup token configurations for disaster recovery Next Steps ​ Setup Datasource Configure your first datasource for document indexing ",
      "topics": [
        "indexing-api",
        "authentication",
        "troubleshooting"
      ],
      "description": "This page provides a comprehensive guide to authenticating with Glean's Indexing API using Glean-issued tokens, covering token creation, security features like IP restrictions and rotation, proper request formatting, and troubleshooting common errors. The main purpose is to help administrators securely set up and manage authentication for document indexing and datasource operations."
    },
    "https://developers.glean.com/api/client-api/summarize/overview": {
      "content": "Client API Reference Summarize Overview Summarize API The Summarize API leverages AI to generate concise summaries of documents and content within your organization. Extract key insights and create digestible overviews of lengthy documents to help users quickly understand important information. Use Cases Document Summarization Generate concise summaries of lengthy documents, reports, and articles to help users quickly grasp key points and main ideas. Content Digests Create automated content digests and executive summaries for newsletters, reports, and knowledge sharing initiatives. Information Extraction Extract and summarize key insights from multiple documents to support research, analysis, and decision-making processes. API Endpoints Method Endpoint Purpose POST /rest/api/v1/summarize Summarize documents Generate an AI summary of the requested documents. Edit this page Previous Update shortcut Next Summarize documents",
      "topics": [
        "client-api",
        "insights"
      ],
      "description": "The page provides reference documentation for the Summarize API, which uses AI to generate concise summaries of documents and extract key insights. Its main purpose is to enable developers to integrate AI-powered summarization functionality into their applications."
    },
    "https://developers.glean.com/guides/chat/overview": {
      "content": "Guides Chat Overview On this page Building Chat Applications Glean's Chat API enables you to build powerful conversational AI applications that can access your organization's knowledge. Whether you're creating a simple chatbot or a complex conversational interface, Glean provides the tools you need. Key Features ​ Conversational AI : Natural language conversations with context awareness Enterprise Knowledge : Access to your organization's indexed content Streaming Responses : Real-time response streaming for better user experience Citation Support : Automatic source citations for transparency Multi-turn Conversations : Maintain context across conversation turns Getting Started ​ Chat API Overview Learn about the Chat API endpoints and capabilities Chatbot Example Build a complete chatbot using Glean's client libraries Authentication Set up authentication for your chat application Client Libraries Use our official SDKs for Python, TypeScript, Go, and Java Common Use Cases ​ Customer Support Chatbot ​ Build a chatbot that can answer customer questions using your help documentation, FAQs, and knowledge base. Internal Knowledge Assistant ​ Create an internal tool that helps employees find company policies, procedures, and documentation. Developer Assistant ​ Build a coding assistant that can search through your codebase, documentation, and best practices. Sales Enablement Tool ​ Develop a tool that helps sales teams find relevant case studies, product information, and competitive intelligence. Architecture Patterns ​ Simple Request-Response ​ For basic Q&A scenarios where each query is independent. Conversational with Memory ​ For multi-turn conversations that maintain context. RAG Pattern ​ For responses that need specific document context. Best Practices ​ Message Structure ​ Use clear, specific queries for better results Include relevant context in system messages Structure conversations with proper message types Error Handling ​ Implement retry logic for transient failures Handle rate limiting gracefully Provide fallback responses for API errors Performance Optimization ​ Use streaming for real-time responses Implement caching for frequently asked questions Optimize message history length Security Considerations ​ Validate and sanitize user inputs Implement proper authentication Respect user permissions and data access Next Steps ​ Start Simple : Begin with the Chatbot Example Explore APIs : Review the Chat API Reference Choose Your Stack : Select a Client Library Deploy : Consider hosting and scaling requirements Related Guides ​ Agents Guide - For more complex AI workflows Search Guide - For document retrieval patterns Authentication Guide - For secure API access Edit this page Previous Changelog Next Chatbot Example Key Features Getting Started Common Use Cases Customer Support Chatbot Internal Knowledge Assistant Developer Assistant Sales Enablement Tool Architecture Patterns Simple Request-Response Conversational with Memory RAG Pattern Best Practices Message Structure Error Handling Performance Optimization Security Considerations Next Steps Related Guides",
      "topics": [
        "chat",
        "getting-started",
        "api-clients"
      ],
      "description": "This page provides an overview of Glean's Chat API, detailing how to build conversational AI applications using enterprise knowledge, with guidance on getting started, key features, architecture patterns, best practices, and related resources. Its main purpose is to help developers understand and begin implementing chat-based applications with Glean's tools and APIs."
    },
    "https://developers.glean.com/api/client-api/collections/overview": {
      "content": "Client API Reference Collections Overview Collections API The Collections API allows you to create and manage curated collections of documents and resources. Organize related content into themed collections, making it easier for users to discover and access relevant information within your organization. Use Cases Content Curation Create organized collections of related documents, resources, and links to help users discover relevant content more efficiently. Knowledge Organization Group documents by topic, project, or department to create structured knowledge repositories that improve content discoverability. Resource Management Add, update, and remove items from collections to keep curated content current and maintain high-quality resource lists. API Endpoints Method Endpoint Purpose POST /rest/api/v1/addcollectionitems Add Collection item Add items to a Collection. POST /rest/api/v1/createcollection Create Collection Create a publicly visible (empty) Collection of documents. POST /rest/api/v1/deletecollection Delete Collection Delete a Collection given the Collection's ID. POST /rest/api/v1/deletecollectionitem Delete Collection item Delete a single item from a Collection. POST /rest/api/v1/editcollection Update Collection Update the properties of an existing Collection. POST /rest/api/v1/editcollectionitem Update Collection item Update the URL, Glean Document ID, description of an item within a Collection given its ID. POST /rest/api/v1/getcollection Read Collection Read the details of a Collection given its ID. Does not fetch items in this Collection. POST /rest/api/v1/listcollections List Collections List all existing Collections. Edit this page Previous Read documents by facets Next List Collections",
      "topics": [
        "collections",
        "api-clients",
        "client-api"
      ],
      "description": "This page provides an overview and reference for the Collections API, which enables developers to programmatically create, manage, and organize collections of documents and resources. It details API endpoints for CRUD operations on collections and their items, supporting use cases like content curation and knowledge organization."
    },
    "https://developers.glean.com/api/indexing-api/datasources-overview": {
      "content": "Indexing API Reference Datasources Overview Overview Configure and manage datasources for indexing content. Datasources define the origin and configuration settings for content that will be indexed into Glean. Use Cases Custom Datasource Setup Create and configure custom datasources for proprietary systems, internal tools, or specialized content repositories that need to be searchable in Glean. Configuration Management Update datasource configurations to modify indexing behavior, content processing rules, and metadata extraction settings. Integration Monitoring Retrieve datasource configuration details to troubleshoot indexing issues and verify integration settings. API Endpoints Method Endpoint Purpose POST /api/index/v1/adddatasource Add or update datasource POST /api/index/v1/getdatasourceconfig Get datasource config Edit this page Previous Rotate token Next Add or update datasource",
      "topics": [
        "indexing-api",
        "datasources"
      ],
      "description": "This page provides an overview of datasources in the Indexing API, explaining how to configure and manage content sources for indexing into Glean. It covers use cases like custom datasource setup, configuration management, and integration monitoring, along with relevant API endpoints."
    },
    "https://developers.glean.com/api/client-api/chat/overview": {
      "content": "Client API Reference Chat Overview Chat API The Chat API enables you to build conversational experiences with Glean AI. Create interactive chat applications, manage conversation history, upload files for context, and leverage Glean's AI capabilities to provide intelligent responses based on your organization's knowledge. Use Cases AI-Powered Conversations Build interactive chat applications that leverage Glean AI to provide intelligent responses based on your organization's indexed content. File-Enhanced Context Upload and manage files within chat conversations to provide additional context for more accurate and relevant AI responses. Conversation Management Create, retrieve, and manage chat histories to maintain context across sessions and provide personalized user experiences. API Endpoints Method Endpoint Purpose POST /rest/api/v1/chat#stream Chat Have a conversation with Glean AI. POST /rest/api/v1/chat Chat Have a conversation with Glean AI. POST /rest/api/v1/deleteallchats Deletes all saved Chats owned by a user Deletes all saved Chats a user has had and all their contained conversational content. POST /rest/api/v1/deletechatfiles Delete files uploaded by a user for chat. Delete files uploaded by a user for Chat. POST /rest/api/v1/deletechats Deletes saved Chats Deletes saved Chats and all their contained conversational content. POST /rest/api/v1/getchat Retrieves a Chat Retrieves the chat history between Glean Assistant and the user for a given Chat. POST /rest/api/v1/getchatapplication Gets the metadata for a custom Chat application Gets the Chat application details for the specified application ID. POST /rest/api/v1/getchatfiles Get files uploaded by a user for Chat. Get files uploaded by a user for Chat. POST /rest/api/v1/listchats Retrieves all saved Chats Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content. POST /rest/api/v1/uploadchatfiles Upload files for Chat. Upload files for Chat. Edit this page Previous Create authentication token Next Chat",
      "topics": [
        "chat",
        "client-api",
        "api-clients"
      ],
      "description": "This page provides an overview and reference for the Chat API, which enables developers to build AI-powered conversational applications using Glean. It covers endpoints for managing conversations, uploading context files, and retrieving chat history."
    },
    "https://developers.glean.com/guides/agents/overview": {
      "content": "Guides Agents Overview On this page Building Agents with Glean Glean provides multiple ways to build AI agents that can search and reason over your organization's knowledge. This guide helps you choose the right approach and get started with building agent-powered applications. Choose Your Approach ​ Direct API Integration Use Glean's REST APIs directly for maximum control and customization LangChain Integration Python LangChain integration for Glean's search and chat capabilities MCP Integration Connect AI models and IDEs to Glean via standardized protocol Glean Agent Toolkit Pre-built Glean tools that work across multiple agent frameworks Comparison & Decision Guide ​ Approach Complexity Flexibility Time to Deploy Best For Direct API High Maximum Medium Custom integrations, multi-language LangChain Medium High Fast Python ecosystem, rich tooling MCP Low Medium Fast IDE integration, standardized tools Glean Agent Toolkit Medium High Medium Cross-platform compatibility, multi-framework tools Questions to Consider ​ What's your technical background? Non-technical → Agent Builder Python developer → LangChain Multi-language → Direct API Where will the agent run? IDE/Editor → MCP Web application → Direct API Multiple frameworks → Glean Agent Toolkit How much customization do you need? Simple Q&A → Agent Builder Complex workflows → Direct API Multi-framework tools → Glean Agent Toolkit Authentication & Setup ​ All approaches require Glean API credentials: Get API Token : Request a user-scoped API token Required Scopes : chat , search , agents (depending on usage) Environment Setup : Configure your Glean instance and token Need a No-Code Solution? ​ For creating agents without writing code, use Glean's built-in Agent Builder: Glean Agent Builder Create agents with drag-and-drop interface, pre-built templates, and custom instructions. Perfect for business users and rapid prototyping. The Agent Builder provides a visual interface for creating agents directly in Glean. Agents created this way can still be accessed programmatically via the Agents API for integration with your applications. Next Steps ​ New to Glean? Start with Agent Builder (no-code solution) Python Developer? Try LangChain Integration IDE User? Set up MCP Integration Multi-Framework? Explore Glean Agent Toolkit Custom Needs? Use Direct API Integration Need Help? Check the API Reference for technical details Edit this page Previous LLM Snippets Next Direct API Integration Choose Your Approach Comparison & Decision Guide Questions to Consider Authentication & Setup Need a No-Code Solution? Next Steps",
      "topics": [
        "agents",
        "getting-started",
        "mcp"
      ],
      "description": "This page provides an overview of the different approaches to building AI agents using Glean, including direct API integration, LangChain, MCP, and the Glean Agent Toolkit, along with guidance on choosing the right method based on technical needs and environment. It also covers authentication setup and introduces the no-code Agent Builder for rapid agent development."
    },
    "https://developers.glean.com/api/client-api/tools/overview": {
      "content": "Client API Reference Tools Overview Tools API The Tools API enables you to discover and execute various tools and integrations available within your Glean instance. Access external services, run automated workflows, and integrate with third-party applications to extend Glean's capabilities. Use Cases Tool Discovery Discover available tools and integrations within your Glean instance to understand what capabilities are accessible through the API. Workflow Automation Execute tools programmatically to automate workflows, data processing, and integration tasks with external systems. Third-party Integration Integrate with external services and applications through Glean's tool ecosystem to create comprehensive business solutions. API Endpoints Method Endpoint Purpose POST /rest/api/v1/tools/call Execute the specified tool Execute the specified tool with provided parameters GET /rest/api/v1/tools/list List available tools Returns a filtered set of available tools based on optional tool name parameters. If no filters are provided, all available tools are returned. Edit this page Previous Summarize documents Next List available tools",
      "topics": [
        "api-clients",
        "actions",
        "automation"
      ],
      "description": "The page provides an overview of the Tools API, which allows developers to discover and execute tools and integrations within Glean for workflow automation and third-party service integration. Its main purpose is to enable programmatic execution of tools and list available tools via API endpoints."
    },
    "https://developers.glean.com/api/indexing-api/authentication-overview": {
      "content": "Indexing API Reference Authentication Overview Overview Manage authentication tokens for the Indexing API. The Indexing API requires authentication tokens to authorize access to your Glean instance. Use Cases Token Rotation Implement secure token rotation policies to maintain API security and compliance with your organization's security requirements. Multi-Environment Setup Manage separate authentication tokens for development, staging, and production environments to ensure proper access control. Service Integration Authenticate third-party services and custom applications that need to index content into your Glean instance. API Endpoints Method Endpoint Purpose POST /api/index/v1/rotatetoken Rotate token Edit this page Previous Supported MIME Types Next Rotate token",
      "topics": [
        "indexing-api",
        "authentication",
        "api-clients"
      ],
      "description": "This page provides an overview of authentication for the Indexing API, including managing and rotating tokens, setting up tokens across environments, and integrating third-party services. It outlines use cases and API endpoints for secure access to Glean's indexing functionality."
    },
    "https://developers.glean.com/api/client-api/announcements/overview": {
      "content": "Client API Reference Announcements Overview Announcements API The Announcements API allows administrators to create, update, and manage organizational announcements that are visible to users based on department and location targeting. These announcements help keep teams informed about important updates, policy changes, and company-wide communications. Use Cases Company-wide Communications Create and broadcast important announcements to all employees or specific departments about policy changes, events, and updates. Department-specific Notifications Target announcements to specific departments or locations to ensure relevant information reaches the right audience. Announcement Management Update, modify, or remove announcements as needed to keep organizational communications current and accurate. API Endpoints Method Endpoint Purpose POST /rest/api/v1/createannouncement Create Announcement Create a textual announcement visible to some set of users based on department and location. POST /rest/api/v1/deleteannouncement Delete Announcement Delete an existing user-generated announcement. POST /rest/api/v1/updateannouncement Update Announcement Update a textual announcement visible to some set of users based on department and location. Edit this page Previous Create an agent run and wait for the response Next Create Announcement",
      "topics": [
        "client-api",
        "messages"
      ],
      "description": "The page provides a reference for the Announcements API, which enables administrators to create, update, and delete organizational announcements targeted by department and location. It focuses on managing internal communications through API endpoints for company-wide or segmented messaging."
    },
    "https://developers.glean.com/api-info/indexing/documents/activity": {
      "content": "Indexing API Documents Activity On this page Activity We allow the option of allowing developers to push activity information for documents (VIEW, EDIT etc.) - that will be used for better ranking of documents for search. Getting started with the activity endpoint ​ First note that, the activity endpoint needs to be called with a client API bearer token (as opposed to an indexing API bearer token for other endpoints). This is because, we expect activity to be provided server-to-server on a per-user basis (eg. when a user views a document from a custom datasource, you may report this view back to us from your server). For pushing activity for any user from your organization, we need a Global client API token scoped to ACTIVITY . To fetch a scoped client API token, please follow the instructions in the Authentication page for Client API . Making your first request ​ Below is a sample activity request for a given user (who needs to be specified in the X-Glean-ActAs param). We record 2 view events: One for https://example.com/doc1 and another for https://example.com/doc2 . We specify the datasource in the params field (so it is correctly matched to the relevant document) and optionally, we also mention the duration of the view if available. curl -i -X POST \\ 'https://customer-be.glean.com/rest/api/v1/activity' \\ -H 'Authorization: Bearer <token>' \\ -H 'Content-Type: application/json' \\ -H 'X-Glean-ActAs: user-whose-activity-is-being-reported@example.com' \\ -d '{ \"events\": [ { \"url\": \"https://example.com/doc1\", \"action\": \"VIEW\", \"timestamp\": \"2023-04-05T04:56:07.000Z\" \"params\": { \"datasource\": \"testdatasource\" } }, { \"url\": \"https://example.com/doc2\", \"action\": \"VIEW\", \"timestamp\": \"2023-04-04T04:56:07.000Z\", \"params\": { \"duration\": 20, \"referrer\": \"https://example.com/document\" \"datasource\": \"testdatasource2\" } } ] }' Edit this page Previous Document Count Next Permissions Getting started with the activity endpoint Making your first request",
      "topics": [
        "indexing-api",
        "authentication",
        "datasources"
      ],
      "description": "This page describes how to use the Indexing API's activity endpoint to report user interactions (like VIEW or EDIT) for documents, which influences search ranking. It covers authentication requirements, token scoping, and provides an example request to send activity data server-to-server."
    },
    "https://developers.glean.com/guides/search/overview": {
      "content": "Guides Search Overview On this page Search Integration Glean's Search API provides powerful enterprise search capabilities that you can integrate into your applications. Whether you're building a search interface, adding search functionality to existing tools, or creating intelligent agents, Glean's search capabilities can help users find the information they need. Key Features ​ Enterprise Search : Search across all your organization's connected data sources Intelligent Ranking : AI-powered relevance scoring and result ranking Faceted Filtering : Filter results by source, type, date, and custom attributes Real-time Results : Fast search with sub-second response times Permission Awareness : Results respect user permissions and data access controls Getting Started ​ Search API Overview Learn about the Search API endpoints and capabilities Filtering Results Advanced filtering techniques and examples Datasource Filters Filter search results by specific data sources Faceted Filtering Use facets to create dynamic search interfaces Common Use Cases ​ Knowledge Base Search ​ Build a search interface for your internal documentation, wikis, and knowledge repositories. Code Search ​ Search through your organization's source code, documentation, and development resources. Document Discovery ​ Help users find relevant documents, presentations, and files across all connected systems. Expert Finding ​ Locate subject matter experts and colleagues with specific knowledge or experience. Search Patterns ​ Basic Search ​ Simple text-based search across all available content: import requests import os api_token = os . getenv ( \"GLEAN_API_TOKEN\" ) instance = os . getenv ( \"GLEAN_INSTANCE\" ) base_url = f\"https:// { instance } -be.glean.com/rest/api/v1\" headers = { \"Authorization\" : f\"Bearer { api_token } \" , \"Content-Type\" : \"application/json\" } response = requests . post ( f\" { base_url } /search\" , headers = headers , json = { \"query\" : \"vacation policy\" , \"pageSize\" : 10 } ) response . raise_for_status ( ) results = response . json ( ) . get ( \"results\" , [ ] ) for result in results : print ( f\"Title: { result . get ( 'title' , 'No title' ) } \" ) print ( f\"URL: { result . get ( 'url' , 'No URL' ) } \" ) print ( f\"Snippet: { result . get ( 'snippet' , 'No snippet' ) } \" ) Filtered Search ​ Search with specific filters to narrow results: response = await client . search . search ( { \"query\" : \"quarterly results\" , \"pageSize\" : 10 , \"requestOptions\" : { \"facetFilters\" : [ { \"facetName\" : \"datasource\" , \"values\" : [ \"confluence\" , \"sharepoint\" ] } , { \"facetName\" : \"objectType\" , \"values\" : [ \"document\" ] } ] } } ) Search with Date Filters ​ Find recent or time-specific content: from datetime import datetime , timedelta last_month = datetime . now ( ) - timedelta ( days = 30 ) response = await client . search . search ( { \"query\" : \"product updates\" , \"requestOptions\" : { \"facetFilters\" : [ { \"facetName\" : \"updatedAfter\" , \"values\" : [ last_month . isoformat ( ) ] } ] } } ) Advanced Features ​ Autocomplete Search ​ Implement search suggestions and autocomplete: autocomplete_response = await client . search . autocomplete ( { \"query\" : \"vacat\" , \"maxResults\" : 5 } ) for suggestion in autocomplete_response . suggestions : print ( f\"Suggestion: { suggestion . text } \" ) Search Analytics ​ Track search performance and user behavior: response = await client . search . search ( { \"query\" : \"benefits\" , \"trackingToken\" : \"user-session-123\" , \"requestOptions\" : { \"enableAnalytics\" : True } } ) # Track click events await client . activity . activity ( { \"trackingToken\" : response . trackingToken , \"action\" : \"CLICK\" , \"documentId\" : clicked_result . id } ) Federated Search ​ Search across multiple instances or systems: async def federated_search ( query : str ) : # Search primary instance primary_results = await primary_client . search . search ( { \"query\" : query } ) # Search secondary instance secondary_results = await secondary_client . search . search ( { \"query\" : query } ) # Combine and rank results all_results = primary_results . results + secondary_results . results return sorted ( all_results , key = lambda x : x . relevanceScore , reverse = True ) Building Search Interfaces ​ React Search Component ​ import { useState , useEffect } from 'react' ; import { Glean } from '@gleanwork/api-client' ; const SearchComponent = ( ) => { const [ query , setQuery ] = useState ( '' ) ; const [ results , setResults ] = useState ( [ ] ) ; const [ loading , setLoading ] = useState ( false ) ; const client = new Glean ( { apiToken : process . env . REACT_APP_GLEAN_TOKEN , instance : process . env . REACT_APP_GLEAN_INSTANCE } ) ; const handleSearch = async ( searchQuery : string ) => { if ( ! searchQuery . trim ( ) ) return ; setLoading ( true ) ; try { const response = await client . search . search ( { query : searchQuery , pageSize : 20 } ) ; setResults ( response . results || [ ] ) ; } catch ( error ) { console . error ( 'Search error:' , error ) ; } finally { setLoading ( false ) ; } } ; return ( < div > < input type = \"text\" value = { query } onChange = { ( e ) => setQuery ( e . target . value ) } onKeyPress = { ( e ) => e . key === 'Enter' && handleSearch ( query ) } placeholder = \"Search your organization's knowledge...\" / > { loading && < div > Searching ... < / div > } < div > { results . map ( ( result , index ) => ( < div key = { index } className = \"search-result\" > < h3 > < a href = { result . url } > { result . title } < / a > < / h3 > < p > { result . snippet } < / p > < small > { result . datasource } • { result . lastModified } < / small > < / div > ) ) } < / div > < / div > ) ; } ; Search with Filters UI ​ const FilteredSearchComponent = ( ) => { const [ filters , setFilters ] = useState ( { datasources : [ ] , dateRange : null , objectTypes : [ ] } ) ; const applyFilters = async ( query : string ) => { const facetFilters = [ ] ; if ( filters . datasources . length > 0 ) { facetFilters . push ( { facetName : \"datasource\" , values : filters . datasources } ) ; } if ( filters . objectTypes . length > 0 ) { facetFilters . push ( { facetName : \"objectType\" , values : filters . objectTypes } ) ; } const response = await client . search . search ( { query , requestOptions : { facetFilters } } ) ; return response . results ; } ; // UI implementation... } ; Performance Optimization ​ Caching Search Results ​ import asyncio from functools import lru_cache import hashlib class CachedSearchClient : def __init__ ( self , client : Glean ) : self . client = client self . _cache = { } def _cache_key ( self , query : str , filters : dict = None ) - > str : key_data = f\" { query } :{filters or {}}\" return hashlib . md5 ( key_data . encode ( ) ) . hexdigest ( ) async def search ( self , query : str , filters : dict = None , cache_ttl : int = 300 ) : cache_key = self . _cache_key ( query , filters ) if cache_key in self . _cache : cached_result , timestamp = self . _cache [ cache_key ] if time . time ( ) - timestamp < cache_ttl : return cached_result result = await self . client . search . search ( { \"query\" : query , \"requestOptions\" : { \"facetFilters\" : filters or [ ] } } ) self . _cache [ cache_key ] = ( result , time . time ( ) ) return result Pagination and Infinite Scroll ​ async def paginated_search ( client , query : str , page_size : int = 20 ) : cursor = None all_results = [ ] while True : request = { \"query\" : query , \"pageSize\" : page_size } if cursor : request [ \"cursor\" ] = cursor response = await client . search . search ( request ) all_results . extend ( response . results or [ ] ) if not response . hasMoreResults : break cursor = response . cursor return all_results Error Handling ​ from glean . exceptions import GleanAPIError import asyncio async def robust_search ( client , query : str , max_retries : int = 3 ) : for attempt in range ( max_retries ) : try : return await client . search . search ( { \"query\" : query } ) except GleanAPIError as e : if e . status_code == 429 : # Rate limited wait_time = 2 ** attempt await asyncio . sleep ( wait_time ) continue elif e . status_code >= 500 : # Server error if attempt < max_retries - 1 : await asyncio . sleep ( 1 ) continue raise e except Exception as e : if attempt < max_retries - 1 : await asyncio . sleep ( 1 ) continue raise e raise Exception ( f\"Search failed after { max_retries } attempts\" ) Next Steps ​ Explore Examples : Check out specific filtering and search examples Try the API : Test search queries in your environment Build Interfaces : Create search UIs for your applications Optimize : Implement caching and performance improvements Related Resources ​ Search API Reference Authentication Guide Chat Integration - Combine search with conversational AI Agent Examples - Use search in intelligent agents Edit this page Previous Chatbot Example Next Filtering Results Key Features Getting Started Common Use Cases Knowledge Base Search Code Search Document Discovery Expert Finding Search Patterns Basic Search Filtered Search Search with Date Filters Advanced Features Autocomplete Search Search Analytics Federated Search Building Search Interfaces React Search Component Search with Filters UI Performance Optimization Caching Search Results Pagination and Infinite Scroll Error Handling Next Steps Related Resources",
      "topics": [
        "search",
        "api-clients",
        "getting-started"
      ],
      "description": "This page provides an overview of Glean's Search API, detailing how to integrate enterprise search capabilities into applications. It covers core features like querying, filtering, autocomplete, analytics, and building UIs, along with code examples for implementation using API clients."
    },
    "https://developers.glean.com/api/client-api/pins/overview": {
      "content": "Client API Reference Pins Overview Pins API The Pins API allows you to create, manage, and organize pinned search results that appear prominently for specific queries. Improve search experience by ensuring high-quality, relevant content appears at the top of search results for important topics. Use Cases Search Result Curation Pin high-quality documents and resources to appear at the top of search results for specific queries, ensuring users find the best content first. Content Promotion Highlight important announcements, policies, and frequently accessed documents by pinning them to relevant search terms. Search Quality Control Manage and update pinned results to maintain search quality and ensure users consistently find the most relevant and current information. API Endpoints Method Endpoint Purpose POST /rest/api/v1/editpin Update pin Update an existing user-generated pin. POST /rest/api/v1/getpin Read pin Read pin details given its ID. POST /rest/api/v1/listpins List pins Lists all pins. POST /rest/api/v1/pin Create pin Pin a document as a result for a given search query.Pin results that are known to be a good match. POST /rest/api/v1/unpin Delete pin Unpin a previously pinned result. Edit this page Previous Read messages Next Update pin",
      "topics": [
        "client-api",
        "search",
        "pins"
      ],
      "description": "The page provides reference documentation for the Pins API, which enables developers to programmatically manage pinned search results to improve search relevance and user experience by promoting important content for specific queries."
    },
    "https://developers.glean.com/api-info/indexing/getting-started/overview": {
      "content": "Indexing API Getting Started Overview On this page Indexing API Overview The Glean Indexing API enables organizations to make their custom content searchable and accessible through Glean's search and AI capabilities. This API is designed for pushing content from internal tools, on-premises systems, and applications that Glean doesn't natively support into Glean's search index, making it discoverable alongside your organization's other content. Key Capabilities ​ Document Indexing Index documents with full-text content, metadata, and permissions to make them searchable through Glean Custom Datasources Create and manage custom datasources to organize and categorize your indexed content Structured Entities Index structured key-value content for applications requiring schema-based data representation Permission Management Enforce fine-grained access controls ensuring users only see content they're authorized to access Common Use Cases ​ Internal Tool Integration : Make content from proprietary or on-premises tools searchable in Glean Legacy System Modernization : Bring content from older systems into modern search and AI workflows Custom Application Data : Index structured data from internal applications and databases Document Repositories : Make file servers, wikis, and document management systems searchable Organizational Data : Push people information, team structures, and organizational knowledge into Glean How It Works ​ The Indexing API follows a straightforward workflow: 1 Create Datasource Set up a custom datasource to hold your content. This defines how your content appears in search results and provides organizational structure. 2 Index Content Push documents, structured data, and metadata to your datasource using the indexing endpoints. Content can be indexed individually or in bulk. 3 Manage Permissions Configure access controls to ensure users only see content they're authorized to access, respecting your organization's security policies. 4 Enable Discovery Activate your datasource in Glean's admin console to make the indexed content discoverable through search and AI features. Content Types ​ The Indexing API supports various types of content: Documents : Full-text content with titles, bodies, metadata, and view URLs Custom Entities : Structured key-value data for applications requiring schema-based representation User Information : Employee profiles, organizational structures, and team data Groups & Teams : Organizational units and membership information External Shortcuts : Quick access links to frequently used external resources Quick Example ​ Here's how to create a datasource and index your first document: Create Datasource Index Document curl -X POST https://customer-be.glean.com/api/index/v1/adddatasource \\ -H 'Authorization: Bearer <your_indexing_token>' \\ -d '{ \"name\": \"internal-docs\", \"displayName\": \"Internal Documentation\", \"datasourceCategory\": \"PUBLISHED_CONTENT\", \"urlRegex\": \"^https://internal.company.com/docs.*\", \"isUserReferencedByEmail\": true }' curl -X POST https://customer-be.glean.com/api/index/v1/indexdocument \\ -H 'Authorization: Bearer <your_indexing_token>' \\ -d '{ \"document\": { \"datasource\": \"internal-docs\", \"objectType\": \"Document\", \"id\": \"getting-started-guide\", \"title\": \"Getting Started Guide\", \"body\": { \"mimeType\": \"text/plain\", \"textContent\": \"This guide helps new employees get up to speed quickly...\" }, \"permissions\": { \"allowAnonymousAccess\": false, \"allowedUsers\": [\"employee@company.com\"] }, \"viewURL\": \"https://internal.company.com/docs/getting-started\" } }' Authentication & Permissions ​ Supported APIs: Indexing API The Indexing API uses Glean-issued tokens for authentication. Only users with appropriate permissions can create and manage indexing tokens: Super Admins : Can create all types of tokens Admins : Can create user-scoped tokens API Token Creators : Can create user-scoped tokens Learn more in our Authentication Guide . Next Steps ​ Setup Your First Datasource Learn how to create and configure a custom datasource for your content Index Your First Document Follow our step-by-step guide to index content and make it searchable Manage Authentication Set up indexing API tokens with proper permissions and security API Reference Browse complete API documentation with all available endpoints Important Considerations ​ Permissions : Always configure appropriate permissions to maintain security Rate Limits : Review our rate limiting policies for bulk operations Data Freshness : Content typically appears in search within a few minutes of indexing Backwards Compatibility : Glean provides advance notice and deprecation periods for any breaking changes Testing : Use test groups to validate content before making it visible to all users Edit this page Previous Update verification Next Setup Datasources Key Capabilities Common Use Cases How It Works Content Types Quick Example Authentication & Permissions Next Steps Important Considerations",
      "topics": [
        "indexing-api",
        "getting-started",
        "datasources"
      ],
      "description": "This page provides an overview of the Glean Indexing API, focusing on how to get started with creating datasources, indexing custom content (documents, entities, user data), and managing permissions. It outlines key capabilities, common use cases, and the workflow for integrating external systems into Glean's search and AI ecosystem."
    },
    "https://developers.glean.com/api/client-api/governance/overview": {
      "content": "Client API Reference Governance Overview On this page Governance API The Governance API enables administrators to create and manage data governance policies, generate compliance reports, and maintain oversight of content access and usage within your organization.\nEnsure data security and regulatory compliance through comprehensive governance controls. Configure in the Glean UI under Admin → Governance. You can also configure the same using the APIs provided.\nEach policy or report scans every indexed document according to its settings and surfaces any violations for review. Authorization ​ To call the policy and report endpoints, create a Client API token with scope DATA_GOVERNANCE . The token must belong to a user who can access the Sensitive Content pages (for example, a Super Admin or Sensitive Content Moderator). For content-hiding endpoints, generate a token with scope CONTENT_HIDING . The associated user must be able to edit visibility overrides, typically a Super Admin. See Authentication for detailed steps. Difference between policies and reports ​ A report runs a one-off scan and lets you download violations as a CSV when it finishes. Policies support two schedules— WEEKLY and CONTINUOUS .\nA policy adds an interactive dashboard where you can review findings, archive items, and optionally hide flagged documents. Note: Policy and report APIs share many request fields. Ensure any shared fields use consistent values within the same payload. APIs ​ Governance APIs fall into three groups: policy , report , and content-hiding endpoints. Both policies and reports share a common configuration object, config .\nThis has certain fields that need not be populated while submitting a report or policy to be created as they are only meant to be populated on return.\nNamely, the config version , createdAt and createdBy will automatically be set without needing to be passed. Policy APIs ​ With these endpoints, you can perform CRUD operations on policies.\nPolicies created/edited through these would reflect in the Sensitive Findings section under the Admin > Governance section in the Glean UI. Report APIs ​ Only creating a one-time report is supported via API for reports.\nYou can get the report's scan status to check if it has completed and download its violation CSV.\nFor any of the other features such as updating, other frequencies, etc., please use policies. Reports created using this endpoint will appear in the \"Sensitive Content Reporting\" section under Admin > Governance in the UI. Content hiding APIs ​ Content hiding works by setting \"visibility overrides\" to a particular document. These overrides can come from different sources, such as: Existing policies that might flag a document meeting its requirements if \"auto-hide\" is enabled. If it is manually hidden by a user. Different users are treated as different sources. If a document is present in the CSV for hiding it. On manually hiding, the document will have a visibility override set with source type \"user\".\nOn manually unhiding, the document will be unhidden from all sources (not just the user source).\nAll its visibility overrides will be removed and the document will be visible on Glean. Use Cases Policy Management Create, update, and enforce data governance policies to ensure compliance with organizational and regulatory requirements. Compliance Reporting Generate detailed compliance reports and audit trails to demonstrate adherence to data governance policies and regulations. Access Control Monitor and control data access patterns to ensure sensitive information is only accessed by authorized personnel. API Endpoints Method Endpoint Purpose GET /rest/api/v1/governance/data/policies Lists policies Lists policies with filtering. POST /rest/api/v1/governance/data/policies Creates new policy Creates a new policy with specified specifications and returns its id. GET /rest/api/v1/governance/data/policies/{id} Gets specified policy Fetches the specified policy version, or the latest if no version is provided. POST /rest/api/v1/governance/data/policies/{id} Updates an existing policy Updates an existing policy. GET /rest/api/v1/governance/data/policies/{id}/download Downloads violations CSV for policy Downloads CSV violations report for a specific policy id. This does not support continuous policies. POST /rest/api/v1/governance/data/reports Creates new one-time report Creates a new one-time report and executes its batch job. GET /rest/api/v1/governance/data/reports/{id}/download Downloads violations CSV for report Downloads CSV violations report for a specific report id. GET /rest/api/v1/governance/data/reports/{id}/status Fetches report run status Fetches the status of the run corresponding to the report-id. GET /rest/api/v1/governance/documents/visibilityoverrides Fetches documents visibility Fetches the visibility override status of the documents passed. POST /rest/api/v1/governance/documents/visibilityoverrides Hide or unhide docs Sets the visibility-override state of the documents specified, effectively hiding or un-hiding documents. Edit this page Previous Read people Next Gets specified policy Authorization Difference between policies and reports APIs Policy APIs Report APIs Content hiding APIs",
      "topics": [
        "client-api",
        "permissions",
        "governance"
      ],
      "description": "This page provides reference documentation for the Governance API, which allows administrators to create and manage data governance policies, generate compliance reports, and control document visibility through visibility overrides. The main purpose is to enable programmatic oversight of data access, security, and regulatory compliance using client API endpoints."
    },
    "https://developers.glean.com/guides/mcp": {
      "content": "Guides MCP On this page Model Context Protocol (MCP) Remote Server Connect your AI tools to Glean's enterprise knowledge base with zero setup required. The Remote MCP Server is built directly into Glean's platform, providing instant access to your organization's data through any MCP-compatible host application. Public Beta The Remote MCP Server is available to all Glean customers during the\npublic beta period. General Availability: Targeting late September 2025 Install Now ​ Get started in seconds with our quick installer. Click here to configure your setup - select your host application and enter your Glean instance details below. Quick Install Remote MCP Server Get connected in seconds with our MCP Host configurator Select Your Host Application ChatGPT Claude Code Claude for Desktop Cursor Goose Visual Studio Code Windsurf ▼ Configure Server URL Your company's Glean instance MCP server endpoint Authentication Method OAuth (Recommended) Bearer Token ▼ Uses Dynamic Client Registration for automatic authentication Server URL CLI Command Manual Config CLI Installation Command claude mcp add glean_default https://[instance]-be.glean.com/mcp/[endpoint] \\\n   --transport http \\\n   --scope user Run this command in your terminal to add the MCP server to Claude Code. Configuration Preview {\n  \"glean_default\": {\n    \"type\": \"http\",\n    \"...\": \"Complete the 'Configure Server URL' section above\"\n  }\n} How does this work? The Remote MCP Server connects your AI tools directly to Glean's search and knowledge platform. Installation is simple: Configurator: Use our configurator to quickly generate the MCP server configuration. CLI configuration: Use our CLI tool to automatically configure supported hosts from your terminal. Manual configuration: Copy the generated configuration to your host's settings file. Administrator setup: ChatGPT Connectors and Claude for Teams/Enterprise require your admin to install first - no local configuration needed. By default, authentication uses OAuth with Dynamic Client Registration (DCR) - no API keys needed. If you need to use an API token instead, chose the Bearer Token option under Authentication Method . tip For ChatGPT Connectors and Claude for Teams/Enterprise, administrator\nsetup is required. The configurator will provide instructions when you\nselect these hosts. Host Compatibility MCP host compatibility is evolving. The table below reflects validated support and our recommended OAuth method: MCP Host Application Recommended OAuth Method Configuration Method ChatGPT Native Custom Setup Claude Code Native Quick Installer / CLI / Manual Claude for Desktop Bridge Quick Installer / CLI / Manual Cursor Native One-Click / CLI / Manual Goose Native Quick Installer / CLI / Manual Visual Studio Code Native One-Click / CLI / Manual Windsurf Bridge Quick Installer / CLI / Manual Available Servers ​ During the public beta, we're providing access to two specialized MCP servers: Tools Server (Default) ChatGPT Server The Tools Server provides unified access to Glean's core\ncapabilities through a streamlined interface. This server is ideal\nfor general-purpose AI interactions with your enterprise data. Endpoint: https://[instance]-be.glean.com/mcp/default Key Features: Comprehensive search across all your connected data sources Intelligent chat interactions with context awareness Document retrieval and analysis People directory search The ChatGPT Server is optimized specifically for ChatGPT Connectors,\nproviding seamless integration with OpenAI's ChatGPT workspace. Endpoint: https://[instance]-be.glean.com/mcp/chatgpt Key Features: Conforms to OpenAI's MCP Connector spec Optimized response formatting for ChatGPT Automatic citation handling Token-efficient responses tip Use this endpoint specifically for ChatGPT integrations as it uses\ntool naming conventions that ChatGPT expects (e.g., \"fetch\"\ninstead of \"read_document\"). To configure Glean's MCP servers, follow these setup instructions . Core Capabilities ​ The remote MCP server exposes a curated set of Glean capabilities as MCP tools. Administrators can enable defaults and optionally add more. Default Tools ​ search (Search) - Search across your entire knowledge base chat (Chat) - Interactive conversations with Glean's AI read_document (Read Document) - Retrieve specific documents by ID or URL Additional Configurable Tools ​ code_search (Code Search) - Search your codebase and repositories employee_search (Employee Search) - Find people and expertise in your organization gmail_search (Gmail Search) - Search Gmail messages and threads meeting_lookup (Meeting Lookup) - Find meeting recordings and notes outlook_search (Outlook Search) - Search Outlook emails and calendar Troubleshooting ​ Client Authentication Failed ​ When repeatedly connecting and disconnecting, some host applications may end up using stale client ids.  If you see the message Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). The requested OAuth 2.0 Client does not exist. while authenticating, you can clear your MCP credentials and re-authenticate.  Doing so is specific to the MCP host application. Visual Studio Code - Run the command Authentication: Remove Dynamic Authentication Providers Cursor - Run the command Cursor: Clear All MCP Tokens Local MCP Server ​ You can also use Glean's open-source stdio MCP server: @gleanwork/local-mcp-server Self-hosted MCP server implementation for Glean's search and chat\ncapabilities View on GitHub The local server is ideal for: Development and testing Air-gapped environments Custom tool development Full control over the server infrastructure Edit this page Previous FAQ Next Overview Install Now Available Servers Core Capabilities Default Tools Additional Configurable Tools Troubleshooting Local MCP Server",
      "topics": [],
      "description": "This page provides guidance on setting up and using the Model Context Protocol (MCP) Remote Server to connect AI tools like ChatGPT, Claude, and others to Glean's enterprise knowledge base, covering configuration methods, authentication, available servers, core capabilities, and troubleshooting."
    },
    "https://developers.glean.com/api/client-api/documents/overview": {
      "content": "Client API Reference Documents Overview Documents API The Documents API provides access to document metadata, permissions, and content within your organization. Retrieve document information, check access permissions, and query documents by various criteria to build powerful document management and discovery features. Use Cases Document Discovery Retrieve document metadata and content to build custom search and discovery interfaces that help users find relevant information. Permission Management Check document access permissions to ensure users only see content they're authorized to access in your applications. Content Analysis Access document metadata and facets to perform content analysis, categorization, and build insights about your organization's knowledge. API Endpoints Method Endpoint Purpose POST /rest/api/v1/getdocpermissions Read document permissions Read the emails of all users who have access to the given document. POST /rest/api/v1/getdocuments Read documents Read the documents including metadata (does not include enhanced metadata via `/documentmetadata`) for the given list of Glean Document IDs or URLs specified in the request. POST /rest/api/v1/getdocumentsbyfacets Read documents by facets Read the documents including metadata (does not include enhanced metadata via `/documentmetadata`) macthing the given facet conditions. Edit this page Previous Chat Next Read document permissions",
      "topics": [
        "documents",
        "permissions",
        "api-clients"
      ],
      "description": "This page provides an overview of the Documents API, which allows developers to retrieve document metadata, content, and access permissions programmatically. It supports use cases like document discovery, permission management, and content analysis through specific API endpoints."
    },
    "https://developers.glean.com/get-started/authentication": {
      "content": "Get Started Authentication On this page Authentication Overview Glean provides two main authentication methods to access its APIs, each with different capabilities and use cases. This guide will help you understand the concepts and choose the right approach for your integration. Finding Your Glean Instance ​ All Glean API requests require specifying your organization's specific Glean instance. The instance identifier is used in API endpoints and API Client/SDK configuration. How to Find Your Instance ​ Navigate to the About Page : Visit https://app.glean.com/admin/about-glean in your Glean admin console Locate Server Instance : Find the \"Server instance (QE)\" field Extract Instance Name : Use the portion before -be.glean.com Example ​ If your Server instance shows: https://acme-prod-be.glean.com/ Your instance name is: acme-prod Usage in APIs ​ Your instance name is used in: API Base URLs : Client API: https://{instance}-be.glean.com/rest/api/v1/ Indexing API: https://{instance}-be.glean.com/api/index/v1/ API Client/SDK Configuration : Set as GLEAN_INSTANCE environment variable API Types and Implementation Guides ​ Glean offers two distinct APIs with different authentication capabilities. Choose your API type to get started: Client API Authentication For end-user applications and integrations Search, chat, collections, agents User-facing functionality OAuth (recommended) + Glean tokens Base URL: https://instance-be.glean.com/rest/api/v1/ Implementation Guide → Indexing API Authentication For administrative operations and content management Document indexing, datasource management Administrative operations Glean tokens only (no OAuth support) Base URL: https://instance-be.glean.com/api/index/v1/ Implementation Guide → Authentication Methods ​ OAuth Authentication (Recommended) ​ Supported APIs: Client API OAuth is the recommended method for Client API integrations. It leverages your existing identity provider and provides seamless authentication without managing additional tokens. Supported APIs: Client API only Providers: Google Workspace, Azure, Okta, OneLogin Benefits: No token management, leverages existing auth, full API access Glean-Issued Tokens ​ Supported APIs: Client API Indexing API Glean-issued tokens are manually created through the admin console and offer granular control over permissions and access. Supported APIs: Both Client API and Indexing API Types: User-scoped, Global (super admin only) Benefits: Granular scope control, works with both APIs Quick Decision Guide ​ Which Authentication Method Should I Use? For Client API integrations: Choose OAuth if you have existing identity provider infrastructure (Google, Azure, Okta, OneLogin) Choose Glean tokens if you need granular scope control or don't have OAuth infrastructure For Indexing API operations: Must use Glean tokens (OAuth is not supported) For applications using both APIs: Use OAuth for Client API operations + separate Glean token for Indexing API operations User Roles and Permissions ​ Understanding who can create what type of authentication tokens: Role Client API OAuth Client API Tokens Indexing API Tokens Super Admin Configure for all Create any token Create any token Admin Configure for all Create for any user Cannot create API Token Creator Cannot configure Create for self only Cannot create Security Best Practices ​ Regardless of which authentication method you choose: Store tokens securely - Never commit tokens to version control Use environment variables for token storage in applications Implement token rotation for long-running applications Monitor token usage through Glean's admin console Use minimal scopes when creating Glean tokens Implement proper error handling for authentication failures Need Help? ​ Community : Join discussions at community.glean.com Support : Contact your Glean administrator for token creation access Documentation : Detailed implementation guides linked above Next Steps ​ Determine your use case : Client API, Indexing API, or both? Choose authentication method : OAuth (Client API) or Glean tokens Follow the implementation guide : Use the links above for detailed setup instructions Test your integration : Verify authentication works before building your application Edit this page Previous Key Terms Next Rate Limits Finding Your Glean Instance How to Find Your Instance Example Usage in APIs API Types and Implementation Guides Authentication Methods OAuth Authentication (Recommended) Glean-Issued Tokens Quick Decision Guide User Roles and Permissions Security Best Practices Need Help? Next Steps",
      "topics": [
        "authentication",
        "getting-started",
        "api-clients"
      ],
      "description": "This page provides an overview of Glean's authentication methods for accessing its APIs, explaining the differences between OAuth and Glean-issued tokens, which APIs they support, and guidance on choosing the right method based on use case. It also covers how to find your Glean instance, user roles, permissions, and security best practices for API integration."
    },
    "https://developers.glean.com/api/client-api/shortcuts/overview": {
      "content": "Client API Reference Shortcuts Overview Shortcuts API The Shortcuts API enables you to create and manage search shortcuts that provide quick access to frequently used queries and resources. Build custom shortcuts that help users navigate to important content and perform common searches more efficiently. Use Cases Quick Access Links Create shortcuts that instantly navigate users to frequently accessed documents, dashboards, and resources without complex searches. Saved Searches Enable users to save and quickly re-execute common search queries with predefined filters and parameters. Workflow Optimization Streamline user workflows by providing one-click access to routine searches and frequently needed information. API Endpoints Method Endpoint Purpose POST /rest/api/v1/createshortcut Create shortcut Create a user-generated shortcut that contains an alias and destination URL. POST /rest/api/v1/deleteshortcut Delete shortcut Delete an existing user-generated shortcut. POST /rest/api/v1/getshortcut Read shortcut Read a particular shortcut's details given its ID. POST /rest/api/v1/listshortcuts List shortcuts List shortcuts editable/owned by the currently authenticated user. POST /rest/api/v1/updateshortcut Update shortcut Updates the shortcut with the given ID. Edit this page Previous Search Next Create shortcut",
      "topics": [
        "client-api",
        "search",
        "automation"
      ],
      "description": "The page documents the Shortcuts API, which allows developers to create, manage, and retrieve search shortcuts that provide quick access to frequent queries and resources, improving user efficiency and workflow navigation."
    },
    "https://developers.glean.com/api/client-api/agents/overview": {
      "content": "Client API Reference Agents Overview On this page Agents API Overview The Agents API provides programmatic control over Glean agents, enabling you to build, deploy, and manage AI agents across your organization. This API allows you to integrate Glean's agent capabilities directly into your applications and workflows. Use Cases Agent Discovery Search and retrieve available agents in your deployment to understand what capabilities are available for integration. Agent Execution Create and manage agent runs with streaming or blocking responses for real-time chat interfaces and batch processing. Schema Inspection Examine agent input and output schemas for integration planning and validation in your applications. Real-time Integration Stream agent responses to chat interfaces and applications for immediate user feedback and interaction. External Application Integration Embed Glean agents into your existing systems and workflows for seamless AI-powered assistance. API Endpoints Method Endpoint Purpose POST /rest/api/v1/agents/runs/stream Create an agent run and stream the response Executes an [agent](https://developers.glean.com/agents/agents-api) run and returns the result as a stream of server-sent events (SSE). POST /rest/api/v1/agents/runs/wait Create an agent run and wait for the response Executes an [agent](https://developers.glean.com/agents/agents-api) run and returns the final response. POST /rest/api/v1/agents/search Search agents Search for [agents](https://developers.glean.com/agents/agents-api) by agent name. GET /rest/api/v1/agents/{agent_id} Retrieve an agent Returns details of an [agent](https://developers.glean.com/agents/agents-api) created in the Agent Builder. GET /rest/api/v1/agents/{agent_id}/schemas List an agent's schemas Return [agent](https://developers.glean.com/agents/agents-api)'s input and output schemas. You can use these schemas to detect changes to an agent's input or output structure. Agent Builder Integration ​ Agents are created and configured through Glean's Agent Builder interface. The API provides programmatic access to these user-created agents. Finding Agent IDs ​ To use an agent programmatically, you'll need its Agent ID. You can find this in the Agent Builder URL: The Agent ID appears in the URL path: /admin/agents/{agentId} Protocol Compatibility ​ The Agents API implements a subset of the LangChain Agent Protocol , specifically: Agents : Agent discovery and metadata Runs : Agent execution and run management This ensures compatibility with any agent runtime that supports this standard protocol. Authentication & Setup ​ Before using the Agents API, ensure you have: API Token : A user-scoped API token with agents scope Agent Access : Permissions to access the agents you want to use Base URL : Your organization's Glean instance URL Common Integration Patterns ​ Streaming Responses ​ For real-time chat interfaces, use the streaming endpoints to provide immediate feedback: const response = await fetch ( '/agents/agent-123/runs' , { method : 'POST' , headers : { 'Authorization' : 'Bearer your-token' } , body : JSON . stringify ( { query : 'What is our vacation policy?' , stream : true } ) } ) ; const reader = response . body . getReader ( ) ; // Process streaming chunks... Batch Processing ​ For bulk operations, use the blocking endpoints to process multiple queries: import asyncio from glean . api_client import Glean async def process_queries ( queries ) : with Glean ( api_token = \"your-token\" , instance = \"your-org\" ) as client : tasks = [ client . agents . create_and_wait_run ( agent_id = \"agent-123\" , query = query ) for query in queries ] return await asyncio . gather ( * tasks ) Next Steps ​ Browse the API endpoint documentation above for detailed request/response schemas Check out the Building Agents guide for different ways to create agent-powered applications Review authentication requirements for API access Edit this page Previous Report client activity Next Retrieve an agent Agent Builder Integration Finding Agent IDs Protocol Compatibility Authentication & Setup Common Integration Patterns Streaming Responses Batch Processing Next Steps",
      "topics": [
        "agents",
        "api-clients",
        "client-api"
      ],
      "description": "This page provides a reference for the Client API's Agents endpoints, detailing how to programmatically discover, execute, and manage AI agents within Glean. It covers use cases like streaming responses, batch processing, schema inspection, and integration with external applications, along with authentication and common implementation patterns."
    },
    "https://developers.glean.com/api/client-api/answers/overview": {
      "content": "Client API Reference Answers Overview Answers API The Answers API enables you to create, manage, and retrieve user-generated answers to frequently asked questions. These answers help build a comprehensive knowledge base that improves search results and provides instant responses to common queries within your organization. Use Cases Knowledge Base Creation Build and maintain a comprehensive repository of questions and answers to help users find information quickly and efficiently. FAQ Management Create, update, and organize frequently asked questions with detailed answers to reduce support tickets and improve self-service. Search Enhancement Improve search results by providing curated answers that appear prominently when users search for related topics. API Endpoints Method Endpoint Purpose POST /rest/api/v1/createanswer Create Answer Create a user-generated Answer that contains a question and answer. POST /rest/api/v1/deleteanswer Delete Answer Delete an existing user-generated Answer. POST /rest/api/v1/editanswer Update Answer Update an existing user-generated Answer. POST /rest/api/v1/getanswer Read Answer Read the details of a particular Answer given its ID. POST /rest/api/v1/listanswers List Answers List Answers created by the current user. Edit this page Previous Update Announcement Next Create Answer",
      "topics": [
        "client-api",
        "answers",
        "knowledge-base"
      ],
      "description": "This page provides reference documentation for the Answers API, which allows developers to create, manage, and retrieve user-generated answers to frequently asked questions. Its main purpose is to support knowledge base creation, FAQ management, and search enhancement through programmatic access to Q&A content."
    },
    "https://developers.glean.com/changelog": {
      "content": "Get Started Changelog Changelog Keep up with the latest changes and updates to Glean's developer platform. All API Documentation MCP SDK Website June 17 2025 OAuth for Remote MCP Server (Private Beta) You can now use the Device Authorization Flow with the same SSO provider configured in Glean to authenticate users connecting their clients to Glean’s remote MCP server. See here for setup instructions Note: OAuth is also enabled for the local MCP server. June 6 2025 Go API Client v0.6.0 Breaking Changes: Updated minimum go version to 1.22 (from 1.20). May 31 2025 Updates to API Reference Code Snippets Update the generated code snippets that are displayed throughout the Client API Reference and Indexing API Reference docs to include the required instance parameter in the API client constructor. May 31 2025 Python API Client v0.6.0 - Breaking Changes The Python API client now uses a namespaced package structure. All imports must be updated from glean to glean.api_client . Read more What Changed Import paths have changed from from glean import ... to from glean.api_client import ... This affects all classes including Glean , models , and other API components Migration Required Before: from glean import Glean\nfrom glean import models\nfrom glean.models import Something\nfrom glean.exceptions import ApiError After: from glean.api_client import Glean\nfrom glean.api_client import models\nfrom glean.api_client.models import Something\nfrom glean.api_client.exceptions import ApiError Automated Migration Use ast-grep (a structural search and replace tool) to automatically update your Python code: # First, update imports from glean submodules (e.g., from glean.models import ...)\nast-grep --update-all \\\n  --pattern 'from glean.$SUBMODULE import $$REST' \\\n  --rewrite 'from glean.api_client.$SUBMODULE import $$REST' \\\n  --lang python \\\n  path/to/your/code\n\n# Then, update basic glean imports (e.g., from glean import ...)\nast-grep --update-all \\\n  --pattern 'from glean import $$REST' \\\n  --rewrite 'from glean.api_client import $$REST' \\\n  --lang python \\\n  path/to/your/code\n\n# Finally, fix any double-nesting that may have occurred\nast-grep --update-all \\\n  --pattern 'from glean.api_client.api_client import $$REST' \\\n  --rewrite 'from glean.api_client import $$REST' \\\n  --lang python \\\n  path/to/your/code Manual Steps If you prefer to update manually, search for all instances of: from glean import → from glean.api_client import from glean. (but not glean.api_client) → from glean.api_client. Compatibility This change affects all Python API client users No functional changes to the API itself - only import paths Ensure you're using the latest version of the Python API client package May 27 2025 Run agent API bug fix in client libraries We fixed a bug that caused Run Agent Wait for Output ( /agents/run/wait ) to return empty responses when used with the API Client libraries. Read more We also fixed a bug that produced non-SSE compliant output when using the Run Agent Stream Output ( /agents/run/stream ) endpoint. May 27 2025 Remote MCP Server (private beta) With Glean’s remote MCP server , you can access Glean from MCP clients like Claude Desktop, Cursor, or Goose. Your Glean admin can enable a remote MCP server to expose Glean agents and tools. To join the MCP Server private beta, contact your Glean account team. May 23 2025 New Features for Tools and Agents API, API Clients, MCP New Features: Client REST API New endpoint: GET /tools/list New endpoint: POST /tools/call API Clients - Added support for the new GET /tools/list and POST /tools/call endpoints MCP Server - Support for configuring MCP server with VS Code Read more New Features: Client REST API New endpoint: GET /tools/list New endpoint: POST /tools/call API Clients - Added support for the new GET /tools/list and POST /tools/call endpoints MCP Server - Support for configuring MCP server with VS Code Bug Fixes: Update the OpenAPI Spec to properly mark the request body as a required field. This change more accurately reflects how the API handles the case when the request body is not provided. This affects the following API endpoints: - /rest/api/v1/search - /rest/api/v1/recommendations - rest/api/v1/adminsearch Breaking Changes: - Python API client: the request body OpenAPI spec change resulted in a breaking change due to language semantics. This aligns search method parameters with other methods in the API. May 16 2025 New Governance and Agent API Features New Features: Governance Admin API surface (10 endpoints) Policies: retrieve, update, list, create, download - Reports: createReport, downloadReport, status Visibility Overrides: listVisibilityOverrides, createVisibilityOverride Agent API brought up to the LangChain Agent-Protocol (Agents & Runs stages) Retrieve an Agent GET /agents/ {agent_id} Read more New Features: Governance Admin API surface (10 endpoints) Policies: retrieve, update, list, create, download - Reports: createReport, downloadReport, status Visibility Overrides: listVisibilityOverrides, createVisibilityOverride Agent API brought up to the LangChain Agent-Protocol (Agents & Runs stages) Retrieve an Agent GET /agents/ {agent_id} Retrieve an Agent's Schemas GET /agents/{agent_id}/schemas List Agents POST /agents/search Run an Agent POST /agents/runs/wait Run an Agent with streaming POST /agents/runs/stream Changes & Enhancements: Replaced legacy alpha Run-Workflow endpoints with the standard Agent-Protocol equivalents (see above). Breaking Changes: Governance endpoints introduce new permission scopes ( governance.read , governance.write ). Bug Fixes: Python API client: resolved \"unclosed async coroutine\" warning in async transport. Language-Specific Notes: Python 0.4.1 uploaded to PyPI, requires 3.8+. TypeScript 0.4.1 published, ESM, bundled types. Go module path github.com/gleaninc/glean-sdk-go/v4.1.0 . Java 0.4.1 available on Maven Central ( com.glean:glean-sdk:0.4.1 ). May 10 2025 Official API Clients Release Released official API clients for Glean in multiple languages, replacing the previous OpenAPI Generator-based SDK approach Read more Released official API clients for Glean in multiple languages, replacing the previous OpenAPI Generator-based SDK approach New API clients are now available for: Python TypeScript Go Java Updated documentation with new installation instructions and usage examples Visit the API Clients page for more information May 2 2025 New Indexing API Endpoints for Documents and Troubleshooting /updatepermissions Endpoint to update document permissions: Generally available /debug/datasource/documents Troubleshooting endpoint for batch queries: Generally available April 24 2025 Deprecate Previous Way of Processing Response Message Stream In the /chat API, the previous way of processing the response message stream has been deprecated as a result of the launch of LLM-generated citations. Read more LLM citations are interleaved within the response text fragments. Each fragment can have \"text\" or \"citation\". If streaming is set to False, the response may still be broken up into across multiple fragments. The citations interleaved inside the response do not have reference ranges (start and end indices) or snippets as they used to. For backwards compatibility, we still return a chat message with citations at the end in the old format, except there will be no startIndex and no snippets. Visit the Simple Chatbot Guide for more information and an example. April 18 2025 Deprecate x-scio-actas Header in Favor of x-glean-actas Deprecate X-Scio-ActAs in favor of X-Glean-AtAs. X-Scio-ActAs continues to work, but it is an error to specify both headers. April 17 2025 Debug Endpoints Permission Status /debug/{datasource}/document - New response field permissionIdentityStatus under status : Provides information regarding upload status of users and groups specified in document permissions Read more /debug/{datasource}/document - New response field permissionIdentityStatus under status : Provides information regarding upload status of users and groups specified in document permissions /debug/{datasource}/documents - New response field permissionIdentityStatus under status : Provides information regarding upload status of users and groups specified in document permissions March 26 2025 Update Developer Site The developer site has been updated with a new look, content, and features. Some new features include: Read more This documentation site is now open sourced on GitHub This changelog page, which gives you a single place to see updates across the platform. Ability to switch between light and dark mode. A new API Clients page with documentation for all available API Clients. A list of community projects and resources to help you get started with Glean. Each API has its own documentation page with detailed information. And much more... March 11 2025 Add MCP Added a Model Context Protocol (MCP) server implementation for Glean's search and chat capabilities on GitHub . This server provides a standardized interface for AI models to interact with Glean's content search and conversational AI features through stdio communication. Visit the Agents for more information. March 5 2025 LangChain SDK Release Added LangChain SDK for Python on GitHub . This SDK provides a simple interface for interacting with Glean's search and chat capabilities when using LangChain. Visit the Agents for more information. February 19 2025 Update Permissions Endpoint /updatepermissions Beta launch of new endpoint to update document permissions - /debug/[datasource]/documents Beta launch of new troubleshooting endpoint for batch queries May 27 2025 Run agent API bug fix in client libraries We fixed a bug that caused Run Agent Wait for Output ( /agents/run/wait ) to return empty responses when used with the API Client libraries. Read more We also fixed a bug that produced non-SSE compliant output when using the Run Agent Stream Output ( /agents/run/stream ) endpoint. May 23 2025 New Feature",
      "topics": [
        "changelog",
        "api-clients",
        "mcp"
      ],
      "description": "This page is a changelog for Glean's developer platform, documenting recent updates, new features, breaking changes, and bug fixes across APIs, SDKs, and services. It primarily covers changes to API clients, MCP server capabilities, and developer documentation improvements."
    },
    "https://developers.glean.com/api/client-api/search/overview": {
      "content": "Client API Reference Search Overview Search API The Search API is the core of Glean's search functionality, enabling you to perform powerful searches across your organization's content. Access search results, autocomplete suggestions, and personalized feeds to build custom search experiences and knowledge discovery applications. Use Cases Custom Search Interfaces Build tailored search experiences for your applications using Glean's powerful search capabilities with custom filtering and ranking. Autocomplete Integration Enhance user experience with intelligent autocomplete suggestions that help users discover relevant content as they type. Personalized Content Discovery Leverage personalized feeds and search results to surface the most relevant content for each user based on their role and interests. API Endpoints Method Endpoint Purpose POST /rest/api/v1/adminsearch Search the index (admin) Retrieves results for search query without respect for permissions. This is available only to privileged users. POST /rest/api/v1/autocomplete Autocomplete Retrieve query suggestions, operators and documents for the given partially typed query. POST /rest/api/v1/feed Feed of documents and events The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more. POST /rest/api/v1/recommendations Recommend documents Retrieve recommended documents for the given URL or Glean Document ID. POST /rest/api/v1/search Search Retrieve results from the index for the given query and filters. Edit this page Previous Delete pin Next Search the index (admin)",
      "topics": [
        "search",
        "api-clients",
        "client-api"
      ],
      "description": "This page provides an overview of Glean's Search API, detailing endpoints for searching content, retrieving autocomplete suggestions, personalized feeds, and document recommendations. It focuses on enabling developers to build custom search experiences using Glean's client API."
    },
    "https://developers.glean.com/api/client-api/activity/overview": {
      "content": "Client API Reference Activity Overview Activity API The Activity API enables you to report user activity on indexed documents and search interactions to improve Glean's search quality and relevance. By tracking document views, edits, searches, and other user interactions, this API helps Glean understand content usage patterns and optimize search results. Use Cases Document Activity Tracking Report user interactions with documents such as viewing, editing, and commenting to improve search relevance and content recommendations. Search Feedback Collection Capture search result interactions, clicks, and user feedback to enhance search quality and result ranking algorithms. Usage Analytics Gather comprehensive usage data to understand content popularity, user engagement patterns, and optimize the search experience. API Endpoints Method Endpoint Purpose POST /rest/api/v1/activity Report document activity Report user activity that occurs on indexed documents such as viewing or editing. This signal improves search quality. POST /rest/api/v1/feedback Report client activity Report events that happen to results within a Glean client UI, such as search result views and clicks.  This signal improves search quality. Edit this page Previous OAuth Next Report document activity",
      "topics": [
        "client-api",
        "search",
        "insights"
      ],
      "description": "The page documents the Activity API, which allows clients to report user interactions with indexed documents and search results to improve search relevance and gather usage analytics. Its main purpose is to enhance search quality through activity tracking and feedback collection."
    },
    "https://developers.glean.com/guides/actions/overview": {
      "content": "Guides Actions Overview On this page Actions Overview Actions can supercharge your Glean Chat and help automate a lot of your work! Out of the box, Glean Chat can answer user's queries by finding and retrieving the right information from the hundreds of documents indexed with Glean. On top of this, using actions, companies can now enable Glean Chat to also perform actions on behalf of the user or answer questions based on company information not indexed with Glean. Using actions you can: Make Glean Chat perform actions by simply chatting with it, e.g. user can ask Glean Chat to create a jira ticket for a certain feature, and it will do so with the right information pre-filled. Give Glean Chat the ability to retrieve information from specific data sources that may or may not already be indexed with glean, e.g. a company database How does it work? ​ Actions can be created by anyone with an Admin or App and Action Creator role. Once the action is created, the creator can deploy the action to Glean Chat or Glean Apps. Once the action is deployed to Glean Chat:\nWhenever users chat with Glean Chat, the system will go through the list of available actions and figure out if any of them should be used to resolve this user's query. For example, if a user messages to Glean Chat - \"I need access to Salesforce\" - the Glean Chat system will go through a list of actions and find an action that best matches this user's query and then perform the action defined in that action. In this case, it would find a support ticket creation action, using which it would create a request for salesforce access with this user's information automatically filled in. For user query: \"I need access to Salesforce\", chat automatically creates a support ticket with the right assignee and information, and responds to user like this: Users can review the pre-filled information and confirm, after which the ticket will be created. How are these actions performed in an external application once the user confirms?\nThe action is performed by making requests to the APIs defined while creating the action.\nNote: Glean respects the supported authorization while making these requests. Alternatively, the action can also be deployed to Glean Apps, instead of Glean Chat. In this case, the action becomes available in the actions directory and any Glean App creator can choose to use this action in their Glean App. Then, for any user chatting with that Glean App, the chat will use the action in a similar way as described for Glean Chat above. Next Steps ​ Authentication Learn how to configure authentication for your actions Create Actions Step-by-step guide to creating your first action Examples See working examples of actions in practice FAQ Common questions and troubleshooting Edit this page Previous NVIDIA NIM Example Next Authentication How does it work? Next Steps",
      "topics": [
        "actions",
        "chat",
        "automation"
      ],
      "description": "This page provides an overview of Actions in Glean, explaining how they enable automation within Glean Chat by allowing users to perform tasks like creating tickets or retrieving unindexed data through natural language queries. It outlines how actions are created, deployed, and executed using external APIs, with optional user confirmation and proper authentication."
    },
    "https://developers.glean.com/get-started/key-terms": {
      "content": "Get Started Key Terms On this page Key Terms As you read our documentation, you may encounter terminology that is specific to Glean or has a particular meaning within the platform. Below are key definitions. Core Concepts Essential Glean platform concepts Authentication & Tokens API authentication and token types Data & Content Content sources and organization AI & Search Features AI-powered capabilities Platform Features Built-in platform functionality Development Tools APIs, SDKs, and integrations Core Concepts ​ Agent – A Glean Agent is an AI program that performs tasks on behalf of users. Built using a visual interface or natural language prompts, agents require no coding. They can be conversational (e.g., chatbots answering questions) or task-based (e.g., automating workflows like IT ticket resolution or customer responses). Client API – A RESTful API that enables developers to interact with Glean programmatically. It's used to build custom search and chat interfaces, integrate Glean into other tools, and let AI apps query enterprise knowledge using Glean's graph. Connector – A connector links Glean to enterprise data sources (e.g., Slack, Google Drive, Outlook). It ingests content and permissions so information can be indexed, searched, and surfaced through Glean's AI-powered tools. Indexing API – A RESTful API that allows organizations to push custom content into Glean's search index, making it accessible for search and generative AI applications. Web SDK – A set of JavaScript libraries and UI components for embedding Glean's search and chat directly into websites or internal tools. It allows fast, customizable integration of core Glean functionality. MCP Server – An implementation of the Model Context Protocol that provides tools and resources to MCP hosts. Can be local (STDIO) or remote (SSE/HTTP). Local MCP Server – An MCP server that runs locally using STDIO communication, typically self-hosted on your own infrastructure. Remote MCP Server – An MCP server that runs remotely and communicates via SSE (Server-Sent Events) or HTTP protocols, often cloud-hosted. MCP Host – An application that connects to and manages MCP servers, coordinating tool execution and resource access. MCP Client – The component within an MCP host that handles the actual communication protocol with MCP servers. Authentication & Tokens ​ API Token – Credentials for authenticating API requests. Glean provides Client API tokens (for user-facing APIs) and Indexing API tokens (for content management). User-Scoped Token – A token tied to a specific user's permissions and data access. Global Token – An administrative token that can impersonate any user (Super Admin only). Data & Content ​ Datasource – A configured content source in Glean (e.g., Confluence, Slack, custom integrations). Index – Glean's searchable content repository where all data must be added before search/AI can access it. Collection – A curated group of documents organized around specific topics or purposes. AI & Search Features ​ Chat – Conversational AI interface for asking questions and getting insights from your enterprise data. Summarization – AI-powered feature that creates concise summaries of documents or search results. Answer – Structured Q&A entries that provide authoritative responses to common questions. Platform Features ​ Announcement – Company-wide communications distributed through Glean. Shortcut (GoLinks) – Short, memorable links that redirect to frequently accessed resources. Pin – Featured content that appears prominently in search results and recommendations. Verification – Process to ensure content accuracy and relevance over time. Insight – Analytics and metrics about content usage and search patterns. Development Tools ​ API Client – Auto-generated libraries available in Python, TypeScript, Go, and Java that provide language-specific interfaces for making HTTP requests to Glean's APIs. SDK – Higher-level libraries that provide components, UI elements, and abstractions for building applications, beyond basic API request functionality. MCP Tool – In the context of Model Context Protocol, a specific function or capability that can be invoked by MCP hosts (e.g., search, chat, document retrieval). Getting Help ​ Documentation Browse our complete documentation API Reference Detailed API specifications Support Get help from our support team Edit this page Previous Home Next Authentication Core Concepts Authentication & Tokens Data & Content AI & Search Features Platform Features Development Tools Getting Help",
      "topics": [
        "getting-started",
        "core-concepts",
        "development-tools"
      ],
      "description": "This page introduces foundational terminology and concepts for the Glean platform, helping developers understand key components like agents, APIs, connectors, and authentication. It serves as a glossary-style guide to orient users before diving into more specific documentation."
    },
    "https://developers.glean.com/libraries/api-clients": {
      "content": "Libraries API Clients Overview On this page API Clients Glean offers official API clients for several popular programming languages to help developers integrate Glean's powerful search and knowledge capabilities into their applications. These clients provide language-specific interfaces to Glean's APIs, making it easier to build custom solutions without having to handle the low-level HTTP requests. info Authentication Required : You'll need API tokens to use these libraries. Get Client API tokens for search and chat features, or Indexing API tokens for document management. tip Unified Libraries : These API clients support both Client API and Indexing API functionality. Use the same library with different tokens depending on whether you're building user-facing features (Client API) or managing document indexing (Indexing API). Choose Your Language ​ Select your preferred programming language to get started with the official Glean API client: Python Full-featured Python client with framework integrations for FastAPI, Django, and Streamlit TypeScript Type-safe client for Node.js and browser applications with React, Next.js, and Express examples Go Idiomatic Go client with concurrency patterns and framework integrations for Gin and Echo Java Enterprise-ready Java client with Spring Boot integration and reactive programming support What's Included ​ All official API clients provide: Client API Features ​ Chat API : Build conversational AI applications Search API : Integrate enterprise search capabilities Agents API : Execute pre-built agents from Agent Builder Collections API : Manage and search document collections Indexing API Features ​ Document Management : Index, update, and delete documents User Management : Manage users, groups, and permissions Datasource Configuration : Set up and configure data sources Bulk Operations : Efficient batch processing for large datasets Developer Experience ​ Type Safety : Full type definitions and IntelliSense support Error Handling : Structured error responses and retry mechanisms Framework Integration : Examples for popular web frameworks Testing Support : Mock examples and integration test patterns Documentation : Comprehensive guides with real-world examples Production Ready ​ Rate Limiting : Automatic handling with exponential backoff Timeout Control : Configurable request timeouts Connection Pooling : Efficient HTTP connection management Security : Best practices for token management Getting Started ​ Choose your language from the cards above Follow the installation instructions for your package manager Get your credentials : Client API tokens for search and chat features Indexing API tokens for document management Start building with the provided examples Alternative Integration Options ​ If you prefer not to use an API client library: Direct HTTP Requests Use Glean's REST APIs directly with your preferred HTTP library Web SDK Frontend JavaScript components for search and chat interfaces Need Help? ​ Client API Auth Authentication for search and chat Indexing API Auth Authentication for document management Agent Building Learn about building AI agents Edit this page Previous Brightspot Next Python Choose Your Language What's Included Client API Features Indexing API Features Developer Experience Production Ready Getting Started Alternative Integration Options Need Help?",
      "topics": [
        "api-clients",
        "getting-started",
        "development-tools"
      ],
      "description": "This page provides an overview of Glean's official API clients for various programming languages, detailing their features, supported APIs (Client and Indexing), and what developers can expect in terms of functionality, integrations, and tooling. It serves as a starting point for developers to integrate Glean's search, chat, and document management capabilities into their applications using language-specific libraries."
    },
    "https://developers.glean.com/api-info/client/getting-started/overview": {
      "content": "Client API Getting Started Overview On this page Client API Overview The Glean Client API enables organizations to build custom applications and interfaces that leverage Glean's search and generative AI capabilities. With this API, you can integrate Glean's powerful search, chat, and content discovery features directly into your internal tools, creating tailored workflows for your specific use cases. Key Capabilities ​ Search & Discovery Execute sophisticated searches across your organization's content with relevance ranking, faceted filtering, and contextual results Generative AI Chat Build conversational interfaces using Glean's AI that understands your organization's specific context and content Document Access Retrieve document content, metadata, activity tracking, and permissions-aware access to organizational knowledge Content Management Create and manage collections, answers, announcements, and other knowledge artifacts programmatically Common Use Cases ​ Internal Chatbots : Build AI-powered assistants that can answer questions using your organization's knowledge Custom Search Interfaces : Create specialized search experiences tailored to specific workflows or departments Knowledge Management : Automate the creation and curation of answers, collections, and other knowledge artifacts Analytics Dashboards : Build custom analytics and reporting tools using Glean's insights and activity data Workflow Integration : Embed search and AI capabilities into existing business applications Developer Workflow ​ 1 Authentication Setup Choose your authentication method based on your use case: OAuth (recommended): Best for user-facing applications requiring user permissions Glean Tokens : Suitable for server-to-server integrations or when OAuth isn't available See our Authentication Setup Guide for detailed instructions. 2 Choose Your Approach Select your development approach: Official SDKs : Use our Python, Java, NodeJS, or Go SDKs for faster development Direct REST API : Make HTTP requests directly for maximum flexibility Web SDK : Embed pre-built UI components using our Web SDK 3 Start Building Begin with core functionality using our Basic Usage Guide : Try basic search queries to understand result formats Experiment with chat endpoints for conversational features Test document retrieval and permission handling Explore content creation endpoints (collections, answers) 4 Production Considerations Prepare for production deployment: Implement proper error handling and retry logic Set up monitoring and logging for API usage Review rate limits and plan scaling Test permission scenarios thoroughly Next Steps ​ Set Up Authentication Configure OAuth or Glean tokens for your application Try Basic Usage Start with simple API calls and examples to get familiar with the API Explore Examples Follow step-by-step tutorials for common integration patterns Install API Clients Install official API Clients for faster development Support & Community ​ Documentation : Comprehensive guides and API reference available throughout this site Rate Limits : Review our rate limiting policies Backwards Compatibility : Glean provides advance notice and deprecation periods for any breaking changes Feedback : Help us improve by sharing your integration experiences and suggestions Edit this page Previous Java Next Basic Usage Key Capabilities Common Use Cases Developer Workflow Next Steps Support & Community",
      "topics": [
        "getting-started",
        "client-api",
        "development-tools"
      ],
      "description": "This page provides an introduction to the Glean Client API, outlining its key capabilities such as search, generative AI chat, document access, and content management. It guides developers through authentication, choosing an SDK or REST API approach, and starting development with best practices for production use."
    },
    "https://developers.glean.com/api-info/indexing/datasource/custom-properties": {
      "content": "Indexing API Datasource Custom Properties On this page Custom Properties In this document, we discuss how to define custom properties for a datasource and how to upload them with each document. What are custom properties? ​ Fundamentally, a custom property is any additional information that is attached to a document. These properties can be used in 3 different ways: Operators & Facets: Ability to filter documents for your search Rendering: Show useful information in the rendering of the search result Searchability and Ranking: Make the document more searchable and serve as a ranking signal The above 3 use-cases are explained in respective sections below. But first, we explain how you can set up and upload custom properties for your datasource. info By default, no further action is needed after configuring and uploading custom\nproperties to use them as facets/operators and to use them for improving\nsearchability. Rendering requires a few additional steps (described below). Setting up custom properties ​ warning It is highly recommended to configure custom properties first and then upload\ndocuments with the custom properties. Expect delays in indexing if it is done\nthe other way round! Before custom properties can be uploaded for documents, we must configure the datasource to accept the specific custom properties. You need to define them under an object definition. The configuration can be done in 2 ways: Admin console ( recommended ) API calls to /adddatasource Using admin console ​ 1. From the app setup page in the admin console, go to object definitions. 2. Define your object (if you haven't already) and click on property definitions. An object is any logical categorization of documents within your datasource (for example, documents/spreadsheets/slides can be objects for a drive datasource). 3. Configure the properties in the property definition modal. Using API Calls ​ Here is a sample API call for the above example: curl Python curl -X POST https://customer-be.glean.com/api/index/v1/adddatasource  \\ -H 'Authorization : Bearer <token>' \\ -H 'Content-Type : application/json' \\ -d ' { \"name\": \"testDatasource\", \"objectDefinitions\": [ { \"name\": \"Account\", \"displayLabel\": \"Account\", \"propertyDefinitions\": [ { \"name\": \"priority\", \"displayLabel\": \"Priority\", \"displayLabelPlural\": \"Priorities\", \"propertyType\": \"TEXT\", \"hideUiFacet\": false } ] } ] }' from glean_indexing_api_client . api import datasources_api from glean_indexing_api_client . model . custom_datasource_config import CustomDatasourceConfig # Please refer to the Getting Started page for more details on how to setup api_client datasource_api = datasources_api . DatasourcesApi ( api_client ) datasource_config = CustomDatasourceConfig ( name = \"testDatasource\" , object_definitions = [ ObjectDefinition ( name = \"Account\" , display_label = \"Account\" , property_definitions = [ PropertyDefinition ( name = \"priority\" , display_label = \"Priority\" , display_label_plural = \"Priorities\" , property_type = \"TEXT\" , hide_ui_facet = False ) ] , ) ] , ) try : datasource_api . adddatasource_post ( datasource_config ) except indexing_api . ApiException as e : print ( 'Exception when calling DatasourcesApi->adddatasource_post: %s\\\\n' % e ) The above API calls define a document type Account for our datasource testDatasource . For Account we define an operator called priority . This operator will become a facet if we set hideUiFacet to false .\nNote: propertyTypes \"DATE\" and \"INT\" are not faceted. Uploading custom properties ​ After you have defined the properties, you can set the properties values while uploading the document. A sample API call for /indexdocument where we illustrate how this is done is:\nHere is a sample API call for the above example: curl Python curl -X POST https://customer-be.glean.com/api/index/v1/indexdocument \\ -H 'Authorization : Bearer <token>' \\ -H 'Content-Type : application/json' \\ -d ' { \"document\": [ { \"title\": \"Account 1\", \"id\": \"Account_1\", \"customProperties\": [ { \"name\": \"priority\", \"value\": \"High\", } ] } ] }' from glean_indexing_api_client . api import documents_api from glean_indexing_api_client . model . index_document_request import IndexDocumentRequest from glean_indexing_api_client . model . document_definition import DocumentDefinition from glean_indexing_api_client . model . content_definition import ContentDefinition from glean_indexing_api_client . model . user_reference_definition import ( UserReferenceDefinition , ) from glean_indexing_api_client . model . document_permissions_definition import ( DocumentPermissionsDefinition , ) request = IndexDocumentRequest ( # DocumentDefinition has many fields, we show the usage of a few basic ones. document = DocumentDefinition ( title = 'Account 1' , id = 'Account_1' , custom_properties = [ CustomProperty ( name = 'priority' , value = 'High' ) ] ) ) # Please refer to the Getting Started page for more details on how to setup api_client documents_api = documents_api . DocumentsApi ( api_client ) try : documents_api . indexdocument_post ( request ) except indexing_api . ApiException as e : print ( \"Exception when calling DocumentsApi->indexdocument_post: %s\\n\" % e ) In the above API call we set the value for the custom property Priority as High for the document Account_1. Operators and Facets ​ What are operators? ​ Operators are a powerful way to filter information in Glean. In the above example we use the operators app: and owner: with query Glean . This tells Glean to only look for documents which match “Glean” and belong to app:drive and have owner:”Steve Smith” . This allows you to find the relevant information faster. What are Facets? ​ Facets are special kinds of operators which are shown as visual filters in the Glean UI. You can find them on the right hand side of the search result page. This removes the burden of remembering the operators and gives you a nice and interactive way of filtering results. info Glean also has a default faceting behavior. Facets are automatically created of the same name for the following document fields if they are set for a document: author owner tags updatedAt objectType Example ​ Once you follow the steps above in defining custom properties and uploading them for a document, you should be able to use the priority operator and see it as a facet! info If you wish to hide the facet from showing up in the UI, you may select the 'Hide UI Facet' option in the admin console for the property (or) set hideUiFacet to true in the API call. Rendering ​ Apart from the above mentioned steps for configuring and uploading custom properties, if you would like to show custom properties in the search result rendering - the following 2 steps are required: In the UI options for the custom property, select Search Result (screenshot below) (or) set uiOptions for the custom property in the API call to SEARCH_RESULT . Contact Glean support to show the custom property to the search result as per your preference. An example is shown below. For more details on rendering of search result refer here warning If you have already uploaded documents with a custom property, before setting the UI options for the property to include the Search result - please expect a delay (could be multiple hours, depending on the volume of documents) before the documents' properties are visible in the search results. To propagate this update quicker - it is recommended to re-upload the documents (or) call the /processalldocuments endpoint for the datasource. Searchability and Ranking ​ All custom properties are automatically used to enrich the document in the index - thereby improving searchability and ranking. For example, if we have a ticketing datasource and include a ticket ID as a custom property - we can then search by the ticket ID to fetch the relevant ticket (without requiring it to be in the title or the body!). Special property: country ​ In addition to general ranking improvements, a custom property named country has special behavior. info If you set a custom property with name: \"country\" , its value is used as a ranking signal to personalize results based on the searcher's location. Acceptable values: ISO 3166-1 two-letter (alpha-2) or three-letter (alpha-3) country codes (for example, US or USA ). Country names are also accepted, but ISO codes are preferred. Usage: add {\"name\": \"country\", \"value\": \"<ISO code or country name>\"} to a document's customProperties . Edit this page Previous Token Rotation Next Test Datasource What are custom properties? Setting up custom properties Using admin console Using API Calls Uploading custom properties Operators and Facets What are operators? What are Facets? Example Rendering Searchability and Ranking Special property: country",
      "topics": [
        "datasources",
        "indexing-api",
        "documents"
      ],
      "description": "This page explains how to define and use custom properties for documents within a datasource using the Indexing API, including configuration, uploading, and their use in filtering (operators/facets), rendering in search results, and improving searchability and ranking."
    },
    "https://developers.glean.com/api-info/indexing/debugging/datasource-status": {
      "content": "Indexing API Debugging Datasource Status On this page Datasource Status Gather information about the datasource's overall status. Sample Request ​ cURL Python curl -X POST https://customer-be.glean.com/api/index/v1/debug/gleantest/status \\ -H 'Authorization: Bearer <token>' from glean_indexing_api_client . api import troubleshooting_api from pprint import pprint # Please refer to the Getting Started page for more details on how to setup api_client troubleshoot_api = troubleshooting_api . TroubleshootingApi ( api_client ) try : api_response = troubleshoot_api . debug_datasource_status_post ( \"gleantest\" ) pprint ( api_response ) except glean_indexing_api_client . ApiException as e : print ( \"Exception when calling TroubleshootingApi->debug_datasource_status_post: %s\\n\" % e ) Sample Response ​ { \"documents\" : { \"bulkUploadHistory\" : [ { \"uploadId\" : \"upload-id-1234567890\" , \"startTime\" : \"2024-02-08T12:00:00.000Z\" , \"endTime\" : \"2024-02-08T12:05:00.000Z\" , \"status\" : \"SUCCESSFUL\" } ] , \"counts\" : { \"uploaded\" : [ { \"objectType\" : \"Article\" , \"count\" : 15 } ] , \"indexed\" : [ { \"objectType\" : \"Article\" , \"count\" : 15 } ] } , \"processingHistory\" : [ { \"startTime\" : \"2024-02-08T12:00:00.000Z\" , \"endTime\" : \"2024-02-08T12:00:05.000Z\" } ] } , \"identity\" : { \"processingHistory\" : [ { \"startTime\" : \"2024-02-08T12:00:00.000Z\" , \"endTime\" : \"2024-02-08T12:05:00.000Z\" } ] , \"users\" : { \"bulkUploadHistory\" : [ { \"uploadId\" : \"upload-users-1234567890\" , \"startTime\" : \"2024-02-08T12:00:00.000Z\" , \"endTime\" : \"2024-02-08T12:05:00.000Z\" , \"status\" : \"SUCCESSFUL\" } ] , \"counts\" : { \"uploaded\" : 5 } } , \"groups\" : { \"bulkUploadHistory\" : [ ] , \"counts\" : { \"uploaded\" : 3 } } , \"memberships\" : { \"bulkUploadHistory\" : [ ] , \"counts\" : { \"uploaded\" : 2 } } } } Edit this page Previous Datasource Config Next Datasource Document Sample Request Sample Response",
      "topics": [
        "troubleshooting",
        "indexing-api",
        "datasources"
      ],
      "description": "This page provides guidance on using the Indexing API to debug and retrieve the status of a datasource, including document and identity processing history, upload counts, and bulk upload details. It helps developers monitor and troubleshoot data synchronization and indexing issues."
    },
    "https://developers.glean.com/api-info/indexing/debugging/document-count": {
      "content": "Indexing API Debugging Document Count On this page Document Count Get the count of documents in a datasource, optionally filtered by object type. Sample Request ​ cURL Python curl -X POST https://customer-be.glean.com/api/index/v1/getdocumentcount -H 'Authorization : Bearer <token>' -H 'Content-Type : application/json' \\ -d '{ \"datasource\": \"gleantest\", \"objectType\": \"Article\" }' from glean_indexing_api_client . api import troubleshooting_api from glean_indexing_api_client . model . get_document_count_request import GetDocumentCountRequest from glean_indexing_api_client . model . get_document_count_response import GetDocumentCountResponse from pprint import pprint # Please refer to the Getting Started page for more details on how to setup api_client troubleshoot_api = troubleshooting_api . TroubleshootingApi ( api_client ) get_document_count_request = GetDocumentCountRequest ( datasource = \"gleantest\" , object_type = \"Article\" ) try : api_response = troubleshoot_api . getdocumentcount_post ( get_document_count_request ) pprint ( api_response ) except glean_indexing_api_client . ApiException as e : print ( \"Exception when calling TroubleshootingApi->getdocumentcount_post: %s\\n\" % e ) Sample Response ​ { \"count\" : 15 } Edit this page Previous Document Access Next Activity Sample Request Sample Response",
      "topics": [
        "indexing-api",
        "troubleshooting",
        "datasources"
      ],
      "description": "This page describes how to use the Indexing API to retrieve the count of documents in a datasource, with optional filtering by object type, and provides code examples for making the request using cURL and Python."
    },
    "https://developers.glean.com/api-info/indexing/debugging/datasource-user": {
      "content": "Indexing API Debugging Datasource User On this page Datasource User Gives various information that would help in debugging issues related to a particular user. For example, it gives information about the user's permissions, groups, memberships, etc. Sample Request ​ cURL Python curl -X POST https://customer-be.glean.com/api/index/v1/debug/gleantest/user -H 'Authorization : Bearer <token>' \\ -H 'Content-Type : application/json' \\ -d '{ \"email\": \"user1@example.com\" }' from glean_indexing_api_client . api import troubleshooting_api from glean_indexing_api_client . model . debug_user_request import DebugUserRequest from glean_indexing_api_client . model . debug_user_response import DebugUserResponse from pprint import pprint # Please refer to the Getting Started page for more details on how to setup api_client troubleshoot_api = troubleshooting_api . TroubleshootingApi ( api_client ) debug_user_request = DebugUserRequest ( email = \"user1@example.com\" ) try : api_response = troubleshoot_api . debug_datasource_user_post ( \"gleantest\" , debug_user_request ) pprint ( api_response ) except glean_indexing_api_client . ApiException as e : print ( \"Exception when calling TroubleshootingApi->debug_datasource_user_post: %s\\n\" % e ) Sample Response ​ { \"userStatus\" : { \"uploadStatus\" : \"UPLOADED\" , \"uploadTime\" : \"2024-02-08T12:00:00.000Z\" } , \"groups\" : [ { \"id\" : \"group1\" , \"name\" : \"Engineering\" } ] , \"memberships\" : [ { \"groupId\" : \"group1\" , \"userId\" : \"user1@example.com\" } ] } Edit this page Previous Datasource Document Next Document Access Sample Request Sample Response",
      "topics": [
        "troubleshooting",
        "indexing-api",
        "permissions"
      ],
      "description": "This page provides documentation for an Indexing API endpoint used to debug user-related issues, offering details such as user permissions, group memberships, and upload status. It includes sample requests and responses in cURL and Python to help developers diagnose user data problems."
    },
    "https://developers.glean.com/api-info/indexing/datasource/rendering-search-results": {
      "content": "Indexing API Datasource Rendering Search Results On this page Rendering Search Results The rendering behavior of the search results from a datasource are determined by 3 ways (in increasing order of preference): Default rendering behavior, based on the datasourceCategory (no further action required) Customized render config based on requirements (please contact glean support to set this up) Re-using the rendering configuration of another datasource (eg. gdrive) Default rendering behavior based on datasource category ​ Datasource categories are set for a datasource during the data source setup phase (or /adddatasource endpoint). The field is typically set for all custom data sources. For information on the meaning of each category, refer to this document: Selecting datasource category With no further action required from the developer, we will aim to render results from the datasource of the specified datasource categories with information typically surfaced in results from that category. We have specific default rendering behaviour for the following datasource categories: PUBLISHED_CONTENT KNOWLEDGE_HUB For other categories, the rendering would be a vanilla icon + title + snippet (see screenshot below). The icon URL is fetched from the datasource config (as defined during the /adddatasource call (or) in the datasource setup page in the admin console). The snippets are generated based on the relevance between the query and the provided body text. The title is provided in the display name while indexing documents. Contact glean support to further customize rendering for your datasource (option 2). PUBLISHED_CONTENT ​ Results from datasources with the datasourceCategory set to PUBLISHED_CONTENT would include the last updated time , author and container (if any) in the meta line. KNOWLEDGE_HUB ​ Similar to PUBLISHED_CONTENT , datasources with KNOWLEDGE_HUB would include the last updated time , owner (instead of author) and container (if any) in the meta line. Datasources with the above 2 categories, typically look like the following: Customized render config based on requirements ​ info Currently, this step requires contacting glean support to get the behaviour support. Examples of requests include: I need a custom list of attributes to show up in the ‘meta line’ (ie. the line below the title) I need a different icon to show up for different object types For now, this will be setup by Glean internally - but in the future we expect to enable admins/developers to configure this themselves via the Glean admin console. Here is an example of customized rendering for a search result: The example above is for an internal job portal datasource and shows how we can add custom attributes like level, location, job role, engineering manager (as a person field). Re-using rendering configuration of another datasource ​ To do this, you can set the renderConfigPreset in the datasource config (when making /adddatasource calls or setting up a datasource via the admin console). This field can be set to the name of any datasource supported by glean (in lower case). While it is recommended to contact Glean support to help get this setup - some of the common values used for this field include: gdrive jira zendesk salesforce info If you want to go back to using the default rendering behaviour (option 1) OR\nthe custom rendering setup through option 2, you must unset the\nrenderConfigPreset in the datasource config. Edit this page Previous Category Next Datasource Config Default rendering behavior based on datasource category PUBLISHED_CONTENT KNOWLEDGE_HUB Customized render config based on requirements Re-using rendering configuration of another datasource",
      "topics": [
        "indexing-api",
        "datasources",
        "search"
      ],
      "description": "This page explains how search results from datasources are rendered in the UI, based on datasource categories, custom render configurations, or by reusing existing rendering presets. It covers the default behaviors for categories like PUBLISHED_CONTENT and KNOWLEDGE_HUB, options for customization, and how to apply rendering presets during datasource setup."
    },
    "https://developers.glean.com/api-info/indexing/debugging/document-access": {
      "content": "Indexing API Debugging Document Access On this page Document Access Check if a user has access to a document. Sample Request ​ cURL Python curl -X POST https://customer-be.glean.com/api/index/v1/checkdocumentaccess -H 'Authorization : Bearer <token>' \\ -H 'Content-Type : application/json' \\ -d '{ \"datasource\": \"gleantest\", \"objectType\": \"Article\", \"docId\": \"art123\", \"email\": \"user1@example.com\" }' from glean_indexing_api_client . api import troubleshooting_api from glean_indexing_api_client . model . check_document_access_request import CheckDocumentAccessRequest from glean_indexing_api_client . model . check_document_access_response import CheckDocumentAccessResponse from pprint import pprint # Please refer to the Getting Started page for more details on how to setup api_client troubleshoot_api = troubleshooting_api . TroubleshootingApi ( api_client ) check_document_access_request = CheckDocumentAccessRequest ( datasource = \"gleantest\" , object_type = \"Article\" , doc_id = \"art123\" , email = \"user1@example.com\" ) try : api_response = troubleshoot_api . checkdocumentaccess_post ( check_document_access_request ) pprint ( api_response ) except glean_indexing_api_client . ApiException as e : print ( \"Exception when calling TroubleshootingApi->checkdocumentaccess_post: %s\\n\" % e ) Sample Response ​ { \"hasAccess\" : true , \"reason\" : \"User is in an allowed group\" } Edit this page Previous Datasource User Next Document Count Sample Request Sample Response",
      "topics": [
        "indexing-api",
        "troubleshooting",
        "permissions"
      ],
      "description": "This page provides guidance on using the Indexing API to check whether a specific user has access to a document, including sample requests and responses in cURL and Python. It focuses on debugging document-level permissions and understanding access control for troubleshooting purposes."
    },
    "https://developers.glean.com/api-info/indexing/debugging/datasource-document": {
      "content": "Indexing API Debugging Datasource Document On this page Datasource Document Gives various information that would help in debugging issues related to a particular document. For example, it gives information about the document's upload and indexing status, the document's permissions, etc. Sample Request ​ cURL Python curl -X POST https://customer-be.glean.com/api/index/v1/debug/{datasource}/document -H 'Authorization : Bearer <token>' \\ -H 'Content-Type : application/json' \\ -d '{ \"objectType\": \"Article\", \"docId\": \"art123\" }' from glean_indexing_api_client . api import troubleshooting_api from glean_indexing_api_client . model . debug_document_request import DebugDocumentRequest from glean_indexing_api_client . model . debug_document_response import DebugDocumentResponse from pprint import pprint # Please refer to the Getting Started page for more details on how to setup api_client troubleshoot_api = troubleshooting_api . TroubleshootingApi ( api_client ) debug_document_request = DebugDocumentRequest ( datasource = \"gleantest\" , object_type = \"Article\" , doc_id = \"art123\" ) try : api_response = troubleshoot_api . debug_datasource_document_post ( debug_document_request ) pprint ( api_response ) except glean_indexing_api_client . ApiException as e : print ( \"Exception when calling TroubleshootingApi->debug_datasource_document_post: %s\\n\" % e ) Sample Response ​ { \"documentStatus\" : { \"uploadStatus\" : \"UPLOADED\" , \"indexStatus\" : \"INDEXED\" , \"uploadTime\" : \"2024-02-08T12:00:00.000Z\" , \"indexTime\" : \"2024-02-08T12:05:00.000Z\" } , \"permissions\" : { \"allowAnonymousAccess\" : false , \"allowedUsers\" : [ { \"email\" : \"user1@example.com\" } , { \"email\" : \"user2@example.com\" } ] , \"allowedGroups\" : [ { \"id\" : \"group1\" } ] , \"deniedUsers\" : [ ] , \"deniedGroups\" : [ ] } } Edit this page Previous Datasource Status Next Datasource User Sample Request Sample Response",
      "topics": [
        "indexing-api",
        "troubleshooting",
        "datasources"
      ],
      "description": "This page provides guidance on using the Indexing API to debug document-level issues, offering details such as upload and indexing status, permissions, and timestamps for a specific document within a datasource."
    },
    "https://developers.glean.com/api/client-api/verification/verify": {
      "content": "Client API Reference Verification Update verification Update verification POST /rest/api/v1/verify Verify documents to keep the knowledge up to date within customer corpus. Request ​ Responses ​ 200 400 401 403 429 OK Invalid request Not Authorized Document does not exist, does not support verification or user cannot access document Too Many Requests Previous List verifications Next Overview",
      "topics": [
        "verification",
        "client-api"
      ],
      "description": "This page provides reference documentation for the Client API's verification endpoint, specifically the POST /rest/api/v1/verify operation, which allows developers to verify documents and ensure the knowledge corpus remains up to date. It outlines request structure, responses, and error codes related to document verification."
    },
    "https://developers.glean.com/api/client-api/tools/execute-the-specified-tool": {
      "content": "Client API Reference Tools Execute the specified tool Execute the specified tool POST /rest/api/v1/tools/call beta This endpoint is in Beta. Expect changes and instability. Execute the specified tool with provided parameters Request ​ Responses ​ 200 400 401 404 429 Successful operation Bad Request Unauthorized Not Found Too Many Requests Previous List available tools Next Overview",
      "topics": [
        "client-api",
        "actions"
      ],
      "description": "This page documents the Client API endpoint for executing a specific tool, including request details, parameters, and possible responses. It focuses on tool execution as part of the available API actions."
    },
    "https://developers.glean.com/api/client-api/verification/listverifications": {
      "content": "Client API Reference Verification List verifications List verifications POST /rest/api/v1/listverifications Returns the information to be rendered in verification dashboard. Includes information for each document owned by user regarding their verifications. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Create verification Next Update verification",
      "topics": [
        "verification",
        "client-api"
      ],
      "description": "This page provides API reference documentation for listing verifications in the verification dashboard, including details on endpoint usage, request structure, and response codes. It focuses on retrieving verification information for documents owned by a user via the Client API."
    },
    "https://developers.glean.com/api/client-api/verification/addverificationreminder": {
      "content": "Client API Reference Verification Create verification Create verification POST /rest/api/v1/addverificationreminder Creates a verification reminder for the document. Users can create verification reminders from different product surfaces. Request ​ Responses ​ 200 400 401 403 429 OK Invalid request Not Authorized Document does not exist, does not support verification or user cannot access document Too Many Requests Previous Overview Next List verifications",
      "topics": [
        "verification",
        "client-api"
      ],
      "description": ""
    },
    "https://developers.glean.com/libraries/web-sdk/components/modal-search": {
      "content": "Libraries Web SDK Components Modal Search On this page Modal Search Glean's Modal Search provides a seamless search experience by overlaying a search interface on your existing page. This solution requires minimal implementation effort - just a single line of code to get started. Implementation Guide ​ Adding the JavaScript Client ​ Include the JavaScript library in your page's <head> section. Replace GLEAN_APP_DOMAIN with your company's Glean web app domain (typically app.glean.com or your-company.glean.com for custom subdomains). info The Glean web app domain differs from your company's Glean backend domain\n(which typically follows the format your-company-be.glean.com ). HTML < script defer src = \" https://{GLEAN_APP_DOMAIN}/embedded-search-latest.min.js \" > </ script > Basic Setup ​ To implement Modal Search, use the attach method to connect the Glean SDK to a search input element on your page: Implementation < script > addEventListener ( 'DOMContentLoaded' , ( ) => { ' ' } { GleanWebSDK . attach ( document . getElementById ( 'search-box' ) ) } ) </ script > Customization Options ​ Component API ​ The Modal Search implementation can be customized using the GleanWebSDK.attach API. This interface provides options for tailoring the search experience to your specific needs. Theming ​ You can customize the appearance of the Modal Search using SearchBoxCustomizations . The theming system is regularly expanded with additional options based on customer needs. Implementation Example ​ Explore a complete working implementation of the Modal Search component in our interactive demo: Edit this page Previous Autocomplete Next Sidebar Implementation Guide Adding the JavaScript Client Basic Setup Customization Options Component API Theming Implementation Example",
      "topics": [
        "web-sdk",
        "search",
        "development-tools"
      ],
      "description": "This page describes Glean's Modal Search feature, which allows developers to add a lightweight, overlay-based search interface to their web applications using a single line of JavaScript. It covers implementation steps, customization options, and theming through the Web SDK."
    },
    "https://developers.glean.com/libraries/web-sdk/components/autocomplete": {
      "content": "Libraries Web SDK Components Autocomplete On this page Autocomplete Create a full-featured search experience by integrating Glean's Autocomplete and Search Results components. This approach enables deep UI customization while maintaining straightforward implementation. Implementation Guide ​ Adding the JavaScript Client ​ Include the JavaScript library in your page's <head> section. Replace GLEAN_APP_DOMAIN with your company's Glean web app domain (typically app.glean.com or your-company.glean.com for custom subdomains). info The Glean web app domain differs from your company's Glean backend domain\n(which typically follows the format your-company-be.glean.com ). HTML < script defer src = \" https://{GLEAN_APP_DOMAIN}/embedded-search-latest.min.js \" > </ script > Component Setup ​ The implementation requires two container elements with specific CSS properties and event handling to coordinate the search experience: Create container elements with the following CSS properties: position: relative display: block Appropriate sizing and positioning Implement the search functionality with event handling: Search Implementation let currentQuery ; function renderSearchResults ( ) { const resultsElement = this . template . querySelector ( 'search-results' ) ; window . GleanWebSDK . renderSearchResults ( resultsElement , { onSearch : ( query ) => { currentQuery = query ; renderSearchBox ( ) ; } , query : currentQuery } ) ; } function renderSearchBox ( ) { const autocompleteElement = this . template . querySelector ( 'search-box' ) ; window . GleanWebSDK . renderSearchBox ( autocompleteElement , { onSearch : ( query ) => { currentQuery = query ; renderSearchResults ( ) ; } , query : currentQuery } ) ; } renderSearchBox ( ) ; Customization Options ​ Component APIs ​ The implementation provides extensive customization options through two primary APIs: SearchBox API Documentation Search Results API Documentation Theming ​ Customize the appearance using SearchBoxCustomizations . The theming system is regularly expanded with additional options based on customer needs. Implementation Example ​ View a complete working implementation of the Autocomplete with Search components in our interactive demo: Edit this page Previous Glean Chat Next Modal Search Implementation Guide Adding the JavaScript Client Component Setup Customization Options Component APIs Theming Implementation Example",
      "topics": [
        "web-sdk",
        "search",
        "development-tools"
      ],
      "description": "This page provides guidance on implementing Glean's Autocomplete and Search Results components using the Web SDK to create a customizable search experience. It covers setup, JavaScript integration, event handling, and theming options for developers building search interfaces."
    },
    "https://developers.glean.com/libraries/web-sdk/guides/react": {
      "content": "Libraries Web SDK Guides React React The following is an example usage of the inline components from within React.\nThe imports used are custom, but should be self-explanatory in context. GleanWebSDKGallery.tsx styles/GleanWebSDKGalleryStyles.ts import { useEffect , useRef , useState } from 'react' ; import { useSelector } from 'react-redux' ; import injectScript from 'core/lib/injectScript' ; import { QueryParam } from 'core/lib/QueryParam' ; import { useLazyThunk } from 'core/redux/hooks' ; import { selectBasePath } from 'core/redux/selectors/auth' ; import { CreateAuthTokenResponse } from 'core/services/query_endpoint/models' ; import { Theme } from 'embedded_search/Theme' ; import { useQueryParam } from 'web/common/lib/hooks' ; import { getWebAppUrl } from 'web/routing/lib/paths' ; import styles from './styles/GleanWebSDKStyles' ; const loginThunks = ( ) => import ( 'web/login/lib/thunks' ) ; const light : Theme = { borderLight : '#eaebed' , hover : '#f5fcfc' , primaryHighlight : '#087d76' , primaryHover : '#1ca99e' , selected : '#e8fcfb' , textPrimary : '#1b2126' , textSecondary : '#71747d' , visited : '#7400be' , } ; interface GleanWebSDKProps { authToken ? : CreateAuthTokenResponse ; } const GleanSearch = ( { authToken } : GleanWebSDKProps ) => { const [ query , setQuery ] = useQueryParam ( QueryParam . QUERY ) ; const [ datasource ] = useQueryParam ( QueryParam . TAB ) ; const elementRef = useRef < HTMLDivElement > ( null ) ; const basePath = useSelector ( selectBasePath ) ; useEffect ( ( ) => { if ( ! elementRef . current ) return ; window . GleanWebSDK . renderSearchBox ( elementRef . current , { authToken , backend : basePath , datasource , onSearch : setQuery , query , searchBoxCustomizations : { borderRadius : 10 , boxShadow : 'none' , horizontalMargin : 0 , placeholderText : 'Search for anything (Beta)' , verticalMargin : 0 , } , theme : { light } , } ) ; } , [ authToken , basePath , datasource , query , setQuery ] ) ; return < div ref = { elementRef } style = { styles . searchBox } /> ; } ; const GleanSearchResultsPage = ( { authToken } : GleanWebSDKProps ) => { const [ query , setQuery ] = useQueryParam ( QueryParam . QUERY ) ; const [ datasource , setDatasource ] = useQueryParam ( QueryParam . TAB ) ; const elementRef = useRef < HTMLDivElement > ( null ) ; const basePath = useSelector ( selectBasePath ) ; useEffect ( ( ) => { if ( ! elementRef . current ) return ; window . GleanWebSDK . renderSearchResults ( elementRef . current , { authToken , backend : basePath , datasource , onDatasourceChange : setDatasource , onSearch : setQuery , query , theme : { light } , } ) ; } , [ authToken , basePath , datasource , query , setDatasource , setQuery ] ) ; return < div ref = { elementRef } style = { styles . serp } /> ; } ; const GleanWebSDKGallery = ( ) => { const fetchAuthTokenThunk = useLazyThunk ( loginThunks , 'fetchAuthToken' ) ; const [ authToken , setAuthToken ] = useState < CreateAuthTokenResponse | undefined > ( ) ; const [ isLoading , setIsLoading ] = useState ( true ) ; useEffect ( ( ) => { ( async ( ) => { setAuthToken ( await fetchAuthTokenThunk ( ) ) ; } ) ( ) ; injectScript ( { id : 'embedded_search' , src : getWebAppUrl ( '/embedded-search-latest.min.js' ) , } ) . then ( ( ) => setIsLoading ( false ) ) ; } , [ fetchAuthTokenThunk ] ) ; if ( isLoading ) return null ; return ( < div style = { styles . container } > < GleanSearch authToken = { authToken } /> < GleanSearchResultsPage authToken = { authToken } /> </ div > ) ; } ; export default GleanWebSDKGallery ; import * as Fonts from 'core/theme/Fonts.css' ; import Stylesheet from 'core/types/Stylesheet' ; export default Stylesheet ( { container : { padding : 40 , } , group : { marginBottom : 20 , } , label : { ... Fonts . mediumHeader , } , } ) ; Edit this page Previous Recommendations Next Zendesk",
      "topics": [
        "web-sdk",
        "development-tools"
      ],
      "description": "This page provides a React implementation example for integrating Glean's Web SDK, demonstrating how to render search components like the search box and results page using custom React hooks and state management. The main purpose is to guide developers on embedding Glean's search functionality into React applications."
    },
    "https://developers.glean.com/libraries/web-sdk/3rd-party-cookies": {
      "content": "Libraries Web SDK Third-Party Cookie Management On this page Third-Party Cookie Management Major browsers like Safari, Firefox, and Chrome (including Chromium-based browsers like Edge) have added or are planning to add restrictions to third-party cookie usage. This change entails replacing third-party cookie usage patterns by web browsers with a new partitioned cookie type or blocking them entirely. Browser Cookie Policies ​ info Google Chrome has announced plans to move towards a more privacy-focused web\nenvironment with initiatives like the Privacy Sandbox, which aims to provide\npersonalization while protecting user privacy. Google is planning to introduce\na new experience in Chrome that lets people make an informed choice that\napplies across their web browsing, including (but not limited to) third-party\ncookie usage. Mozilla Firefox and Apple's Safari have already implemented strict third-party cookie blocking by default: Safari uses Intelligent Tracking Prevention (ITP) to block cookies used by advertisers to track users across sites Firefox uses Enhanced Tracking Protection (ETP) for similar functionality Other Chromium-based browsers, like Microsoft Edge, are expected to follow Chrome's implementation Impact on Glean Functionality ​ warning Since Glean is embedded on customers' websites, it is classified as a\nthird-party and this change can have an impact on critical workflows. Glean's\nembedded widgets and other functionalities rely on third-party cookies for\nauthenticating users and these would be affected if third-party cookies are\nblocked. Granting Cookie Access ​ Glean has an inbuilt flow that requests users for third-party cookie access if needed. After login, you will see the following screen: To grant access: Click on \"Allow Cookies\" You will see a browser prompt: Browser prompt for third-party cookie access Click on \"Allow\" to grant Glean access to third-party cookies Glean will complete the login process successfully Frequently Asked Questions ​ How do I grant access if I accidentally clicked 'Block'? If you clicked \"Block\" when the browser asked for third-party cookie access, any subsequent click on \"Allow cookies\" will automatically be rejected. To manually grant access: Click on the cookie access icon in the top-right corner of the URL address bar In the prompt, switch the glean.com toggle to \"On\": Click on \"Allow Cookies\" in the Glean UI The login should complete successfully Why don't I see a prompt after clicking 'Allow Cookies'? This can occur in two scenarios: Access was previously denied or the prompt was dismissed multiple times (see solution above) The embedding iframe configuration needs to meet specific requirements: If the iframe is not sandboxed, there are no issues If sandboxed, it must include these sandbox attributes: allow-storage-access-by-user-activation allow-scripts allow-same-origin Do I need to grant access for each domain separately? Yes, cookie access is domain-specific. The duration of access varies by browser: Google Chrome/Chromium: Access persists for the current user profile Firefox: Access persists for the current user profile Safari: Access is limited to the current browser tab only Edit this page Previous Overview Next Authentication Browser Cookie Policies Impact on Glean Functionality Granting Cookie Access Frequently Asked Questions",
      "topics": [
        "web-sdk",
        "authentication",
        "development-tools"
      ],
      "description": "This page explains how third-party cookie restrictions in modern browsers affect the Glean Web SDK, particularly for user authentication, and outlines the built-in mechanisms and developer configurations needed to request and grant cookie access. It provides guidance on troubleshooting cookie-related issues when embedding Glean on customer websites."
    },
    "https://developers.glean.com/libraries/web-sdk/authentication": {
      "content": "Libraries Web SDK Authentication On this page Authentication Authentication ​ note Authentication involves two default steps that users must complete upon first\nusage. However, both steps can be optimized for a smoother user experience. Default Authentication Flow ​ Email Address Entry SSO Authentication Optimizing Authentication ​ You can streamline the authentication process in two ways: Skip Email Entry : Implement the backend parameter to bypass the email entry step. Skip SSO Authentication : Configure a server-to-server handshake and provide the user's auth token via Options.authToken . warning When implementing auth token authentication: You must configure an onAuthTokenRequired callback This callback handles token refresh when expiration approaches Server-to-server authentication becomes mandatory if third-party cookies are\nblocked in the user's browser Edit this page Previous Third-Party Cookie Management Next Glean Chat Authentication Default Authentication Flow Optimizing Authentication",
      "topics": [
        "web-sdk",
        "authentication"
      ],
      "description": "This page describes the authentication process for the Web SDK, including the default flow involving email entry and SSO, as well as methods to optimize authentication by skipping steps using backend parameters or auth tokens."
    },
    "https://developers.glean.com/libraries/web-sdk/components/sidebar": {
      "content": "Libraries Web SDK Components Sidebar On this page Sidebar Search The Glean Sidebar provides a unified interface that combines search capabilities, chat functionality, and contextual recommendations, all accessible from a slide-out panel on your page. Implementation Guide ​ Adding the JavaScript Client ​ Include the JavaScript library in your page's <head> section. Replace GLEAN_APP_DOMAIN with your company's Glean web app domain (typically app.glean.com or your-company.glean.com for custom subdomains). info The Glean web app domain differs from your company's Glean backend domain\n(which typically follows the format your-company-be.glean.com ). HTML < script defer src = \" https://{GLEAN_APP_DOMAIN}/embedded-search-latest.min.js \" > </ script > Basic Setup ​ Implementing the Sidebar requires a single method call to openSidebar . You can trigger this method in response to user actions, such as clicking a button: JavaScript GleanWebSDK . openSidebar ( ) ; Customization Options ​ The Sidebar component can be customized using the GleanWebSDK.openSidebar API. This interface provides options for tailoring the sidebar experience to match your application's needs. Implementation Example ​ Experience a complete working implementation of the Sidebar component in our interactive demo: Edit this page Previous Modal Search Next Recommendations Implementation Guide Adding the JavaScript Client Basic Setup Customization Options Implementation Example",
      "topics": [
        "web-sdk",
        "search",
        "chat"
      ],
      "description": "This page describes how to implement the Glean Sidebar, a UI component that integrates search, chat, and contextual recommendations into a web application using the Web SDK. It provides setup instructions, customization options, and a working example for developers."
    },
    "https://developers.glean.com/libraries/web-sdk/components/chat": {
      "content": "Libraries Web SDK Components Glean Chat On this page Glean Chat Glean Chat delivers personalized answers by integrating deep understanding of your company's content, employees, activities, and their interconnections. The system automatically tailors responses to each individual user's context and needs. Implementation Guide ​ Adding the JavaScript Client ​ First, include the JavaScript library in the <head> section of your page. Replace GLEAN_APP_DOMAIN with your company's Glean web app domain (typically app.glean.com or your-company.glean.com if you use a custom subdomain). info The Glean web app domain differs from your company's Glean backend domain\n(which typically follows the format your-company-be.glean.com ). HTML < script defer src = \" https://{GLEAN_APP_DOMAIN}/embedded-search-latest.min.js \" > </ script > Configuration and Setup ​ Create a container element with the following required CSS properties: position: relative display: block Defined width and height Render Glean Chat into your container: JavaScript window . EmbeddedSearch . renderChat ( containerElement ) ; For detailed configuration options and customizations, refer to our renderChat API documentation . Implementation Recipes ​ info AI Applications created using AI App Builder can be integrated into chat using\nthe applicationId parameter. Basic Implementation (Vanilla JavaScript) ​ Separate Pages for Chat and Search ​ This implementation creates dedicated routes for Search and Chat functionality: Search page: https://example.net/search Chat page: https://example.net/chat Implementation Details The implementation consists of separate components: - A Search page with the\nGlean Search component - A Chat page with the Glean Chat component - Automatic\nredirection to the Chat page when initiating new conversations View a complete demo of this implementation in our CodeSandbox example . Unified Page Implementation ​ This approach combines Search and Chat functionality on a single route: Single unified route: https://example.net/search Toggle between views using a mode query parameter ( search or chat ) Maintains both interfaces in one location for seamless user experience View a complete demo of this implementation in our CodeSandbox example . Edit this page Previous Authentication Next Autocomplete Implementation Guide Adding the JavaScript Client Configuration and Setup Implementation Recipes Basic Implementation (Vanilla JavaScript) Separate Pages for Chat and Search Unified Page Implementation",
      "topics": [
        "chat",
        "web-sdk",
        "development-tools"
      ],
      "description": "This page provides guidance on implementing Glean Chat using the Web SDK, including how to integrate the JavaScript library, configure the chat interface, and set up dedicated or unified search and chat experiences. It includes code examples, setup requirements, and links to further customization options."
    },
    "https://developers.glean.com/libraries/web-sdk/components/recommendations": {
      "content": "Libraries Web SDK Components Recommendations On this page Recommendations The Recommendations component provides intelligent, context-aware content suggestions while incorporating search capabilities. This component analyzes the current page content to surface relevant recommendations and enables users to perform manual searches when needed. Implementation Guide ​ Adding the JavaScript Client ​ Include the JavaScript library in your page's <head> section. Replace GLEAN_APP_DOMAIN with your company's Glean web app domain (typically app.glean.com or your-company.glean.com for custom subdomains). info The Glean web app domain differs from your company's Glean backend domain\n(which typically follows the format your-company-be.glean.com ). HTML < script defer src = \" https://{GLEAN_APP_DOMAIN}/embedded-search-latest.min.js \" > </ script > Component Setup ​ The Recommendations component requires three key implementation elements: A container element with specific styling requirements Basic HTML structure JavaScript initialization code Here's a complete implementation example: HTML Structure Component Styling Implementation < h2 > Glean Recommendations Component </ h2 > < div id = \" recommendations \" > </ div > #recommendations { display : block ; position : relative ; width : 600 px ; } addEventListener ( 'DOMContentLoaded' , ( ) => { const recommendationsContainer = document . getElementById ( 'recommendations' ) ; GleanWebSDK . renderRecommendations ( recommendationsContainer , { height : 700 , customizations : { border : '1px solid grey' , borderRadius : 4 , boxShadow : '2px 2px grey' , horizontalMargin : 3 , verticalMargin : 3 , searchBox : { placeholderText : 'Search for anything...' , searchIconUrl : 'https://picsum.photos/18' , } , } , } ) ; } ) ; Customization Options ​ The Recommendations component offers extensive customization capabilities through the RecommendationsOptions interface. Dimension Controls ​ The component's dimensions can be customized in the following ways: Height Customization Default height: 650px Override using the height option Values are specified in pixels Width Configuration Set through the container element's CSS Recommended maximum width: 800px Width adjusts automatically to container size Visual Customization ​ The component's appearance can be refined using RecommendationsBoxCustomizations : note When implementing visual customizations: - Box-shadow visibility requires\nappropriate verticalMargin and horizontalMargin settings - Margin values must\nbe positive and are applied to both sides of the component Edit this page Previous Sidebar Next React Implementation Guide Adding the JavaScript Client Component Setup Customization Options Dimension Controls Visual Customization",
      "topics": [
        "web-sdk",
        "search",
        "components"
      ],
      "description": "The page details the Recommendations component of the Web SDK, which provides context-aware content suggestions and integrated search functionality. It covers implementation steps, customization options, and styling guidelines for embedding the component into web applications."
    },
    "https://developers.glean.com/api/client-api/messages/messages": {
      "content": "Client API Reference Messages Read messages Read messages POST /rest/api/v1/messages beta This endpoint is in Beta. Expect changes and instability. Retrieves list of messages from messaging/chat datasources (e.g. Slack, Teams). Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Overview Next Overview",
      "topics": [
        "client-api",
        "messages",
        "datasources"
      ],
      "description": "This page provides reference documentation for the Client API endpoint to read messages from messaging or chat datasources like Slack and Teams. It outlines the POST request structure, response codes, and notes that the endpoint is in beta."
    },
    "https://developers.glean.com/api/client-api/insights/insights": {
      "content": "Client API Reference Insights Read insights Read insights POST /rest/api/v1/insights Reads the aggregate information for each user, query, and content. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Overview Next Overview",
      "topics": [
        "insights",
        "client-api"
      ],
      "description": "This page provides reference documentation for the Client API endpoint to retrieve aggregated insights data on user queries and content. It details the POST request structure and possible responses for the insights resource."
    },
    "https://developers.glean.com/api/client-api/answers/listanswers": {
      "content": "Client API Reference Answers List Answers List Answers POST /rest/api/v1/listanswers List Answers created by the current user. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Read Answer Next Overview",
      "topics": [
        "client-api",
        "answers"
      ],
      "description": "This page provides a reference for the Client API endpoint to list Answers created by the current user, including details on request structure, responses, and error codes. It serves as a technical guide for developers interacting with the Answers functionality via the API."
    },
    "https://developers.glean.com/api/client-api/authentication/createauthtoken": {
      "content": "Client API Reference Authentication Create authentication token Create authentication token POST /rest/api/v1/createauthtoken Creates an authentication token for the authenticated user. These are\nspecifically intended to be used with the Web SDK . Note: The tokens generated from this endpoint are not valid tokens\nfor use with the Client API (e.g. /rest/api/v1/* ). Request ​ Responses ​ 200 400 401 429 OK Invalid Request Not Authorized Too Many Requests Previous Overview Next Overview",
      "topics": [
        "authentication",
        "client-api"
      ],
      "description": "This page documents the Client API endpoint for creating authentication tokens, specifically for use with the Web SDK, and clarifies that these tokens are not valid for the Client API itself. It includes details on the POST request, responses, and authorization requirements."
    },
    "https://developers.glean.com/api/indexing-api/index-user": {
      "content": "Indexing API Reference Permissions Index user Index user POST /api/index/v1/indexuser Adds a datasource user or updates an existing user. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Overview Next Bulk index users",
      "topics": [
        "indexing-api",
        "permissions"
      ],
      "description": "This page documents the Indexing API endpoint for adding or updating a datasource user, including request details and possible responses. It focuses on managing user permissions within a datasource through the API."
    },
    "https://developers.glean.com/api/indexing-api/bulk-index-teams": {
      "content": "Indexing API Reference People Bulk index teams Bulk index teams POST /api/index/v1/bulkindexteams Replaces all the currently indexed teams using paginated batch API calls. Please refer to the bulk indexing documentation for an explanation of how to use bulk endpoints. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Delete team Next Overview",
      "topics": [
        "indexing-api",
        "collections"
      ],
      "description": "This page provides API reference documentation for bulk indexing teams using the Indexing API, allowing replacement of currently indexed teams via paginated batch calls. It outlines request details, responses, and links to related bulk indexing documentation."
    },
    "https://developers.glean.com/api/indexing-api/delete-membership": {
      "content": "Indexing API Reference Permissions Delete membership Delete membership POST /api/index/v1/deletemembership Delete membership to a group in the specified datasource. Silently succeeds if membership is not present. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Delete group Next Beta users",
      "topics": [
        "indexing-api",
        "permissions",
        "datasources"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/index-group": {
      "content": "Indexing API Reference Permissions Index group Index group POST /api/index/v1/indexgroup Add or update a group in the datasource. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Bulk index users Next Bulk index groups",
      "topics": [
        "indexing-api",
        "permissions",
        "datasources"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/bulk-index-memberships-for-a-group": {
      "content": "Indexing API Reference Permissions Bulk index memberships for a group Bulk index memberships for a group POST /api/index/v1/bulkindexmemberships Replaces the memberships for a group in a datasource using paginated batch API calls. Please refer to the bulk indexing documentation for an explanation of how to use bulk endpoints. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Index membership Next Schedules the processing of group memberships",
      "topics": [
        "indexing-api",
        "permissions",
        "datasources"
      ],
      "description": "This page documents the Indexing API endpoint for bulk indexing group memberships within a datasource, detailing how to replace memberships using paginated batch requests and highlighting relevant response codes."
    },
    "https://developers.glean.com/api/indexing-api/bulk-index-users": {
      "content": "Indexing API Reference Permissions Bulk index users Bulk index users POST /api/index/v1/bulkindexusers Replaces the users in a datasource using paginated batch API calls. Please refer to the bulk indexing documentation for an explanation of how to use bulk endpoints. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Index user Next Index group",
      "topics": [
        "indexing-api",
        "permissions",
        "datasources"
      ],
      "description": "This page documents the Bulk Index Users API endpoint, which allows replacing users in a datasource via paginated batch requests. It outlines authentication, request structure, and possible responses, focusing on bulk management of user data within a datasource."
    },
    "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-group-memberships": {
      "content": "Indexing API Reference Permissions Schedules the processing of group memberships Schedules the processing of group memberships POST /api/index/v1/processallmemberships Schedules the immediate processing of all group memberships uploaded through the indexing API. By default the uploaded group memberships will be processed asynchronously but this API can be used to schedule processing of all memberships on demand. Request ​ Responses ​ 200 400 401 OK Bad Request Not Authorized Previous Bulk index memberships for a group Next Delete user",
      "topics": [
        "indexing-api",
        "permissions"
      ],
      "description": "This page documents an Indexing API endpoint that allows scheduling the immediate processing of group memberships. Its main purpose is to trigger on-demand processing of memberships uploaded via the API, which are otherwise processed asynchronously."
    },
    "https://developers.glean.com/api/indexing-api/delete-user": {
      "content": "Indexing API Reference Permissions Delete user Delete user POST /api/index/v1/deleteuser Delete the user from the datasource. Silently succeeds if user is not present. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Schedules the processing of group memberships Next Delete group",
      "topics": [
        "indexing-api",
        "permissions",
        "datasources"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/bulk-index-groups": {
      "content": "Indexing API Reference Permissions Bulk index groups Bulk index groups POST /api/index/v1/bulkindexgroups Replaces the groups in a datasource using paginated batch API calls. Please refer to the bulk indexing documentation for an explanation of how to use bulk endpoints. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Index group Next Index membership",
      "topics": [
        "indexing-api",
        "permissions",
        "datasources"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/index-membership": {
      "content": "Indexing API Reference Permissions Index membership Index membership POST /api/index/v1/indexmembership Add the memberships of a group in the datasource. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Bulk index groups Next Bulk index memberships for a group",
      "topics": [
        "indexing-api",
        "permissions",
        "datasources"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/beta-users": {
      "content": "Indexing API Reference Permissions Beta users Beta users POST /api/index/v1/betausers Allow the datasource be visible to the specified beta users. The default behaviour is datasource being visible to all users if it is enabled and not visible to any user if it is not enabled. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Delete membership Next Overview",
      "topics": [
        "indexing-api",
        "permissions",
        "datasources"
      ],
      "description": "This page documents a POST endpoint in the Indexing API that allows controlling visibility of a datasource for beta users by specifying which users can access it. It outlines request structure and possible responses, focusing on permission management for early-access features."
    },
    "https://developers.glean.com/api/indexing-api/delete-group": {
      "content": "Indexing API Reference Permissions Delete group Delete group POST /api/index/v1/deletegroup Delete group from the datasource. Silently succeeds if group is not present. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Delete user Next Delete membership",
      "topics": [
        "indexing-api",
        "permissions"
      ],
      "description": "This page is part of the Indexing API reference and documents the \"Delete group\" endpoint, which removes a group from a datasource while handling various response codes such as success, authorization errors, and conflicts."
    },
    "https://developers.glean.com/api-info/client/authentication/glean-issued": {
      "content": "Client API Authentication Glean Tokens On this page Glean-Issued Tokens for Client API Glean-issued tokens provide an alternative to OAuth when you need granular scope control or don't have OAuth infrastructure. They're manually created through the admin console and offer fine-grained permissions. Glean Token Benefits Granular scope control - Limit access to specific API endpoints User-scoped or global - Choose appropriate permission level No external dependencies - Works without identity provider setup Flexible expiration - Set custom expiry dates warning Glean tokens work with both Client API and Indexing API , but this guide focuses on Client API usage. For Indexing API, see the Indexing API Authentication guide. Authentication Headers ​ Glean token requests use different headers based on token type: User-Scoped Token Global Token Authorization: Bearer <user_scoped_token> Authorization: Bearer <global_token> X-Glean-ActAs: user@company.com Header Details ​ Header Required For Description Example Value Authorization All tokens Bearer token authentication Bearer glean_XYZ123... X-Glean-ActAs Global tokens only Email of user to impersonate user@company.com Token Types ​ Choose the right token type for your use case: User-Scoped (Recommended) Global (Super Admin Only) Best for : Most applications, user-specific integrations Security : Highest security, limited to specific user's data Headers : Only Authorization: Bearer <token> required Creation : Admins can create for any user, API Token Creators for themselves Use case : Applications accessing data as a specific user curl -X POST https://instance-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <USER_TOKEN>' \\ -H 'Content-Type: application/json' \\ -d '{\"query\": \"quarterly reports\"}' Best for : Multi-user applications, service integrations Security : Can impersonate any user (use carefully) Headers : Requires X-Glean-ActAs header with user email Creation : Only Super Admins can create these tokens Use case : Applications serving multiple users curl -X POST https://instance-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <GLOBAL_TOKEN>' \\ -H 'X-Glean-ActAs: user@company.com' \\ -H 'Content-Type: application/json' \\ -d '{\"query\": \"quarterly reports\"}' warning The X-Glean-ActAs header is required for global tokens. Requests without this header will fail. Creating Tokens ​ Follow these steps to create Glean-issued tokens: 1 Navigate to Token Management Go to Client API Token Settings (admin access required) 2 Add New Token Click Add New Token and configure: Description : Helpful name for tracking Permissions : USER (recommended) or GLOBAL Scopes : Select required API access scopes Expires : Optional expiration date User Email : Required for USER tokens 3 Save Token Securely warning The token secret is only shown once after creation. Save it securely - you cannot retrieve it again. Available Scopes ​ Scopes control which Client API endpoints your token can access: Complete Scopes Reference Scope Description Example Endpoints ACTIVITY User activity collection Activity reporting APIs AGENTS Glean Agents Agent creation, execution ANNOUNCEMENTS Company announcements Create, update announcements ANSWERS Glean Answers Manage Q&A content CHAT GleanChat functionality Chat API, conversations COLLECTIONS Content collections Create, manage collections DOCPERMISSIONS Document permissions Access control management DOCUMENTS Document operations Document retrieval, metadata ENTITIES Entity data People, organizational data FEEDBACK User feedback Feedback collection INSIGHTS Analytics insights Usage analytics, reports PEOPLE People directory Employee information PINS Pinned content Content pinning features SEARCH Search functionality Search queries, autocomplete SHORTCUTS GoLinks/shortcuts Shortcut management SUMMARIZE AI summarization Document summarization VERIFICATION Content verification Document verification warning Token permissions and scopes cannot be changed after creation. Plan carefully when creating tokens. Implementation Examples ​ Search with User-Scoped Token ​ curl -X POST https://instance-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <USER_TOKEN>' \\ -H 'Content-Type: application/json' \\ -d '{ \"query\": \"quarterly reports\", \"pageSize\": 10 }' Search with Global Token ​ curl -X POST https://instance-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <GLOBAL_TOKEN>' \\ -H 'X-Glean-ActAs: user@company.com' \\ -H 'Content-Type: application/json' \\ -d '{ \"query\": \"quarterly reports\", \"pageSize\": 10 }' Chat with Glean Token ​ curl -X POST https://instance-be.glean.com/rest/api/v1/chat \\ -H 'Authorization: Bearer <USER_TOKEN>' \\ -H 'Content-Type: application/json' \\ -d '{ \"query\": \"What are the latest quarterly results?\", \"conversationId\": \"optional-conversation-id\" }' Testing Glean Tokens ​ Test Commands ​ User-Scoped Token Global Token curl -X POST https://<instance>-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <USER_TOKEN>' \\ -H 'Content-Type: application/json' \\ -d '{\"query\": \"test\", \"pageSize\": 1}' curl -X POST https://<instance>-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <GLOBAL_TOKEN>' \\ -H 'X-Glean-ActAs: your-email@company.com' \\ -H 'Content-Type: application/json' \\ -d '{\"query\": \"test\", \"pageSize\": 1}' Expected Response ​ Successful authentication returns a 200 status with search results: { \"results\" : [ ... ] , \"trackingToken\" : \"...\" , \"requestId\" : \"...\" } Troubleshooting Glean Tokens ​ Common Token Errors ​ Error Cause Solution 401 Unauthorized Invalid or expired token Verify token is correct and not expired 403 Forbidden Insufficient scopes Add required scopes to token 400 Bad Request: Required header missing: X-Glean-ActAs Missing header for global token Add X-Glean-ActAs header 401 Invalid identity Invalid email in X-Glean-ActAs Verify email is valid and user exists Debugging Steps ​ 1 Verify token validity Check that your token hasn't expired and is correctly formatted 2 Confirm headers Ensure you have the correct headers for your token type: User token: Authorization only Global token: Authorization + X-Glean-ActAs 3 Check token scopes Verify your token has the required scopes for the endpoint you're accessing 4 Test with simple endpoint Start with a basic search request before testing complex operations Token Management Best Practices ​ Security ​ Use USER tokens over GLOBAL tokens when possible Set expiration dates for tokens used in temporary integrations Store tokens securely - never commit tokens to version control Use environment variables for token storage in applications Rotate tokens regularly for long-lived integrations Development ​ Create separate tokens for development, staging, and production Use descriptive names for tokens to track their purpose Test with minimal scopes first, then expand as needed Plan token architecture early - scopes cannot be changed after creation Monitoring ​ Monitor token usage through Glean's admin console Implement proper error handling for authentication failures Log authentication events for debugging and auditing Set up alerts for token expiration Scope Planning Guide ​ Choose the right scopes for your application: Common Scope Combinations ​ Use Case Recommended Scopes Notes Search Application SEARCH , DOCUMENTS Basic search functionality Chat Integration CHAT , SEARCH Chat with search capabilities Analytics Dashboard INSIGHTS , ACTIVITY Usage analytics and reporting Content Management COLLECTIONS , PINS , SHORTCUTS Content organization features Admin Tool Multiple scopes as needed Consider global token for multi-user access Scope Selection Tips ​ Start minimal - Add only scopes you immediately need Review regularly - Audit which scopes are actually used Document decisions - Record why specific scopes were chosen Test thoroughly - Verify all required functionality works Next Steps ​ Client API Reference Explore available Client API endpoints and their scope requirements Token Management Manage your Glean tokens in the admin console Migration from OAuth ​ If you're considering switching from OAuth to Glean tokens: When to Use Glean Tokens Instead of OAuth ​ Need granular scope control - OAuth provides full API access Don't have identity provider - Glean tokens work independently Require global permissions - Global tokens can impersonate users Need custom expiration - More control over token lifecycle Migration Considerations ​ Scope mapping - Determine which scopes match your OAuth usage Header changes - Update authentication headers in your code Permission model - Understand user vs global token implications Testing - Thoroughly test with new token type Need Help? ​ Token Creation : Contact your Glean administrator for token creation access Scope Questions : Review Client API Reference for endpoint requirements Technical Issues : Check troubleshooting section above Community : Join discussions at community.glean.com Edit this page Previous Overview Next OAuth Authentication Headers Header Details Token Types Creating Tokens Available Scopes Implementation Examples Search with User-Scoped Token Search with Global Token Chat with Glean Token Testing Glean Tokens Test Commands Expected Response Troubleshooting Glean Tokens Common Token Errors Debugging Steps Token Management Best Practices Security Development Monitoring Scope Planning Guide Common Scope Combinations Scope Selection Tips Next Steps Migration from OAuth When to Use Glean Tokens Instead of OAuth Migration Considerations Need Help?",
      "topics": [
        "authentication",
        "client-api",
        "development-tools"
      ],
      "description": "This page explains how to authenticate with the Client API using Glean-issued tokens, detailing user-scoped and global token types, their setup, required headers, scopes, and best practices for security and token management. It primarily focuses on implementing and troubleshooting token-based authentication for API access."
    },
    "https://developers.glean.com/api/indexing-api/index-document": {
      "content": "Indexing API Reference Documents Index document Index document POST /api/index/v1/indexdocument Adds a document to the index or updates an existing document. Request ​ Responses ​ 200 400 401 409 429 OK Bad Request Not Authorized Conflict Too Many Requests Previous Overview Next Index documents",
      "topics": [
        "indexing-api",
        "documents"
      ],
      "description": "This page provides reference documentation for the Indexing API's \"Index document\" endpoint, which allows developers to add a new document to the index or update an existing one via a POST request. It includes details on request structure, responses, and common status codes."
    },
    "https://developers.glean.com/api/indexing-api/get-datasource-config": {
      "content": "Indexing API Reference Datasources Get datasource config Get datasource config POST /api/index/v1/getdatasourceconfig Fetches the datasource config for the specified custom datasource. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Add or update datasource Next Overview",
      "topics": [
        "indexing-api",
        "datasources"
      ],
      "description": "This page provides reference documentation for the Indexing API endpoint that retrieves the configuration of a specified custom datasource. Its main purpose is to support developers in managing and accessing datasource configurations programmatically."
    },
    "https://developers.glean.com/api/indexing-api/update-document-permissions": {
      "content": "Indexing API Reference Documents Update document permissions Update document permissions POST /api/index/v1/updatepermissions Updates the permissions for a given document without modifying document content. Request ​ Responses ​ 200 400 401 409 429 OK Bad Request Not Authorized Conflict Too Many Requests Previous Bulk index documents Next Schedules the processing of uploaded documents",
      "topics": [
        "indexing-api",
        "permissions"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-uploaded-documents": {
      "content": "Indexing API Reference Documents Schedules the processing of uploaded documents Schedules the processing of uploaded documents POST /api/index/v1/processalldocuments Schedules the immediate processing of documents uploaded through the indexing API. By default the uploaded documents will be processed asynchronously but this API can be used to schedule processing of all documents on demand. If a datasource parameter is specified, processing is limited to that custom datasource. Without it, processing applies to all documents across all custom datasources. Rate Limits ​ This endpoint is rate-limited to one usage every 3 hours. Exceeding this limit results in a 429 response code. Here's how the rate limit works: Calling /processalldocuments for datasource foo prevents another call for foo for 3 hours. Calling /processalldocuments for datasource foo doesn't affect immediate calls for bar . Calling /processalldocuments for all datasources prevents any datasource calls for 3 hours. Calling /processalldocuments for datasource foo doesn't affect immediate calls for all datasources. For more frequent document processing, contact Glean support. Request ​ Responses ​ 200 400 401 429 OK Bad Request Not Authorized Too Many Requests Previous Update document permissions Next Delete document",
      "topics": [
        "indexing-api",
        "documents",
        "automation"
      ],
      "description": "This page documents the Indexing API endpoint that triggers immediate processing of uploaded documents, either across all datasources or a specific one, and explains rate limiting behavior and usage constraints. Its main purpose is to allow developers to automate document indexing and understand processing scheduling limitations."
    },
    "https://developers.glean.com/api/indexing-api/delete-document": {
      "content": "Indexing API Reference Documents Delete document Delete document POST /api/index/v1/deletedocument Deletes the specified document from the index. Succeeds if document is not present. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Schedules the processing of uploaded documents Next Overview",
      "topics": [
        "indexing-api",
        "documents"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/index-documents": {
      "content": "Indexing API Reference Documents Index documents Index documents POST /api/index/v1/indexdocuments Adds or updates multiple documents in the index. Please refer to the bulk indexing documentation for an explanation of when to use this endpoint. Request ​ Responses ​ 200 400 401 409 429 OK Bad Request Not Authorized Conflict Too Many Requests Previous Index document Next Bulk index documents",
      "topics": [
        "indexing-api",
        "documents"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/bulk-index-documents": {
      "content": "Indexing API Reference Documents Bulk index documents Bulk index documents POST /api/index/v1/bulkindexdocuments Replaces the documents in a datasource using paginated batch API calls. Please refer to the bulk indexing documentation for an explanation of how to use bulk endpoints. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Index documents Next Update document permissions",
      "topics": [
        "indexing-api",
        "datasources",
        "documents"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/upload-shortcuts": {
      "content": "Indexing API Reference Shortcuts Upload shortcuts Upload shortcuts POST /api/index/v1/uploadshortcuts Creates glean shortcuts for uploaded shortcuts info. Glean would host the shortcuts, and they can be managed in the knowledge tab once uploaded. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Bulk index external shortcuts Next Overview",
      "topics": [
        "indexing-api",
        "documents"
      ],
      "description": "This page provides reference documentation for the Indexing API's upload shortcuts endpoint, which allows uploading external shortcuts to be hosted and managed within Glean. The main functionality enables indexing of shortcuts as documents for use in the knowledge base."
    },
    "https://developers.glean.com/api/indexing-api/bulk-index-external-shortcuts": {
      "content": "Indexing API Reference Shortcuts Bulk index external shortcuts Bulk index external shortcuts POST /api/index/v1/bulkindexshortcuts Replaces all the currently indexed shortcuts using paginated batch API calls. Note that this endpoint is used for indexing shortcuts not hosted by Glean. If you want to upload shortcuts that would be hosted by Glean, please use the /uploadshortcuts endpoint. For information on what you can do with Golinks, which are Glean-hosted shortcuts, please refer to this page. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Overview Next Upload shortcuts",
      "topics": [
        "indexing-api",
        "api-clients"
      ],
      "description": "This page provides reference documentation for the Bulk Index External Shortcuts API endpoint, which allows developers to replace all currently indexed external shortcuts in a paginated manner. It specifically covers indexing non-Glean-hosted shortcuts and distinguishes between external and Glean-hosted shortcuts."
    },
    "https://developers.glean.com/api/indexing-api/get-user-count": {
      "content": "Indexing API Reference Troubleshooting Get user count Get user count POST /api/index/v1/getusercount deprecated This endpoint has been deprecated and may be replaced or removed in future versions of the API. Fetches user count for the specified custom datasource. Tip: Use /debug/{datasource}/status for richer information. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Get document count",
      "topics": [
        "indexing-api",
        "troubleshooting"
      ],
      "description": "This page provides reference documentation for the deprecated /api/index/v1/getusercount endpoint, which retrieves the user count for a custom datasource. It includes response codes and a recommendation to use a different endpoint for more detailed information."
    },
    "https://developers.glean.com/api/indexing-api/check-document-access": {
      "content": "Indexing API Reference Troubleshooting Check document access Check document access POST /api/index/v1/checkdocumentaccess Check if a given user has access to access a document in a custom datasource Tip: Refer to the Troubleshooting tutorial for more information. Request ​ Responses ​ 200 400 401 429 OK Bad Request Not Authorized Too Many Requests Previous Beta: Get user information Next Get document upload and indexing status",
      "topics": [
        "indexing-api",
        "troubleshooting",
        "permissions"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/beta-get-user-information": {
      "content": "Indexing API Reference Troubleshooting Beta: Get user information Beta: Get user information POST /api/index/v1/debug/:datasource/user beta This endpoint is in Beta. Expect changes and instability. Gives various information that would help in debugging related to a particular user. Currently in beta, might undergo breaking changes without prior notice. Tip: Refer to the Troubleshooting tutorial for more information. Request ​ Responses ​ 200 400 401 OK Bad Request Not Authorized Previous Beta: Get information of a batch of documents Next Check document access",
      "topics": [
        "indexing-api",
        "troubleshooting",
        "api-clients"
      ],
      "description": "This page documents a beta endpoint in the Indexing API that retrieves debug information for a specific user to assist with troubleshooting. It includes details on request/response codes and references related troubleshooting resources."
    },
    "https://developers.glean.com/api/indexing-api/get-document-count": {
      "content": "Indexing API Reference Troubleshooting Get document count Get document count POST /api/index/v1/getdocumentcount deprecated This endpoint has been deprecated and may be replaced or removed in future versions of the API. Fetches document count for the specified custom datasource. Tip: Use /debug/{datasource}/status for richer information. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Get document upload and indexing status Next Get user count",
      "topics": [
        "troubleshooting",
        "indexing-api"
      ],
      "description": "This page provides reference and troubleshooting information for the Indexing API, specifically detailing a deprecated endpoint for fetching document count in a custom datasource, along with guidance to use a debug alternative for more comprehensive status data."
    },
    "https://developers.glean.com/api/indexing-api/beta-get-information-of-a-batch-of-documents": {
      "content": "Indexing API Reference Troubleshooting Beta: Get information of a batch of documents Beta: Get information of a batch of documents POST /api/index/v1/debug/:datasource/documents beta This endpoint is in Beta. Expect changes and instability. Gives various information that would help in debugging related to a batch of documents. Currently in beta, might undergo breaking changes without prior notice. Tip: Refer to the Troubleshooting tutorial for more information. Request ​ Responses ​ 200 400 401 OK Bad Request Not Authorized Previous Beta: Get document information Next Beta: Get user information",
      "topics": [
        "indexing-api",
        "troubleshooting",
        "api-clients"
      ],
      "description": "This page provides reference documentation for a beta Indexing API endpoint that retrieves debugging information for a batch of documents. Its main purpose is to help developers troubleshoot issues when processing documents in a datasource."
    },
    "https://developers.glean.com/api/indexing-api/beta-get-document-information": {
      "content": "Indexing API Reference Troubleshooting Beta: Get document information Beta: Get document information POST /api/index/v1/debug/:datasource/document beta This endpoint is in Beta. Expect changes and instability. Gives various information that would help in debugging related to a particular document. Currently in beta, might undergo breaking changes without prior notice. Tip: Refer to the Troubleshooting tutorial for more information. Request ​ Responses ​ 200 400 401 OK Bad Request Not Authorized Previous Beta: Get datasource status Next Beta: Get information of a batch of documents",
      "topics": [
        "indexing-api",
        "troubleshooting",
        "datasources"
      ],
      "description": "This page provides a beta API endpoint to retrieve debugging information for a specific document within a datasource, helping developers troubleshoot indexing issues. It is part of the Indexing API and focuses on diagnostic capabilities during document processing."
    },
    "https://developers.glean.com/api/indexing-api/get-document-upload-and-indexing-status": {
      "content": "Indexing API Reference Troubleshooting Get document upload and indexing status Get document upload and indexing status POST /api/index/v1/getdocumentstatus deprecated This endpoint has been deprecated and may be replaced or removed in future versions of the API. Intended for debugging/validation. Fetches the current upload and indexing status of documents. Tip: Use /debug/{datasource}/document for richer information. Request ​ Responses ​ 200 400 401 429 OK Bad Request Not Authorized Too Many Requests Previous Check document access Next Get document count",
      "topics": [
        "indexing-api",
        "troubleshooting"
      ],
      "description": "This page provides reference documentation for a deprecated endpoint in the Indexing API used to check the upload and indexing status of documents. It is intended for debugging purposes and suggests a newer alternative for retrieving document information."
    },
    "https://developers.glean.com/api/indexing-api/beta-get-datasource-status": {
      "content": "Indexing API Reference Troubleshooting Beta: Get datasource status Beta: Get datasource status POST /api/index/v1/debug/:datasource/status beta This endpoint is in Beta. Expect changes and instability. Gather information about the datasource's overall status. Currently in beta, might undergo breaking changes without prior notice. Tip: Refer to the Troubleshooting tutorial for more information. Request ​ Responses ​ 200 400 401 OK Bad Request Not Authorized Previous Overview Next Beta: Get document information",
      "topics": [
        "indexing-api",
        "troubleshooting"
      ],
      "description": "This page provides reference documentation for a beta endpoint that retrieves the status of a datasource within the Indexing API. It is primarily used for troubleshooting and monitoring datasource health during indexing operations."
    },
    "https://developers.glean.com/api/indexing-api/index-employee": {
      "content": "Indexing API Reference People Index employee Index employee POST /api/index/v1/indexemployee Adds an employee or updates information about an employee Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Overview Next Bulk index employees",
      "topics": [
        "indexing-api",
        "entities"
      ],
      "description": "This page provides reference documentation for the Indexing API's endpoint to add or update employee information in the index. It outlines the POST request structure, possible responses, and relates to managing employee entities within the system."
    },
    "https://developers.glean.com/api/indexing-api/index-team": {
      "content": "Indexing API Reference People Index team Index team POST /api/index/v1/indexteam Adds a team or updates information about a team Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Delete employee Next Delete team",
      "topics": [
        "indexing-api",
        "entities"
      ],
      "description": "This page documents the Indexing API endpoint for adding or updating a team within the system. It focuses on managing team entities as part of the indexing process."
    },
    "https://developers.glean.com/api/indexing-api/delete-employee": {
      "content": "Indexing API Reference People Delete employee Delete employee POST /api/index/v1/deleteemployee Delete an employee. Silently succeeds if employee is not present. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Schedules the processing of uploaded employees and teams Next Index team",
      "topics": [
        "indexing-api",
        "documents"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-uploaded-employees-and-teams": {
      "content": "Indexing API Reference People Schedules the processing of uploaded employees and teams Schedules the processing of uploaded employees and teams POST /api/index/v1/processallemployeesandteams Schedules the immediate processing of employees and teams uploaded through the indexing API. By default all uploaded people data will be processed asynchronously but this API can be used to schedule its processing on demand. Responses ​ 200 400 401 429 OK Bad Request Not Authorized Too Many Requests Previous Bulk index employees Next Delete employee",
      "topics": [
        "indexing-api",
        "automation"
      ],
      "description": "This page documents the Indexing API endpoint for triggering the immediate processing of uploaded employees and teams data. Its main purpose is to allow developers to programmatically schedule data processing after bulk uploads."
    },
    "https://developers.glean.com/api/indexing-api/bulk-index-employees": {
      "content": "Indexing API Reference People Bulk index employees Bulk index employees POST /api/index/v1/bulkindexemployees Replaces all the currently indexed employees using paginated batch API calls. Please refer to the bulk indexing documentation for an explanation of how to use bulk endpoints. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Index employee Next Schedules the processing of uploaded employees and teams",
      "topics": [
        "indexing-api",
        "documents"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/indexing-api/delete-team": {
      "content": "Indexing API Reference People Delete team Delete team POST /api/index/v1/deleteteam Delete a team based on provided id. Request ​ Responses ​ 200 400 401 409 OK Bad Request Not Authorized Conflict Previous Index team Next Bulk index teams",
      "topics": [
        "indexing-api",
        "entities"
      ],
      "description": "This page provides reference documentation for the Indexing API endpoint to delete a team by ID, including request details and possible responses. It focuses on managing team entities within the indexing system."
    },
    "https://developers.glean.com/api-info/client/getting-started/basic-usage": {
      "content": "Client API Getting Started Basic Usage On this page Basic Usage Guide Learn the core concepts and patterns for building applications with Glean's Client API. This guide focuses on understanding what you can build and how the API works, rather than language-specific implementation details. Choose Your SDK Ready to start coding? Check out our official API clients for Python, TypeScript, Go, and Java with complete examples and installation instructions. Core APIs ​ Chat API - Conversational AI ​ Ask questions and get AI-powered answers grounded in your organization's knowledge. Request Format: curl -X POST https://your-instance-be.glean.com/rest/api/v1/chat \\ -H 'Authorization: Bearer <your_token>' \\ -H 'Content-Type: application/json' \\ -d '{ \"messages\": [ { \"author\": \"USER\", \"fragments\": [ { \"text\": \"What is our vacation policy?\" } ] } ] }' Response Structure: { \"messages\" : [ { \"messageType\" : \"CONTENT\" , \"author\" : \"GLEAN_AI\" , \"fragments\" : [ { \"text\" : \"Based on our employee handbook, the vacation policy allows...\" } , { \"citation\" : { \"sourceDocument\" : { \"title\" : \"Employee Handbook 2024\" , \"url\" : \"https://company.com/handbook\" , \"snippet\" : \"Employees accrue 15 days of PTO annually...\" } } } ] } ] , \"chatId\" : \"chat_abc123\" , \"followUpPrompts\" : [ \"What are the paid time off policies?\" , \"How do I request vacation time?\" ] , \"backendTimeMillis\" : 1200 , \"chatSessionTrackingToken\" : \"session_xyz789\" } Key Concepts: Fragments : Mix of text content and citations in responses Chat ID : Use chatId for follow-up messages in the same conversation Citations : Source documents that informed the AI's response (inline in fragments) Follow-up Prompts : Suggested questions based on the response context Tracking Tokens : For analytics and feedback reporting Streaming : Set \"stream\": true for real-time response chunks Multi-turn : Include previous messages for conversational context Search API - Enterprise Search ​ Find documents, people, and information across all connected systems. Request Format: curl -X POST https://your-instance-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <your_token>' \\ -H 'Content-Type: application/json' \\ -d '{ \"query\": \"quarterly planning\", \"pageSize\": 10, \"requestOptions\": { \"datasourcesFilter\": [\"confluence\", \"gdrive\"], \"facetBucketSize\": 100 } }' Response Structure: { \"results\" : [ { \"id\" : \"doc_123\" , \"title\" : \"Q4 Planning Document\" , \"url\" : \"https://company.com/q4-plan\" , \"snippet\" : \"Our Q4 objectives focus on...\" , \"datasource\" : \"confluence\" , \"lastModified\" : \"2024-01-15T10:30:00Z\" , \"permissions\" : { \"canView\" : true , \"canEdit\" : false } , \"author\" : { \"name\" : \"Jane Smith\" , \"email\" : \"jane@company.com\" } } ] , \"facets\" : { \"datasource\" : [ { \"value\" : \"confluence\" , \"count\" : 15 } , { \"value\" : \"gdrive\" , \"count\" : 8 } ] , \"author\" : [ { \"value\" : \"Jane Smith\" , \"count\" : 3 } ] } , \"requestId\" : \"req_abc123\" } Key Concepts: Results : Array of documents with rich metadata Facets : Aggregations for filtering and navigation (e.g., by datasource, author) Permissions : User-specific access controls (canView, canEdit) Filters : Narrow results by datasource, author, date, etc. Ranking : Results ordered by relevance scoring Agents API - Pre-built Workflows ​ Execute specialized AI agents built in Glean's Agent Builder for complex workflows. Request Format: curl -X POST https://your-instance-be.glean.com/rest/api/v1/agents/runs/wait \\ -H 'Authorization: Bearer <your_token>' \\ -H 'Content-Type: application/json' \\ -d '{ \"agent_id\": \"your-agent-id\", \"input\": { \"query\": \"Analyze our Q4 sales performance\", \"region\": \"North America\", \"timeframe\": \"Q4 2023\" } }' Response Structure: { \"run\" : { \"agent_id\" : \"your-agent-id\" , \"input\" : { \"query\" : \"Analyze our Q4 sales performance\" , \"region\" : \"North America\" , \"timeframe\" : \"Q4 2023\" } , \"status\" : \"success\" } , \"messages\" : [ { \"role\" : \"GLEAN_AI\" , \"content\" : [ { \"text\" : \"Based on the Q4 sales data, I found that sales increased 15% compared to Q3...\" , \"type\" : \"text\" } ] } ] } Key Concepts: Agent ID : Unique identifier for pre-built agents in Agent Builder Input vs Messages : Use input object for data OR messages array for conversation Run Status : \"success\" or \"error\" indicating execution result Response Messages : Agent responses in message format with role and content Wait vs Stream : Use /runs/wait for complete response or /runs/stream for real-time Common Integration Patterns ​ Pattern 1: Content Discovery ​ Use search to help users discover and navigate to specific documents: 1 Initial Discovery Search Start with a broad search to find relevant content: curl -X POST https://your-instance-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <your_token>' \\ -H 'Content-Type: application/json' \\ -d '{ \"query\": \"employee onboarding\", \"pageSize\": 10, \"requestOptions\": { \"facetBucketSize\": 100 } }' 2 Present Results with Navigation Show users the search results with links to actual documents, plus facets for further filtering: Display document titles, snippets, and direct links Show facet counts (e.g., \"Confluence (15)\", \"Google Drive (8)\") Allow users to click through to read full documents 3 Follow-up Questions Once users have context from reading documents, they can ask specific questions via chat: curl -X POST https://your-instance-be.glean.com/rest/api/v1/chat \\ -H 'Authorization: Bearer <your_token>' \\ -H 'Content-Type: application/json' \\ -d '{ \"messages\": [ { \"author\": \"USER\", \"fragments\": [ { \"text\": \"What are the steps for setting up a new employee'\\''s laptop?\" } ] } ] }' Pattern 2: Progressive Conversations ​ Build multi-turn conversations that maintain context: # First message curl -X POST https://your-instance-be.glean.com/rest/api/v1/chat \\ -H 'Authorization: Bearer <your_token>' \\ -H 'Content-Type: application/json' \\ -d '{ \"messages\": [ { \"author\": \"USER\", \"fragments\": [{ \"text\": \"What are our company'\\''s main products?\" }] } ] }' # Follow-up using chatId curl -X POST https://your-instance-be.glean.com/rest/api/v1/chat \\ -H 'Authorization: Bearer <your_token>' \\ -H 'Content-Type: application/json' \\ -d '{ \"chatId\": \"chat_abc123\", \"messages\": [ { \"author\": \"USER\", \"fragments\": [{ \"text\": \"What are our company'\\''s main products?\" }] }, { \"author\": \"GLEAN_AI\", \"fragments\": [{ \"text\": \"Our main products include...\" }] }, { \"author\": \"USER\", \"fragments\": [{ \"text\": \"Which one generates the most revenue?\" }] } ] }' Pattern 3: Faceted Search Navigation ​ Use facets to help users navigate and filter results: 1 Initial Search Start with a broad search to understand available content: curl -X POST https://your-instance-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <your_token>' \\ -H 'Content-Type: application/json' \\ -d '{ \"query\": \"project planning\", \"pageSize\": 10, \"requestOptions\": { \"facetBucketSize\": 100 } }' 2 Show Facets Display facet counts to users (e.g., \"Confluence (15)\", \"Google Drive (8)\") 3 Filtered Search Let users click facets to refine results: curl -X POST https://your-instance-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <your_token>' \\ -H 'Content-Type: application/json' \\ -d '{ \"query\": \"project planning\", \"pageSize\": 10, \"requestOptions\": { \"datasourcesFilter\": [\"confluence\"], \"facetFilters\": [ { \"fieldName\": \"author\", \"values\": [\"Jane Smith\"] } ], \"facetBucketSize\": 100 } }' Pattern 4: Streaming for Real-time UX ​ Use streaming for interactive chat experiences: curl -X POST https://your-instance-be.glean.com/rest/api/v1/chat \\ -H 'Authorization: Bearer <your_token>' \\ -H 'Content-Type: application/json' \\ -d '{ \"stream\": true, \"messages\": [ { \"author\": \"USER\", \"fragments\": [{ \"text\": \"Explain our Q4 strategy\" }] } ] }' Handle the streaming response to show text as it arrives, creating a more engaging user experience. What You Can Build ​ Knowledge Chatbots Build conversational interfaces that answer questions using your organization's content Search Applications Create custom search experiences with filtering, faceting, and result customization Content Discovery Help users find relevant documents and experts across your organization Workflow Automation Use agents to automate complex business processes and analysis Implementation Resources ​ Official API Clients Python, TypeScript, Go, and Java SDKs with complete examples Complete Examples Step-by-step tutorials for building real applications Authentication Setup How to get and manage API tokens Advanced Search Master filtering, faceting, and result customization Ready to Start Coding? Check out our API clients documentation for your preferred programming language, complete with installation instructions and working examples. Edit this page Previous Overview Next Overview Core APIs Chat API - Conversational AI Search API - Enterprise Search Agents API - Pre-built Workflows Common Integration Patterns Pattern 1: Content Discovery Pattern 2: Progressive Conversations Pattern 3: Faceted Search Navigation Pattern 4: Streaming for Real-time UX What You Can Build Implementation Resources",
      "topics": [
        "client-api",
        "getting-started",
        "core-concepts"
      ],
      "description": "This page provides a foundational guide for developers starting with Glean's Client API, covering core APIs (Chat, Search, Agents), key concepts like fragments, permissions, and streaming, and common integration patterns. It explains how to use the API to build knowledge chatbots, search applications, and automated workflows, making it a high-level onboarding resource for understanding and implementing Glean's API capabilities."
    },
    "https://developers.glean.com/guides/search/filtering-results": {
      "content": "Guides Search Filtering Results On this page Filtering Results Filters are a powerful tool to narrow down your search results. We support filters that are generalized to every document, as well as filters that are specific to different datasources. This guide will focus on our general filters and how to utilize them. How to Use ​ In order to filter search results to show documents that match certain fields via the /search REST API , you need to construct a list of facetFilter objects and pass it into the requestOptions object. Each facetFilter object has the following relevant fields: Field Name Description fieldName the name of the field we are filtering by (eg “from” to facet by user, “type” for document type, etc). fieldName should be unique in the list of facetFilter objects. values a list of facetFilterValue objects. All values are OR’d between the same field name (we AND between different field names). A facetFilterValue object has the following relevant fields: Field Name Description value string value that results are being filtered to. relationType can take on the values below: Basic Example ​ To filter to only the document type pdf search results, you would send the following in the facetFilter field. This is the equivalent of adding “type :pdf ” to your search query. [ { \"fieldName\" : \"type\" , \"values\" : [ { \"relationType\" : \"EQUALS\" , \"value\" : \"pdf\" } ] } ] Universal Field Names ​ Topbar Facet Field Names ​ Field Name Description last_updated_at Filter by document last updated at from Filter by user who created/modified the document. Supports special value \"me\" for the current user my Filter by documents that are in the current user's history. Supports special value \"history\" collection Filter by collection name has Filter by whether a document has a specific field. Supports special value \"golink\" to filter by documents with a golink type Filter by document type Entity Field Names ​ Field Name Description businessunit Filter by business unit city Filter by city country Filter by country industry Filter by industry location Filter by location region Filter by region roletype Filter by role type startafter Filter by start date after startbefore Filter by start date before state Filter by state title Filter by title reportsto Filter by reporting to Exceptions to the basic example ​ Time filters ​ Time filters are the only exception to the rule. The fieldName is always “last_updated_at”, and we use different relationTypes to specify different time ranges. We support 2 types of values: specific dates and special values. Specific dates ​ Use the “GT” and “LT” relationTypes to specify a date range. The ranges can also be open-ended (only include a GT or an LT). Each date value should be in the form YYYY-MM-DD passed in as a string. Note that when using GT and LT, the values are noninclusive (eg using { relationType =”GT”, value=”2023-06-17”} will include dates from 2023-06-18 and later). All dates provided will begin with the “start of the day” (12:00 am). Dates will end at the end of the day (11:59:59 pm). Closed date range example for filtering to documents from dates 6/16, 6/17, 6/18, 6/19: [ { \"fieldName\" : \"last_updated_at\" , \"values\" : [ { \"relationType\" : \"GT\" , \"value\" : \"2023-06-15\" } , { \"relationType\" : \"LT\" , \"value\" : \"2023-06-20\" } ] } ] Open date range example for filtering to documents from dates 6/11 onwards: [ { \"fieldName\" : \"last_updated_at\" , \"values\" : [ { \"relationType\" : \"GT\" , \"value\" : \"2023-06-10\" } ] } ] Special Values ​ For special values, we allow the values past_day, past_week, past_month, yesterday, today, past_n_days, past_n_weeks, past_n_months, past_n_years for the relation type EQUALS , where n is a number, ie 5 in past_5_days . For all past* prefixed values, we also support the last* prefix, they mean the same thing (ie last_week is a viable substitute for past_week ). We allow the values past_day, past_week, past_month, yesterday,today for the relation type LT . We allow the values yesterday for the relation type GT . If you pass in an invalid special value, you will get an 422 error letting you know you have an invalid operator. Invalid special values for time filters are the only case in which a 422 error is returned. If you are used to using operators and values in the query string, here are some examples of translations of query string value to REST API value. Sample: updated:today becomes [ { \"fieldName\" : \"last_updated_at\" , \"values\" : [ { \"relationType\" : \"EQUALS\" , \"value\" : \"today\" } ] } ] before:past_week becomes [ { \"fieldName\" : \"last_updated_at\" , \"values\" : [ { \"relationType\" : \"LT\" , \"value\" : \"past_week\" } ] } ] after:yesterday becomes [ { \"fieldName\" : \"last_updated_at\" , \"values\" : [ { \"relationType\" : \"GT\" , \"value\" : \"yesterday\" } ] } ] Timezone considerations ​ We factor in user’s timezone for all queries except when you use the value past_week , past_year , past_month and past_day with the relationType EQUALS . (these are handled by built-in elastic date aggregation that doesn’t account for timezone). History filter ​ my: facet will only ever have the value “history”. It filters to show only documents the user has viewed before. The object always looks like this: { \"fieldName\" : \"suggested\" , \"groupName\" : \"\" , \"values\" : [ { \"relationType\" : \"EQUALS\" , \"value\" : \"my history\" } ] } From filter (or any user filter): ​ If you would like to specify a specific user, for example, if there are 2 people with the same name, “User one”, you can specify which one you mean by using the email address they authenticated with Glean as the value . IE user[at]glean.com and userone[at]glean.com would facet by different “User One”s even if they have the same name. Sample query: from : \"User one\" updated : today type : document requestOptions.facetFilters : [ { \"fieldName\" : \"from\" , \"values\" : [ { \"relationType\" : \"EQUALS\" , \"value\" : \"userone@glean.com\" } ] } , { \"fieldName\" : \"last_updated_at\" , \"values\" : [ { \"relationType\" : \"EQUALS\" , \"value\" : \"today\" } ] } , { \"fieldName\" : \"type\" , \"values\" : [ { \"relationType\" : \"EQUALS\" , \"value\" : \"document\" } ] } ] Edit this page Previous Overview Next Datasource Filters How to Use Basic Example Universal Field Names Topbar Facet Field Names Entity Field Names Exceptions to the basic example Time filters History filter From filter (or any user filter):",
      "topics": [
        "search",
        "api-clients",
        "datasources"
      ],
      "description": "This page provides a detailed guide on how to filter search results using the /search REST API, covering general filters, field-specific filtering, time-based filters, and special values. It explains how to construct facetFilter objects, use universal and entity-specific field names, and handle edge cases like timezones and user-specific filters."
    },
    "https://developers.glean.com/api-info/client/authentication/oauth": {
      "content": "Client API Authentication OAuth On this page OAuth Authentication for Client API OAuth is the recommended authentication method for Client API integrations. It allows you to use access tokens from your existing identity provider without managing additional tokens. OAuth Benefits No token management - Use existing identity provider tokens Full API access - No scope restrictions like Glean tokens Provider flexibility - Works with Google, Azure, Okta, OneLogin Enterprise security - Leverages your existing auth infrastructure warning OAuth authentication is only supported for Client API . Indexing API operations require Glean-issued tokens. Authentication Headers ​ OAuth requests require these specific headers: Authorization: Bearer <oauth_access_token> X-Glean-Auth-Type: OAUTH Header Details ​ Header Description Example Value Authorization Bearer token from your OAuth provider Bearer eyJ0eXAiOiJKV1Q... X-Glean-Auth-Type Required to specify OAuth authentication OAUTH Quick Setup Overview ​ 1 Configure your identity provider Set up OAuth application in Google Workspace, Azure, Okta, or OneLogin 2 Enable OAuth in Glean Navigate to Client API Settings and enable OAuth 3 Register your Client ID Add your OAuth application's Client ID to Glean's configuration 4 Use OAuth tokens Include Authorization and X-Glean-Auth-Type headers in your requests Prerequisites ​ Before setting up OAuth authentication: Admin access to Glean's admin console Identity provider account (Google Workspace, Azure, Okta, or OneLogin) OAuth application configured in your identity provider Provider-Specific Setup ​ Choose your identity provider for detailed setup instructions: Google Workspace (GSuite) ​ Complete Google Workspace Setup 1 Create OAuth Application Go to Google Cloud Console Credentials Click Create Credentials → OAuth Client ID Choose Web application Add redirect URIs: For testing: http://127.0.0.1:5000/oauth/callback For production: Your actual callback URL 2 Configure Scopes Your GSuite tokens must include these scopes: openid email profile 3 Register with Glean Navigate to Glean Token Management Under OAuth Access Tokens → GSuite , enter your Client ID Click Save and wait up to 10 minutes for settings to take effect Microsoft Azure ​ Complete Azure Setup 1 App Registration Go to Azure Portal Navigate to Azure Active Directory → App registrations Click New registration Configure: Name : Your application name Redirect URI : Your callback URL 2 Configure Permissions Add required API permissions: Microsoft Graph : openid , email , profile 3 Get Credentials Note your: Application (client) ID Directory (tenant) ID 4 Register with Glean Navigate to Glean Token Management Configure: Client ID : Your Application (client) ID Issuer : https://login.microsoftonline.com/<directory_ID>/v2.0 Okta ​ Complete Okta Setup 1 Create OIDC Application Go to Okta Admin Console Navigate to Applications → Create App Integration Choose OIDC - OpenID Connect → Web Application Configure redirect URIs and logout redirect URIs 2 Configure Scopes Ensure your application has appropriate scopes configured 3 Get Credentials Note your: Client ID Okta domain 4 Register with Glean Navigate to Glean Token Management Configure: Client ID : Your Okta application client ID Issuer : https://<your-okta-domain>.okta.com OneLogin ​ Complete OneLogin Setup 1 Create OIDC Application Go to OneLogin Admin Console Navigate to Applications → Add App Search for \"OpenID Connect (OIDC)\" and select it Configure: Application Type : Web Redirect URIs : Your callback URLs 2 Get Credentials Go to the SSO tab and note your: Client ID Client Secret 3 Register with Glean Navigate to Glean Token Management Configure: Client ID : Your OneLogin application client ID Issuer : https://<your-onelogin-subdomain>.onelogin.com/oidc/2 Implementation Examples ​ Basic Search Request ​ curl -X POST https://instance-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <oauth_token>' \\ -H 'X-Glean-Auth-Type: OAUTH' \\ -H 'Content-Type: application/json' \\ -d '{ \"query\": \"quarterly reports\", \"pageSize\": 10 }' Chat Request ​ curl -X POST https://instance-be.glean.com/rest/api/v1/chat \\ -H 'Authorization: Bearer <oauth_token>' \\ -H 'X-Glean-Auth-Type: OAUTH' \\ -H 'Content-Type: application/json' \\ -d '{ \"query\": \"What are the latest quarterly results?\", \"conversationId\": \"optional-conversation-id\" }' Token Properties ​ Understanding OAuth token characteristics: Scope : Full Client API access (not restricted by scopes) User context : Treated as user-permissioned tokens Expiration : Managed by your identity provider API Support : Client API only (Indexing API not supported) Security : Leverages your existing identity provider security Testing OAuth Authentication ​ Test Command ​ curl -X POST https://<instance>-be.glean.com/rest/api/v1/search \\ -H 'Authorization: Bearer <OAUTH_TOKEN>' \\ -H 'X-Glean-Auth-Type: OAUTH' \\ -H 'Content-Type: application/json' \\ -d '{\"query\": \"test\", \"pageSize\": 1}' Expected Response ​ Successful authentication returns a 200 status with search results: { \"results\" : [ ... ] , \"trackingToken\" : \"...\" , \"requestId\" : \"...\" } Troubleshooting OAuth ​ Common OAuth Errors ​ Error Cause Solution Missing X-Glean-Auth-Type header OAuth header not set Add X-Glean-Auth-Type: OAUTH header Invalid token format Malformed token Verify token is valid JWT from your provider 401 Unauthorized Invalid or expired token Verify token is correct and not expired 403 Forbidden OAuth not enabled Contact admin to enable OAuth in Glean settings Debugging Steps ​ 1 Verify OAuth is enabled Check that OAuth is enabled in Glean Token Management 2 Confirm headers Ensure you have both required headers: Authorization: Bearer <oauth_token> X-Glean-Auth-Type: OAUTH 3 Validate token Verify your OAuth token is valid and not expired 4 Test with simple endpoint Start with a basic search request before testing complex operations Best Practices ​ Security ​ Use HTTPS for all OAuth flows and API requests Validate tokens before making API requests Handle token refresh gracefully in your application Store tokens securely - never commit to version control Development ​ Test OAuth flow in development environment first Handle errors gracefully - OAuth tokens can expire or be revoked Implement proper logging for OAuth authentication events Monitor token usage through your identity provider Production ​ Use production OAuth applications - don't use development credentials Implement token caching to reduce identity provider calls Set up monitoring for authentication failures Plan for token rotation and refresh scenarios Next Steps ​ Client API Reference Explore available Client API endpoints that work with OAuth Search Implementation Learn advanced search techniques with OAuth authentication Need Help? ​ Admin Setup : Contact your Glean administrator for OAuth configuration Provider Issues : Consult your identity provider documentation API Issues : Check the Client API Reference Community : Join discussions at community.glean.com Edit this page Previous Glean Tokens Next Overview Authentication Headers Header Details Quick Setup Overview Prerequisites Provider-Specific Setup Google Workspace (GSuite) Microsoft Azure Okta OneLogin Implementation Examples Basic Search Request Chat Request Token Properties Testing OAuth Authentication Test Command Expected Response Troubleshooting OAuth Common OAuth Errors Debugging Steps Best Practices Security Development Production Next Steps Need Help?",
      "topics": [
        "authentication",
        "client-api",
        "development-tools"
      ],
      "description": "This page provides detailed guidance on configuring and using OAuth authentication for the Client API, including setup instructions for supported identity providers (Google, Azure, Okta, OneLogin), required headers, implementation examples, and troubleshooting tips. The main purpose is to enable developers to authenticate Client API requests using their existing OAuth infrastructure."
    },
    "https://developers.glean.com/api/client-api/entities/people": {
      "content": "Client API Reference Entities Read people Read people POST /rest/api/v1/people Read people details for the given IDs. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous List entities Next Overview",
      "topics": [
        "client-api",
        "entities"
      ],
      "description": "This page provides reference documentation for the Client API endpoint to read person entities by their IDs, detailing request structure, responses, and possible status codes."
    },
    "https://developers.glean.com/api/client-api/collections/deletecollectionitem": {
      "content": "Client API Reference Collections Delete Collection item Delete Collection item POST /rest/api/v1/deletecollectionitem Delete a single item from a Collection. Request ​ Responses ​ 200 400 401 422 429 OK Invalid request Not Authorized Failed to save deletion Too Many Requests Previous Update Collection item Next Overview",
      "topics": [
        "client-api",
        "collections",
        "documents"
      ],
      "description": "This page provides API reference documentation for deleting a single item from a Collection using the Client API. It details the POST request endpoint, parameters, and possible responses when removing a document or item from a collection."
    },
    "https://developers.glean.com/api/client-api/entities/listentities": {
      "content": "Client API Reference Entities List entities List entities POST /rest/api/v1/listentities List some set of details for all entities that fit the given criteria and return in the requested order. Does not support negation in filters, assumes relation type EQUALS. There is a limit of 10000 entities that can be retrieved via this endpoint, except when using FULL_DIRECTORY request type for people entities. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Overview Next Read people",
      "topics": [
        "entities",
        "client-api"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/governance/setdocvisibility": {
      "content": "Client API Reference Governance Hide or unhide docs Hide or unhide docs POST /rest/api/v1/governance/documents/visibilityoverrides Sets the visibility-override state of the documents specified, effectively hiding or un-hiding documents. Request ​ Responses ​ 200 403 500 OK Permissions error Internal error Previous Fetches documents visibility Next Overview",
      "topics": [
        "governance",
        "client-api",
        "documents"
      ],
      "description": ""
    },
    "https://developers.glean.com/api-info/indexing/getting-started/setup-datasource": {
      "content": "Indexing API Getting Started Setup Datasources On this page Setup Datasource To get started with the Indexing API, you first need to create a datasource that will store all the data you will be indexing. A datasource provides organizational structure and defines how your content appears in search results. Using the Glean Custom App Setup Page ​ info Only Glean admins can set up custom apps using Glean's admin console. If you are not a Glean admin, you can work with your Glean admin to set up a\ncustom app or follow Option 2 to set up a datasource using the /adddatasource API\nendpoint. To set up a custom app, admins can navigate to the admin console, then click on the Data sources section . Click on the \"Add data source\" button in the top right corner. In the modal that appears, click on \"Custom\" at the bottom of the list. The key fields to quickly set up a datasource are listed under the \"Data source basics\" section. Some example values are shown in the screenshot below. Once the values are set, click on the \"Publish\" button to create the custom app. Using the /adddatasource API Endpoint ​ When creating a datasource, the key fields you need to set are the following: Field Description name A unique identifier used to refer to the datasource. displayName The datasource name shown in search results in the UI. datasourceCategory The type of this datasource. This affects how results are ranked. More details on how to select a category can be inferred from Datasource Categories documentation. urlRegex A regex that captures the view URLs of documents in the datasource as accurately as possible. Avoid regexes that are too broad, and will capture URLs from other datasources, or regexes that are too narrow, and will not capture documents from this datasource. isUserReferencedByEmail This should be set to true if you want to refer to user identities using emails directly. If you have your own notion of user ids, this can be set to false. This affects how Glean interprets permissions attached to documents. cURL Python curl -X POST https://customer-be.glean.com/api/index/v1/adddatasource \\ -H 'Authorization: Bearer <token>' \\ -d ' { \"name\": \"gleantest\", \"displayName\": \"Glean Test\", \"datasourceCategory\": \"PUBLISHED_CONTENT\", \"urlRegex\": \"^https://bluesky.test.*\", \"objectDefinitions\": [ { \"name\": \"EngineeringDoc\", \"docCategory\": \"PUBLISHED_CONTENT\" } ], \"isUserReferencedByEmail\": true }' from glean . api_client import Glean import os with Glean ( api_token = os . getenv ( \"GLEAN_INDEXING_API_TOKEN\" , \"\" ) , instance = os . getenv ( \"GLEAN_INSTANCE\" , \"\" ) , ) as client : # Create a datasource try : client . indexing . datasources . add ( request = { \"name\" : \"gleantest\" , \"displayName\" : \"Glean Test\" , \"datasourceCategory\" : \"PUBLISHED_CONTENT\" , \"urlRegex\" : \"^http://bluesky.test.*\" , \"objectDefinitions\" : [ { \"name\" : \"EngineeringDoc\" , \"docCategory\" : \"PUBLISHED_CONTENT\" } ] , \"isUserReferencedByEmail\" : True } ) except Exception as e : print ( f\"Exception when creating datasource: { e } \" ) You can learn about more datasource customization options at here For more information about datasource categories, see Datasource Categories . Edit this page Previous Overview Next Index Documents Using the Glean Custom App Setup Page Using the /adddatasource API Endpoint",
      "topics": [
        "indexing-api",
        "datasources",
        "getting-started"
      ],
      "description": "This page provides a guide on how to set up a datasource using either the Glean admin console or the /adddatasource API endpoint, which is the first step in using the Indexing API. It outlines required fields, configuration options, and includes code examples for creating a datasource."
    },
    "https://developers.glean.com/api-info/indexing/authentication/token-rotation": {
      "content": "Indexing API Authentication Token Rotation On this page Token Rotation This guide covers token rotation for the indexing API. You'll learn how to exchange your rotatable access token for a new access token. With token rotation, you'll provide an extra layer of security for your access tokens. To use the rotate token endpoint, you must first create a rotatable token from the admin console by specifying a rotation period in minutes. Please refer to Managing API Tokens documentation on how to create a rotatable token. Rotate token endpoint /rotatetoken ​ Here is a sample request to the /rotatetoken endpoint. curl -X POST  https://customer-be.glean.com/api/index/v1/rotatetoken \\ -H 'Authorization: Bearer <token>' To rotate a token using the /rotatetoken endpoint, you must send the token you want to rotate as the bearer token in the request. This will create and return a new token with the same properties as the parent token, including the rotation period minutes property, which cannot be changed. The response will include the new token's raw secret, creation time, and rotation period in minutes. Sample response ​ { \"rawSecret\" : \"new-secret\" , \"createdAt\" : 16400000 , \"rotationPeriodMinutes\" : 3600 } Rotation period ​ After creating a rotatable token in the admin console, it is important to regularly rotate the token using the /rotatetoken endpoint to prevent it from expiring. The rotation period is specified when the token is created and cannot be changed. To ensure the token is rotated within the specified period, we recommend setting up a cron job that runs at a frequency less than the rotation period. Following is a sample structure of how the cron job might look like -: def rotate_token ( ) : # Make a POST request to the /rotatetoken endpoint response = requests . post ( 'http://domain-be.glean.com/api/index/v1/rotatetoken' ) # Extract the new token and rotation period from the response data = response . json ( ) new_secret = data [ 'rawSecret' ] rotation_period_minutes = data [ 'rotationPeriodMinutes' ] created_at = data [ 'createdAt' ] # Store the new token and rotation period in the database store_in_db ( new_secret , rotation_period_minutes , created_at ) # Start using the new token for all future API calls set_api_token ( new_secret ) # Set up the cron job to run the rotate_token function every rotationPeriodMinutes minutes def create_cron_job ( rotationPeriodMinutes ) : cron = CronTab ( user = 'username' ) job = cron . new ( command = '/path/to/script.py' ) job . minute . every ( rotationPeriodMinutes ) cron . write ( ) Some things to note ​ When a token is rotated, it cannot be used to make any requests after a buffer period of 10 minutes. This buffer period is not configurable. If the token expires, it cannot be used to make indexing API requests. You would need to create a new token from the admin console. It is recommended that tokens are stored in an encrypted form. It is important to note that the token will still expire at the expiry time specified during token creation, even if it is being rotated regularly. Edit this page Previous Create authentication token Next Custom Properties Rotate token endpoint /rotatetoken Sample response Rotation period Some things to note",
      "topics": [
        "authentication",
        "indexing-api",
        "development-tools"
      ],
      "description": "This page explains how to rotate authentication tokens for the Indexing API to enhance security. It covers the process of exchanging a rotatable token for a new one using the /rotatetoken endpoint, including implementation guidance and best practices like using cron jobs for automation."
    },
    "https://developers.glean.com/api-info/indexing/getting-started/index-documents": {
      "content": "Indexing API Getting Started Index Documents On this page Index Documents This guide will help you quickly get familiar with the basics of using the Indexing API by configuring a datasource, indexing a document, and enabling the datasource to show up in search. Index a document for the datasource ​ Once the datasource is configured, we can index documents. A document has the\nfollowing key fields. id This is a unique identifier for the document within the datasource. The id can\nonly contain alphanumeric characters (underscores are not allowed). The id\nshould be stable, meaning that the same document must keep the same id across\nuploads. If an id is not provided, we use a hash of the viewURL as the id. objectType Type of object within the datasource. For example, a drive might have objects of\ntype file and folder. title Title of the document. body Searchable document body. This might be shown in search result snippets. viewURL A unique URL that can used to view the document in a browser. This viewURL must\nalso match the urlRegex specified while creating the datasource. permissions This can be used to control visibility of the document in search results for\ndifferent Glean users. For simplicity, in this tutorial, we will only index a\ndocument with anonymous access using permissions.allowAnonymousAccess . cURL Python curl -X POST   https://customer-be.glean.com/api/index/v1/indexdocument \\ -H 'Authorization: Bearer <token>' \\ -H 'Content-Type : application/json' \\ -d '{ \"document\": { \"datasource\": \"gleantest\", \"objectType\": \"EngineeringDoc\", \"id\": \"blueskytest-1\", \"title\": \"Getting started with Blue Sky\", \"body\": { \"mimeType\": \"text/plain\", \"textContent\": \"This doc will help you get familiar with Blue Sky API\" }, \"permissions\": { \"allowAnonymousAccess\": true }, \"viewURL\": \"https://bluesky.test/blueskytest-1\" } }' from glean . api_client import Glean import os with Glean ( api_token = os . getenv ( \"GLEAN_API_TOKEN\" , \"\" ) , instance = os . getenv ( \"GLEAN_INSTANCE\" , \"\" ) , ) as client : # Index a document try : client . indexing . documents . index ( request = { \"document\" : { \"datasource\" : \"gleantest\" , \"objectType\" : \"EngineeringDoc\" , \"id\" : \"blueskytest-1\" , \"title\" : \"This doc will help you get familiar with Blue Sky API\" , \"viewURL\" : \"https://bluesky.test/blueskytest-1\" , \"body\" : { \"mimeType\" : \"text/plain\" , \"textContent\" : \"This doc will help you get familiar with Blue Sky API\" } , \"permissions\" : { \"allowAnonymousAccess\" : True } } } ) except Exception as e : print ( f\"Exception when indexing document: { e } \" ) To learn about more document customization options here To learn more about how to set up user identities, and more complex permissions,\nread Setting\npermissions To index documents in bulk, you can use Bulk\nindexing For helpful troubleshooting tips, read Troubleshooting Enable search results for the datasource ​ To be able to search for the indexed document in Glean, it must be enabled show up in search results. Glean admins can go to the 'Overview' tab on the setup page for their custom app to enable the datasource to show up in search results. Results can be configured to be visible to all teammates or to their configured test group info Document permissions are respected even when results are enabled for All   teammates or Test group only . Enabling results for All teammates / Test   group only does not mean configured permissions for documents will be\noverridden. Success! ​ success Once these steps are done, you should be able to search for the indexed\ndocument in Glean when logged in as the user added above. Note that it can\ntake a few minutes for the document to reflect in the index after an\n/indexdocument call. More examples ​ Take a look at our open-sourced repository for more code examples: Refer to the Wikipedia toy example which indexes some relevant articles from Wikipedia using the Indexing API. note Help us improve by contributing to the open-sourced repository by suggesting\nmore examples and creating issues with feedback! Edit this page Previous Setup Datasources Next Overview Index a document for the datasource Enable search results for the datasource Success! More examples",
      "topics": [
        "indexing-api",
        "getting-started",
        "documents"
      ],
      "description": "This page provides a beginner's guide to using the Indexing API, focusing on how to configure a datasource, index a document with key metadata, and enable search visibility. It includes code examples in cURL and Python, and covers core concepts like document structure, permissions, and troubleshooting tips."
    },
    "https://developers.glean.com/api/client-api/shortcuts/updateshortcut": {
      "content": "Client API Reference Shortcuts Update shortcut Update shortcut POST /rest/api/v1/updateshortcut Updates the shortcut with the given ID. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous List shortcuts Next Overview",
      "topics": [
        "client-api",
        "api-clients"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/summarize/summarize": {
      "content": "Client API Reference Summarize Summarize documents Summarize documents POST /rest/api/v1/summarize Generate an AI summary of the requested documents. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Overview Next Overview",
      "topics": [
        "client-api",
        "documents",
        "answers"
      ],
      "description": "This page provides reference documentation for the Client API's document summarization endpoint, which uses AI to generate summaries of requested documents. It outlines the POST request structure and possible responses, focusing on programmatic access to AI-generated document summaries."
    },
    "https://developers.glean.com/guides/chat/chatbot-example": {
      "content": "Guides Chat Chatbot Example On this page Simple Chatbot Example This example demonstrates how to build a simple chatbot using Glean's Chat API with the official Python client. The chatbot can answer questions using your company's knowledge base. Prerequisites ​ Glean API token with CHAT scope Python 3.8+ Your Glean instance name Installation ​ pip install glean-api-client Basic Chat Example ​ import os from glean . api_client import Glean , models def send_chat_message ( message_text ) : \"\"\"Send a message to Glean Chat and get the response.\"\"\" api_token = os . getenv ( \"GLEAN_API_TOKEN\" ) instance = os . getenv ( \"GLEAN_INSTANCE\" ) if not api_token : raise ValueError ( \"GLEAN_API_TOKEN environment variable is required\" ) if not instance : raise ValueError ( \"GLEAN_INSTANCE environment variable is required\" ) with Glean ( api_token = api_token , instance = instance ) as glean : try : response = glean . client . chat . create ( messages = [ { \"fragments\" : [ models . ChatMessageFragment ( text = message_text , ) , ] , } , ] , ) if response . messages : last_message = response . messages [ - 1 ] if hasattr ( last_message , 'fragments' ) and last_message . fragments : for fragment in last_message . fragments : if hasattr ( fragment , 'text' ) and fragment . text : return fragment . text return \"No response received\" except Exception as e : return f\"Error: { str ( e ) } \" def main ( ) : \"\"\"Simple interactive chatbot.\"\"\" print ( \"Glean Chatbot - Type 'quit' to exit\" ) print ( \"-\" * 40 ) while True : user_input = input ( \"\\nYou: \" ) . strip ( ) if user_input . lower ( ) in [ 'quit' , 'exit' , 'q' ] : print ( \"Goodbye!\" ) break if not user_input : continue print ( \"Bot: \" , end = \"\" , flush = True ) try : response = send_chat_message ( user_input ) print ( response ) except ValueError as e : print ( f\"Setup error: { e } \" ) break if __name__ == \"__main__\" : main ( ) Environment Setup ​ Create a .env file in your project directory: GLEAN_API_TOKEN=your_chat_token_here GLEAN_INSTANCE=your_company_name Running the Example ​ Set your environment variables: export GLEAN_API_TOKEN=\"your_chat_token_here\" export GLEAN_INSTANCE=\"your_company_name\" Run the chatbot: python chatbot.py Start asking questions: You: What is our vacation policy? Bot: Based on your company's HR documentation, here are the key points about vacation policy... You: Who should I contact about benefits? Bot: For benefits questions, you should reach out to... Streaming Chat Example ​ For real-time streaming responses: import os from glean . api_client import Glean , models def stream_chat_response ( message_text ) : \"\"\"Stream chat response in real-time.\"\"\" api_token = os . getenv ( \"GLEAN_API_TOKEN\" ) instance = os . getenv ( \"GLEAN_INSTANCE\" ) if not api_token : print ( \"Error: GLEAN_API_TOKEN environment variable required\" ) return if not instance : print ( \"Error: GLEAN_INSTANCE environment variable required\" ) return with Glean ( api_token = api_token , instance = instance ) as glean : try : response_stream = glean . client . chat . create_stream ( messages = [ { \"fragments\" : [ models . ChatMessageFragment ( text = message_text , ) , ] , } , ] , ) print ( \"Bot: \" , end = \"\" , flush = True ) for chunk in response_stream : if chunk : print ( chunk , end = \"\" , flush = True ) print ( ) except Exception as e : print ( f\"Error during streaming: { e } \" ) def main ( ) : \"\"\"Interactive streaming chatbot.\"\"\" print ( \"Glean Streaming Chatbot - Type 'quit' to exit\" ) print ( \"-\" * 45 ) while True : user_input = input ( \"\\nYou: \" ) . strip ( ) if user_input . lower ( ) in [ 'quit' , 'exit' , 'q' ] : print ( \"Goodbye!\" ) break if user_input : stream_chat_response ( user_input ) if __name__ == \"__main__\" : main ( ) Conversation History Example ​ Maintain context across multiple messages: import os from glean . api_client import Glean , models class ConversationalChatbot : def __init__ ( self ) : self . chat_id = None self . api_token = os . getenv ( \"GLEAN_API_TOKEN\" ) self . instance = os . getenv ( \"GLEAN_INSTANCE\" ) if not self . api_token : raise ValueError ( \"GLEAN_API_TOKEN environment variable is required\" ) if not self . instance : raise ValueError ( \"GLEAN_INSTANCE environment variable is required\" ) def send_message ( self , user_message ) : \"\"\"Send a message with conversation history.\"\"\" with Glean ( api_token = self . api_token , instance = self . instance ) as glean : try : response = glean . client . chat . create ( messages = [ { \"fragments\" : [ models . ChatMessageFragment ( text = user_message , ) , ] , } , ] , chat_id = self . chat_id , save_chat = True , ) if hasattr ( response , 'chat_id' ) and response . chat_id : self . chat_id = response . chat_id if response . messages : last_message = response . messages [ - 1 ] if hasattr ( last_message , 'fragments' ) and last_message . fragments : for fragment in last_message . fragments : if hasattr ( fragment , 'text' ) and fragment . text : return fragment . text return \"No response received\" except Exception as e : return f\"Error: { str ( e ) } \" def reset_conversation ( self ) : \"\"\"Start a new conversation.\"\"\" self . chat_id = None def main ( ) : \"\"\"Conversational chatbot with memory.\"\"\" print ( \"Glean Conversational Chatbot\" ) print ( \"Type 'quit' to exit, 'reset' to start new conversation\" ) print ( \"-\" * 55 ) try : chatbot = ConversationalChatbot ( ) except ValueError as e : print ( f\"Setup error: { e } \" ) return while True : user_input = input ( \"\\nYou: \" ) . strip ( ) if user_input . lower ( ) in [ 'quit' , 'exit' , 'q' ] : print ( \"Goodbye!\" ) break elif user_input . lower ( ) == 'reset' : chatbot . reset_conversation ( ) print ( \"Started new conversation!\" ) continue elif not user_input : continue print ( \"Bot: \" , end = \"\" , flush = True ) response = chatbot . send_message ( user_input ) print ( response ) if __name__ == \"__main__\" : main ( ) Error Handling ​ Add robust error handling for production use: import logging from glean . api_client import Glean , models from glean . api_client . errors import GleanError logging . basicConfig ( level = logging . INFO ) logger = logging . getLogger ( __name__ ) def send_chat_message_with_retry ( message_text , max_retries = 3 ) : \"\"\"Send chat message with retry logic.\"\"\" api_token = os . getenv ( \"GLEAN_API_TOKEN\" ) instance = os . getenv ( \"GLEAN_INSTANCE\" ) if not api_token : return \"Missing GLEAN_API_TOKEN\" if not instance : return \"Missing GLEAN_INSTANCE\" for attempt in range ( max_retries ) : try : with Glean ( api_token = api_token , instance = instance ) as glean : response = glean . client . chat . create ( messages = [ { \"fragments\" : [ models . ChatMessageFragment ( text = message_text , ) , ] , } , ] , ) if response . messages : last_message = response . messages [ - 1 ] if hasattr ( last_message , 'fragments' ) and last_message . fragments : for fragment in last_message . fragments : if hasattr ( fragment , 'text' ) and fragment . text : return fragment . text return \"No response received\" except GleanError as e : logger . warning ( f\"Glean API error on attempt { attempt + 1 } : { e } \" ) if attempt == max_retries - 1 : return f\"Failed after { max_retries } attempts: { e } \" except Exception as e : logger . error ( f\"Unexpected error: { e } \" ) return f\"Unexpected error: { e } \" return \"Failed to get response\" Advanced Features ​ Using Custom Agents ​ # Use a specific agent for specialized responses with Glean ( api_token = api_token , instance = instance ) as glean : response = glean . client . chat . create ( messages = [ { \"fragments\" : [ models . ChatMessageFragment ( text = \"Help me write a technical document\" , ) , ] , } , ] , agent_id = \"your-custom-agent-id\" , ) Next Steps ​ Add conversation persistence : Use the chat_id to maintain long-running conversations Implement user authentication : Handle different user permissions Add file upload support : Use upload_files() for document analysis Deploy as a web service : Use Flask/FastAPI to create a web interface Integrate with Slack/Teams : Build a bot for your team chat platform Related Documentation ​ Chat API Reference Authentication Guide Python API Client Edit this page Previous Overview Next Overview Prerequisites Installation Basic Chat Example Environment Setup Running the Example Streaming Chat Example Conversation History Example Error Handling Advanced Features Using Custom Agents Next Steps Related Documentation",
      "topics": [
        "chat",
        "api-clients",
        "getting-started"
      ],
      "description": "This page provides a step-by-step guide for building a chatbot using Glean's Chat API and the official Python client. It covers basic setup, streaming responses, conversation history, error handling, and integration tips, making it a practical introduction for developers starting with Glean's chat functionality."
    },
    "https://developers.glean.com/api/client-api/collections/addcollectionitems": {
      "content": "Client API Reference Collections Add Collection item Add Collection item POST /rest/api/v1/addcollectionitems Add items to a Collection. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Delete Collection Next Update Collection item",
      "topics": [
        "client-api",
        "collections",
        "api-clients"
      ],
      "description": "This page provides reference documentation for the Client API endpoint to add items to a Collection, including request details and possible responses. It is part of the API documentation focused on managing collections programmatically."
    },
    "https://developers.glean.com/api/client-api/collections/createcollection": {
      "content": "Client API Reference Collections Create Collection Create Collection POST /rest/api/v1/createcollection Create a publicly visible (empty) Collection of documents. Request ​ Responses ​ 200 400 401 422 429 OK Invalid request Not Authorized Semantic error Too Many Requests Previous List Collections Next Read Collection",
      "topics": [
        "collections",
        "api-clients",
        "client-api"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/collections/getcollection": {
      "content": "Client API Reference Collections Read Collection Read Collection POST /rest/api/v1/getcollection beta This endpoint is in Beta. Expect changes and instability. Read the details of a Collection given its ID. Does not fetch items in this Collection. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Create Collection Next Update Collection",
      "topics": [
        "collections",
        "client-api"
      ],
      "description": "This page provides documentation for the Client API endpoint to read the details of a Collection by its ID, including request structure, responses, and status codes. It specifically covers retrieving metadata about a Collection without fetching its contents."
    },
    "https://developers.glean.com/api/client-api/collections/listcollections": {
      "content": "Client API Reference Collections List Collections List Collections POST /rest/api/v1/listcollections List all existing Collections. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Overview Next Create Collection",
      "topics": [
        "client-api",
        "collections"
      ],
      "description": "This page documents the Client API endpoint for listing all existing Collections, including request details and possible responses such as success, invalid request, or authorization errors."
    },
    "https://developers.glean.com/api/client-api/collections/editcollectionitem": {
      "content": "Client API Reference Collections Update Collection item Update Collection item POST /rest/api/v1/editcollectionitem Update the URL, Glean Document ID, description of an item within a Collection given its ID. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Add Collection item Next Delete Collection item",
      "topics": [
        "collections",
        "client-api",
        "api-clients"
      ],
      "description": "This page provides reference documentation for the API endpoint used to update an item within a Collection, including modifying its URL, Glean Document ID, and description. It details the request structure, responses, and status codes."
    },
    "https://developers.glean.com/api/client-api/collections/deletecollection": {
      "content": "Client API Reference Collections Delete Collection Delete Collection POST /rest/api/v1/deletecollection Delete a Collection given the Collection's ID. Request ​ Responses ​ 200 400 401 422 429 OK Invalid request Not Authorized Semantic error Too Many Requests Previous Update Collection Next Add Collection item",
      "topics": [
        "client-api",
        "collections"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/documents/getdocumentsbyfacets": {
      "content": "Client API Reference Documents Read documents by facets Read documents by facets POST /rest/api/v1/getdocumentsbyfacets beta This endpoint is in Beta. Expect changes and instability. Read the documents including metadata (does not include enhanced metadata via /documentmetadata ) macthing the given facet conditions. Request ​ Responses ​ 200 400 401 404 429 OK Invalid request Not Authorized Not Found Too Many Requests Previous Read documents Next Overview",
      "topics": [
        "client-api",
        "documents"
      ],
      "description": "This page provides reference documentation for the Client API endpoint that retrieves documents based on facet conditions, including metadata. It details the POST request structure, available responses, and notes the beta status of the endpoint."
    },
    "https://developers.glean.com/api/client-api/collections/editcollection": {
      "content": "Client API Reference Collections Update Collection Update Collection POST /rest/api/v1/editcollection Update the properties of an existing Collection. Request ​ Responses ​ 200 400 401 422 429 OK Invalid request Not Authorized Semantic error Too Many Requests Previous Read Collection Next Delete Collection",
      "topics": [
        "client-api",
        "collections"
      ],
      "description": "This page provides reference documentation for updating an existing Collection via the Client API, detailing the endpoint, request parameters, and possible responses. It focuses on the functionality to modify Collection properties programmatically."
    },
    "https://developers.glean.com/api/indexing-api/rotate-token": {
      "content": "Indexing API Reference Authentication Rotate token Rotate token POST /api/index/v1/rotatetoken Rotates the secret value inside the Indexing API token and returns the new raw secret. All other properties of the token are unchanged. In order to rotate the secret value, include the token as the bearer token in the /rotatetoken request. Please refer to Token rotation documentation for more information. Responses ​ 200 400 401 OK Bad Request Not Authorized Previous Overview Next Overview",
      "topics": [
        "indexing-api",
        "authentication"
      ],
      "description": "This page provides reference documentation for rotating an Indexing API token's secret value using a POST request. It explains how to perform the rotation and the expected responses, emphasizing secure authentication practices."
    },
    "https://developers.glean.com/api/indexing-api/add-or-update-datasource": {
      "content": "Indexing API Reference Datasources Add or update datasource Add or update datasource POST /api/index/v1/adddatasource Add or update a custom datasource and its schema. Request ​ Responses ​ 200 400 401 OK Bad Request Not Authorized Previous Overview Next Get datasource config",
      "topics": [
        "indexing-api",
        "datasources"
      ],
      "description": "This page provides reference documentation for the \"Add or update datasource\" endpoint in the Indexing API, allowing developers to create or modify a custom datasource and its schema via a POST request. It includes details on request structure, responses, and status codes."
    },
    "https://developers.glean.com/api/client-api/chat/listchats": {
      "content": "Client API Reference Chat Retrieves all saved Chats Retrieves all saved Chats POST /rest/api/v1/listchats Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content. Request ​ Responses ​ 200 401 403 429 OK Not Authorized Forbidden Too Many Requests Previous Retrieves a Chat Next Gets the metadata for a custom Chat application",
      "topics": [
        "chat",
        "client-api"
      ],
      "description": "This page provides API reference documentation for retrieving saved chat metadata between the user and Glean Assistant, including endpoint details, request/response formats, and status codes. It focuses on the Client API's functionality for managing chat history without exposing conversational content."
    },
    "https://developers.glean.com/api/client-api/chat/getchat": {
      "content": "Client API Reference Chat Retrieves a Chat Retrieves a Chat POST /rest/api/v1/getchat Retrieves the chat history between Glean Assistant and the user for a given Chat. Request ​ Responses ​ 200 400 401 403 429 OK Invalid request Not Authorized Forbidden Too Many Requests Previous Deletes saved Chats Next Retrieves all saved Chats",
      "topics": [
        "client-api",
        "chat"
      ],
      "description": "This page provides a reference for the Client API endpoint that retrieves chat history between a user and Glean Assistant. It details the request structure, response codes, and related operations for managing saved chats."
    },
    "https://developers.glean.com/api/client-api/chat/chat": {
      "content": "Client API Reference Chat Chat Chat POST /rest/api/v1/chat Have a conversation with Glean AI. Request ​ Responses ​ 200 400 401 408 429 OK Invalid request Not Authorized Request Timeout Too Many Requests Previous Overview Next Deletes all saved Chats owned by a user",
      "topics": [
        "chat",
        "client-api"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/chat/getchatapplication": {
      "content": "Client API Reference Chat Gets the metadata for a custom Chat application Gets the metadata for a custom Chat application POST /rest/api/v1/getchatapplication beta This endpoint is in Beta. Expect changes and instability. Gets the Chat application details for the specified application ID. Request ​ Responses ​ 200 400 401 403 OK Invalid request Not Authorized Forbidden Previous Retrieves all saved Chats Next Upload files for Chat.",
      "topics": [
        "chat",
        "client-api"
      ],
      "description": "This page provides a reference for the Client API endpoint that retrieves metadata and details for a custom Chat application by its ID. It is part of the chat functionality and falls under client-facing API interactions."
    },
    "https://developers.glean.com/api/client-api/chat/uploadchatfiles": {
      "content": "Client API Reference Chat Upload files for Chat. Upload files for Chat. POST /rest/api/v1/uploadchatfiles Upload files for Chat. Request ​ Responses ​ 200 400 401 403 429 OK Invalid request Not Authorized Forbidden Too Many Requests Previous Gets the metadata for a custom Chat application Next Get files uploaded by a user for Chat.",
      "topics": [
        "chat",
        "api-clients"
      ],
      "description": "This page provides API reference documentation for uploading files in a chat context, detailing the endpoint, request structure, and possible responses. Its main purpose is to guide developers on how to use the Client API to upload files for Chat functionality."
    },
    "https://developers.glean.com/api/client-api/chat/chat-stream": {
      "content": "Client API Reference Chat Chat Chat POST /rest/api/v1/chat#stream Have a conversation with Glean AI. Request ​ Responses ​ 200 400 401 408 429 OK Invalid request Not Authorized Request Timeout Too Many Requests Previous Delete files uploaded by a user for chat. Next Overview",
      "topics": [
        "chat",
        "client-api"
      ],
      "description": "This page provides reference documentation for the Client API endpoint used to stream chat interactions with Glean AI, detailing request and response formats, status codes, and usage for conversational queries."
    },
    "https://developers.glean.com/api/client-api/chat/deletechatfiles": {
      "content": "Client API Reference Chat Delete files uploaded by a user for chat. Delete files uploaded by a user for chat. POST /rest/api/v1/deletechatfiles Delete files uploaded by a user for Chat. Request ​ Responses ​ 200 400 401 403 429 OK Invalid request Not Authorized Forbidden Too Many Requests Previous Get files uploaded by a user for Chat. Next Chat",
      "topics": [
        "client-api",
        "chat",
        "documents"
      ],
      "description": "This page provides API reference documentation for deleting files uploaded by a user in the context of chat, detailing the endpoint, request structure, and possible responses. It is part of the Client API and focuses on file management within chat functionality."
    },
    "https://developers.glean.com/api/client-api/chat/getchatfiles": {
      "content": "Client API Reference Chat Get files uploaded by a user for Chat. Get files uploaded by a user for Chat. POST /rest/api/v1/getchatfiles Get files uploaded by a user for Chat. Request ​ Responses ​ 200 400 401 403 429 OK Invalid request Not Authorized Forbidden Too Many Requests Previous Upload files for Chat. Next Delete files uploaded by a user for chat.",
      "topics": [
        "client-api",
        "chat",
        "api-clients"
      ],
      "description": "This page documents the Client API endpoint for retrieving files uploaded by a user in the context of Chat, including request details, response codes, and navigation to related operations. Its main purpose is to provide developers with reference information for managing user-uploaded chat files via API."
    },
    "https://developers.glean.com/api/client-api/chat/deleteallchats": {
      "content": "Client API Reference Chat Deletes all saved Chats owned by a user Deletes all saved Chats owned by a user POST /rest/api/v1/deleteallchats Deletes all saved Chats a user has had and all their contained conversational content. Request ​ Responses ​ 200 400 401 403 OK Invalid request Not Authorized Forbidden Previous Chat Next Deletes saved Chats",
      "topics": [
        "client-api",
        "chat"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/chat/deletechats": {
      "content": "Client API Reference Chat Deletes saved Chats Deletes saved Chats POST /rest/api/v1/deletechats Deletes saved Chats and all their contained conversational content. Request ​ Responses ​ 200 400 401 403 429 OK Invalid request Not Authorized Forbidden Too Many Requests Previous Deletes all saved Chats owned by a user Next Retrieves a Chat",
      "topics": [
        "chat",
        "client-api"
      ],
      "description": "This page documents the Client API endpoint for deleting saved chats, including request details, response codes, and its impact on conversational data. It is part of the broader chat and client API reference documentation."
    },
    "https://developers.glean.com/guides/agents/langchain": {
      "content": "Guides Agents LangChain Integration On this page Glean LangChain Integration Glean's official LangChain integration enables you to build powerful AI agents that can search and reason over your organization's knowledge using Python and the LangChain framework. langchain-glean Official LangChain integration for Glean's search and chat capabilities Installation ​ pip poetry uv pip install -U langchain-glean poetry add langchain-glean uv add langchain-glean Configuration ​ API Tokens ​ You'll need Glean API credentials , and specifically a user-scoped API token . API Tokens require the following scopes: chat , search . You should speak to your Glean administrator to provision these tokens. Configure Environment Variables ​ Configure your Glean credentials by setting the following environment variables: export GLEAN_INSTANCE=\"your-glean-instance\" export GLEAN_API_TOKEN=\"your-glean-api-token\" export GLEAN_ACT_AS=\"user@example.com\"  # Optional: Email to act as when making requests To determine your GLEAN_INSTANCE value, see our instance lookup guide for detailed instructions. Usage Examples ​ Using the Retriever ​ The GleanSearchRetriever allows you to search and retrieve documents from Glean: from langchain_glean . retrievers import GleanSearchRetriever # Initialize the retriever (will use environment variables) retriever = GleanSearchRetriever ( ) # Search for documents documents = retriever . invoke ( \"quarterly sales report\" ) # Process the results for doc in documents : print ( f\"Title: { doc . metadata . get ( 'title' ) } \" ) print ( f\"URL: { doc . metadata . get ( 'url' ) } \" ) print ( f\"Content: { doc . page_content } \" ) print ( \"---\" ) Building an Agent with Tools ​ The GleanSearchTool can be used in LangChain agents to search Glean: from langchain_core . prompts import ChatPromptTemplate from langchain_openai import ChatOpenAI from langchain . agents import AgentExecutor , create_openai_tools_agent from langchain_glean . retrievers import GleanSearchRetriever from langchain_glean . tools import GleanSearchTool # Initialize the retriever retriever = GleanSearchRetriever ( ) # Create the tool glean_tool = GleanSearchTool ( retriever = retriever , name = \"glean_search\" , description = \"Search for information in your organization's content using Glean.\" ) # Create an agent with the tool llm = ChatOpenAI ( model = \"gpt-4o\" ) prompt = ChatPromptTemplate . from_messages ( [ ( \"system\" , \"You are a helpful assistant with access to Glean search.\" ) , ( \"user\" , \"{input}\" ) ] ) agent = create_openai_tools_agent ( llm , [ glean_tool ] , prompt ) agent_executor = AgentExecutor ( agent = agent , tools = [ glean_tool ] ) # Run the agent response = agent_executor . invoke ( { \"input\" : \"Find the latest quarterly report\" } ) print ( response [ \"output\" ] ) RAG with LangChain Chains ​ You can integrate the retriever with LangChain chains for more complex workflows: from langchain_core . output_parsers import StrOutputParser from langchain_core . prompts import ChatPromptTemplate from langchain_core . runnables import RunnablePassthrough from langchain_openai import ChatOpenAI from langchain_glean . retrievers import GleanSearchRetriever # Initialize the retriever retriever = GleanSearchRetriever ( ) # Create a prompt template prompt = ChatPromptTemplate . from_template ( \"\"\"Answer the question based only on the context provided. Context: {context} Question: {question}\"\"\" ) # Initialize the language model llm = ChatOpenAI ( model = \"gpt-4o\" ) # Format documents function def format_docs ( docs ) : return \"\\n\\n\" . join ( doc . page_content for doc in docs ) # Create the chain chain = ( { \"context\" : retriever | format_docs , \"question\" : RunnablePassthrough ( ) } | prompt | llm | StrOutputParser ( ) ) # Run the chain result = chain . invoke ( \"What were our Q2 sales results?\" ) print ( result ) Advanced Usage ​ Search Parameters ​ You can customize your search by passing additional parameters: # Search with additional parameters documents = retriever . invoke ( \"quarterly sales report\" , page_size = 5 , # Number of results to return disable_spellcheck = True , # Disable spellcheck max_snippet_size = 200 # Maximum snippet size ) Custom Retriever Configuration ​ Configure the retriever with custom settings: # Initialize with custom settings retriever = GleanSearchRetriever ( instance = \"your-instance\" , # Override environment variable api_token = \"your-api-token\" , # Override environment variable act_as = \"user@example.com\" , # Override environment variable page_size = 10 , # Default number of results max_snippet_size = 300 # Default snippet size ) For the complete API documentation and implementation details, visit the GitHub repository . Edit this page Previous Direct API Integration Next Agent Toolkit Installation Configuration Usage Examples Advanced Usage",
      "topics": [
        "agents",
        "api-clients",
        "integration"
      ],
      "description": "This page provides guidance on integrating Glean with the LangChain framework to build AI agents that can search and reason over organizational knowledge. It covers installation, configuration, and usage examples for retrieving data, building agents with tools, and implementing RAG workflows using Glean's Python client."
    },
    "https://developers.glean.com/guides/agents/direct-api": {
      "content": "Guides Agents Direct API Integration On this page Direct API Integration Build custom agents using Glean's REST APIs with our official client libraries. This approach gives you full control over the agent logic while leveraging Glean's search and chat capabilities. When to Use ​ Custom business logic requirements Integration with existing systems Fine-grained control over agent behavior Multi-language support needs Available Client Libraries ​ Python SDK pip install glean-api-client TypeScript SDK npm install @gleanwork/api-client Go SDK go get github.com/gleanwork/api-client-go Java SDK < dependency > < groupId > com.glean.api-client </ groupId > < artifactId > glean-api-client </ artifactId > < version > 0.x.x </ version > </ dependency > Key APIs for Agent Building ​ API Purpose Use Case Agents API Manage and execute pre-built agents Use agents created in Agent Builder Chat API Conversational AI with context Build chat-based agents Search API Enterprise search capabilities Retrieve relevant documents Summarization API AI-powered content summarization Process and digest information Example: Python Agent ​ Basic Agent Advanced Agent import os from glean . api_client import Glean , models class CustomAgent : def __init__ ( self ) : self . api_token = os . getenv ( \"GLEAN_API_TOKEN\" ) self . instance = os . getenv ( \"GLEAN_INSTANCE\" ) if not self . api_token or not self . instance : raise ValueError ( \"GLEAN_API_TOKEN and GLEAN_INSTANCE must be set\" ) def search_documents ( self , query : str , page_size : int = 5 ) : \"\"\"Search for relevant documents\"\"\" with Glean ( api_token = self . api_token , instance = self . instance ) as glean : try : response = glean . client . search . search ( query = query , page_size = page_size ) return response . results if hasattr ( response , 'results' ) else [ ] except Exception as e : print ( f\"Search error: { e } \" ) return [ ] def chat_with_context ( self , query : str , search_results = None ) - > str : \"\"\"Generate response using chat API\"\"\" with Glean ( api_token = self . api_token , instance = self . instance ) as glean : try : # Prepare context from search results context = \"\" if search_results : context = \"\\n\" . join ( [ f\"- { result . get ( 'title' , '' ) } : { result . get ( 'snippet' , '' ) } \" for result in search_results [ : 3 ] ] ) # Prepare the message with context message_text = query if context : message_text = f\"Context:\\n { context } \\n\\nQuestion: { query } \" response = glean . client . chat . create ( messages = [ { \"fragments\" : [ models . ChatMessageFragment ( text = message_text ) ] } ] ) # Extract response text if response . messages : last_message = response . messages [ - 1 ] if hasattr ( last_message , 'fragments' ) and last_message . fragments : for fragment in last_message . fragments : if hasattr ( fragment , 'text' ) and fragment . text : return fragment . text return \"No response received\" except Exception as e : return f\"Chat error: { e } \" def process_query ( self , query : str ) - > dict : \"\"\"Process a query by searching and then chatting\"\"\" # First search for relevant documents search_results = self . search_documents ( query ) # Then use chat to answer based on search results answer = self . chat_with_context ( query , search_results ) return { \"answer\" : answer , \"sources\" : search_results [ : 3 ] , \"total_sources\" : len ( search_results ) } # Usage agent = CustomAgent ( ) result = agent . process_query ( \"What is our vacation policy?\" ) print ( f\"Answer: { result [ 'answer' ] } \" ) print ( f\"Found { result [ 'total_sources' ] } relevant documents\" ) import os from glean . api_client import Glean , models from typing import List , Dict , Optional class AdvancedAgent : def __init__ ( self ) : self . api_token = os . getenv ( \"GLEAN_API_TOKEN\" ) self . instance = os . getenv ( \"GLEAN_INSTANCE\" ) self . conversation_history = [ ] if not self . api_token or not self . instance : raise ValueError ( \"GLEAN_API_TOKEN and GLEAN_INSTANCE must be set\" ) def search_with_filters ( self , query : str , filters : Optional [ Dict ] = None , page_size : int = 10 ) - > List [ Dict ] : \"\"\"Search with optional filters\"\"\" with Glean ( api_token = self . api_token , instance = self . instance ) as glean : try : search_params = { \"query\" : query , \"page_size\" : page_size } if filters : search_params [ \"request_options\" ] = { \"facet_filters\" : filters } response = glean . client . search . search ( ** search_params ) return response . results if hasattr ( response , 'results' ) else [ ] except Exception as e : print ( f\"Search error: { e } \" ) return [ ] def chat_with_context ( self , query : str , context_docs : Optional [ List [ Dict ] ] = None , save_to_history : bool = True ) - > str : \"\"\"Chat with document context and conversation history\"\"\" with Glean ( api_token = self . api_token , instance = self . instance ) as glean : try : # Build message with context message_parts = [ ] if context_docs : context_text = \"\\n\" . join ( [ f\"- { doc . get ( 'title' , 'Unknown' ) } : { doc . get ( 'snippet' , '' ) } \" for doc in context_docs [ : 3 ] if doc . get ( 'snippet' ) ] ) if context_text : message_parts . append ( f\"Relevant context:\\n { context_text } \" ) message_parts . append ( f\"Question: { query } \" ) full_message = \"\\n\\n\" . join ( message_parts ) # Include conversation history if available messages = [ ] for hist_msg in self . conversation_history [ - 4 : ] : # Last 4 messages for context messages . append ( hist_msg ) # Add current message current_message = { \"fragments\" : [ models . ChatMessageFragment ( text = full_message ) ] } messages . append ( current_message ) response = glean . client . chat . create ( messages = messages ) # Extract response answer = \"No response received\" if response . messages : last_message = response . messages [ - 1 ] if hasattr ( last_message , 'fragments' ) and last_message . fragments : for fragment in last_message . fragments : if hasattr ( fragment , 'text' ) and fragment . text : answer = fragment . text break # Save to conversation history if save_to_history : self . conversation_history . append ( current_message ) self . conversation_history . append ( { \"fragments\" : [ models . ChatMessageFragment ( text = answer ) ] } ) # Keep only last 10 messages if len ( self . conversation_history ) > 10 : self . conversation_history = self . conversation_history [ - 10 : ] return answer except Exception as e : return f\"Chat error: { e } \" def summarize_documents ( self , documents : List [ Dict ] ) - > str : \"\"\"Summarize a list of documents\"\"\" with Glean ( api_token = self . api_token , instance = self . instance ) as glean : try : doc_texts = [ ] for doc in documents [ : 5 ] : # Limit to 5 docs title = doc . get ( 'title' , 'Unknown Document' ) snippet = doc . get ( 'snippet' , '' ) if snippet : doc_texts . append ( f\" { title } : { snippet } \" ) if not doc_texts : return \"No documents to summarize\" content_to_summarize = \"\\n\\n\" . join ( doc_texts ) response = glean . client . summarize . summarize ( text = content_to_summarize , summary_type = \"brief\" ) return response . summary if hasattr ( response , 'summary' ) else \"Could not generate summary\" except Exception as e : return f\"Summarization error: { e } \" def process_complex_query ( self , query : str , department : Optional [ str ] = None , include_summary : bool = False ) - > Dict : \"\"\"Process query with department filtering and optional summarization\"\"\" filters = { } if department : filters [ \"department\" ] = [ department ] # Search for documents search_results = self . search_with_filters ( query , filters ) # Generate answer with context answer = self . chat_with_context ( query , search_results ) result = { \"answer\" : answer , \"sources\" : search_results [ : 5 ] , \"total_sources\" : len ( search_results ) , \"department_filter\" : department } # Add summary if requested if include_summary and search_results : result [ \"summary\" ] = self . summarize_documents ( search_results ) return result def reset_conversation ( self ) : \"\"\"Clear conversation history\"\"\" self . conversation_history = [ ] # Usage agent = AdvancedAgent ( ) # Basic query result = agent . process_complex_query ( \"What are the remote work guidelines?\" , department = \"HR\" , include_summary = True ) print ( f\"Answer: { result [ 'answer' ] } \" ) print ( f\"Summary: { result . get ( 'summary' , 'No summary available' ) } \" ) print ( f\"Found { result [ 'total_sources' ] } sources\" ) # Follow-up question (uses conversation history) followup = agent . process_complex_query ( \"Are there any exceptions to these guidelines?\" ) print ( f\"Follow-up answer: { followup [ 'answer' ] } \" ) Best Practices ​ Error Handling ​ from glean . api_client . errors import GleanError import time def robust_agent_call ( agent , query , max_retries = 3 ) : \"\"\"Execute agent call with retry logic\"\"\" for attempt in range ( max_retries ) : try : return agent . process_query ( query ) except GleanError as e : if hasattr ( e , 'status_code' ) and e . status_code == 429 : # Rate limited wait_time = 2 ** attempt # Exponential backoff print ( f\"Rate limited, waiting { wait_time } seconds...\" ) time . sleep ( wait_time ) elif attempt == max_retries - 1 : return { \"answer\" : f\"Error after { max_retries } attempts: { e } \" , \"sources\" : [ ] , \"total_sources\" : 0 } else : print ( f\"Attempt { attempt + 1 } failed: { e } \" ) except Exception as e : if attempt == max_retries - 1 : return { \"answer\" : f\"Unexpected error: { e } \" , \"sources\" : [ ] , \"total_sources\" : 0 } return { \"answer\" : \"Failed to get response\" , \"sources\" : [ ] , \"total_sources\" : 0 } Caching Results ​ import hashlib import json from datetime import datetime , timedelta class CachedAgent ( CustomAgent ) : def __init__ ( self , cache_ttl_minutes = 30 ) : super ( ) . __init__ ( ) self . _cache = { } self . cache_ttl = timedelta ( minutes = cache_ttl_minutes ) def _cache_key ( self , query : str , filters : dict = None ) - > str : \"\"\"Generate cache key from query and filters\"\"\" cache_",
      "topics": [
        "agents",
        "api-clients",
        "chat"
      ],
      "description": "This page provides guidance on building custom agents using Glean's REST APIs and official client libraries, demonstrating how to integrate search, chat, and summarization capabilities into agent logic. It includes code examples, best practices, and client library instructions for implementing, extending, and managing agents programmatically."
    },
    "https://developers.glean.com/guides/agents/toolkit": {
      "content": "Guides Agents Agent Toolkit On this page Glean Agent Toolkit A Python toolkit that makes it easy to integrate Glean's powerful search and knowledge discovery capabilities into your AI agents. Use pre-built tools with popular agent frameworks or create your own custom tools that work across multiple platforms. When to Use ​ Working with multiple agent frameworks (OpenAI, LangChain, CrewAI, Google ADK) Need production-ready Glean tools (search, employee lookup, calendar, etc.) Want to define tools once and use across frameworks Building agents that require enterprise knowledge access glean-agent-toolkit Official Python toolkit for adapting Glean's enterprise tools across multiple agent frameworks Framework Support ​ The toolkit provides adapters for major agent frameworks: Framework Installation Use Case OpenAI Assistants pip install glean-agent-toolkit[openai] Direct API integration with OpenAI LangChain pip install glean-agent-toolkit[langchain] Rich Python agent ecosystem CrewAI pip install glean-agent-toolkit[crewai] Multi-agent collaboration Google ADK pip install glean-agent-toolkit[adk] Google's Agent Development Kit Available Tools ​ The toolkit comes with production-ready tools that connect to Glean's capabilities: glean_search : Search your company's knowledge base employee_search : Find employees by name, team, department, or expertise calendar_search : Find meetings and calendar events code_search : Search your company's source code repositories gmail_search : Search Gmail messages and conversations outlook_search : Search Outlook mail and calendar items web_search : Search the public web for external information ai_web_search : Query Google Gemini for AI-powered web information Example: Multi-Framework Usage ​ from glean . agent_toolkit . tools import glean_search , employee_search import os # Ensure environment variables are set os . environ [ \"GLEAN_API_TOKEN\" ] = \"your-api-token\" os . environ [ \"GLEAN_INSTANCE\" ] = \"your-instance-name\" # Use with LangChain langchain_search = glean_search . as_langchain_tool ( ) langchain_employees = employee_search . as_langchain_tool ( ) # Use with CrewAI crewai_search = glean_search . as_crewai_tool ( ) crewai_employees = employee_search . as_crewai_tool ( ) # Use with OpenAI Assistants openai_search = glean_search . as_openai_tool ( ) openai_employees = employee_search . as_openai_tool ( ) Custom Tool Creation ​ Define your own tools once using the @tool_spec decorator and use them across any framework: from glean . agent_toolkit import tool_spec from pydantic import BaseModel import requests class WeatherResponse ( BaseModel ) : temperature : float condition : str city : str @tool_spec ( name = \"get_current_weather\" , description = \"Get current weather information for a specified city\" , output_model = WeatherResponse ) def get_weather ( city : str , units : str = \"celsius\" ) - > WeatherResponse : \"\"\"Fetch current weather for a city.\"\"\" return WeatherResponse ( temperature = 22.5 , condition = \"sunny\" , city = city ) # Use across all supported frameworks openai_weather = get_weather . as_openai_tool ( ) langchain_weather = get_weather . as_langchain_tool ( ) crewai_weather = get_weather . as_crewai_tool ( ) Complete Example: Multi-Agent System ​ from glean . agent_toolkit . tools import glean_search , employee_search , calendar_search from crewai import Agent , Task , Crew import os os . environ [ \"GLEAN_API_TOKEN\" ] = \"your-api-token\" os . environ [ \"GLEAN_INSTANCE\" ] = \"your-instance-name\" # Create agents with different specializations researcher = Agent ( role = 'Research Specialist' , goal = 'Find relevant company information and documents' , backstory = 'Expert at searching and analyzing company knowledge' , tools = [ glean_search . as_crewai_tool ( ) ] ) hr_specialist = Agent ( role = 'HR Specialist' , goal = 'Find employee information and schedule meetings' , backstory = 'Expert at employee relations and scheduling' , tools = [ employee_search . as_crewai_tool ( ) , calendar_search . as_crewai_tool ( ) ] ) # Define tasks research_task = Task ( description = 'Find information about our remote work policy' , agent = researcher ) scheduling_task = Task ( description = 'Find the HR manager and check their availability this week' , agent = hr_specialist ) # Create and run the crew crew = Crew ( agents = [ researcher , hr_specialist ] , tasks = [ research_task , scheduling_task ] ) result = crew . kickoff ( ) Key Benefits ​ Framework Agnostic : Write tools once, use everywhere Production-Ready : Pre-built tools for common Glean operations Easy Integration : Simple adapter pattern for different frameworks Consistent API : Same tool interface across all platforms Enterprise Features : Built-in support for Glean's enterprise capabilities Advanced Usage ​ Tool Composition ​ from glean . agent_toolkit . tools import glean_search , employee_search from glean . agent_toolkit import tool_spec @tool_spec ( name = \"research_and_contact\" , description = \"Research a topic and find relevant experts to contact\" ) def research_and_contact ( topic : str ) - > dict : \"\"\"Research a topic and find experts.\"\"\" # Search for documents search_results = glean_search . execute ( topic ) # Extract mentioned people from results mentioned_people = extract_people_from_results ( search_results ) # Find employee details experts = [ ] for person_name in mentioned_people : employee_info = employee_search . execute ( person_name ) if employee_info : experts . append ( employee_info ) return { \"research_results\" : search_results , \"experts\" : experts , \"summary\" : f\"Found { len ( search_results ) } documents and { len ( experts ) } experts on { topic } \" } def extract_people_from_results ( results ) : \"\"\"Extract people mentioned in search results.\"\"\" # Implementation to parse names from document content pass Error Handling and Retries ​ from glean . agent_toolkit . tools import glean_search from glean . agent_toolkit import tool_spec import time @tool_spec ( name = \"robust_search\" , description = \"Search with automatic retries and error handling\" ) def robust_search ( query : str , max_retries : int = 3 ) - > dict : \"\"\"Search with retry logic.\"\"\" for attempt in range ( max_retries ) : try : return glean_search . execute ( query ) except Exception as e : if attempt < max_retries - 1 : time . sleep ( 2 ** attempt ) # Exponential backoff continue else : return { \"error\" : f\"Search failed after { max_retries } attempts: { str ( e ) } \" , \"results\" : [ ] } Next Steps ​ Get Started : Install the toolkit with pip install glean-agent-toolkit Documentation : Visit the GitHub repository for complete documentation Edit this page Previous LangChain Integration Next NVIDIA NIM Example When to Use Framework Support Available Tools Example: Multi-Framework Usage Custom Tool Creation Complete Example: Multi-Agent System Key Benefits Advanced Usage Tool Composition Error Handling and Retries Next Steps",
      "topics": [
        "agents",
        "automation",
        "development-tools"
      ],
      "description": "The page introduces the Glean Agent Toolkit, a Python library that enables developers to integrate Glean's enterprise knowledge capabilities—such as search and employee lookup—into AI agents across multiple frameworks like LangChain, CrewAI, and OpenAI. It emphasizes reusable, production-ready tools and demonstrates how to build, compose, and deploy agent tools consistently across different platforms."
    },
    "https://developers.glean.com/guides/agents/nvidia-example": {
      "content": "Guides Agents NVIDIA NIM Example On this page Build an Agentic AI With NVIDIA NIM and Glean Introduction ​ This article shows you how to create an agent using NVIDIA NIM™ and Glean that can answer user questions about an internal company knowledge base. Some example user questions are: \"How do I request access to the company VPN?\" \"What are the steps to submit an expense report?\" \"What is the process for booking a conference room?\" \"How do I enroll in the company's health insurance plan?\" \"What are the guidelines for remote work?\" \"Where can I find the employee handbook?\" \"How do I update my personal information in the HR portal?\" Source Code ​ The source to this example is available on NVIDIA's Generative AI Examples GitHub Repo . Architecture ​ This application uses: NVIDIA NIM microservices for foundational LLMs and embedding models Glean for storing the corporate knowledge base Glean Search API for accessing the Glean knowledge base Chroma DB for storing cached query results and performing RAG LangGraph for creating an agent Because both Glean and NVIDIA NIM microservices can be deployed in a private environment, you can deploy this enterprise chatbot while ensuring that all data remains securely within your control. Prerequisites ​ Python with the langchain_nvidia_ai_endpoints module A Glean deployment A Glean API key An NVIDIA API Key . Test connection to NIM microservices ​ Before starting with the agent, you should test the LLM and embedding NIM microservices. Perform the following steps to configure your environment and create an application to test your connectivity: Set the following environment variables: export GLEAN_API_KEY=\"YOUR GLEAN API KEY\" export GLEAN_API_BASE_URL=\"https://your-org.glean.com/rest/api/v1\" export NVIDIA_API_KEY=\"nvapi-YOUR NVIDIA API KEY\" Create a python file called chatbot.py to instantiate the LLM and embedding model: import os from langchain_nvidia_ai_endpoints import ChatNVIDIA , NVIDIAEmbeddings model = ChatNVIDIA ( model = \"meta/llama-3.3-70b-instruct\" , api_key = os . getenv ( \"NVIDIA_API_KEY\" ) ) embeddings = NVIDIAEmbeddings ( model = \"nvidia/llama-3.2-nv-embedqa-1b-v2\" , api_key = os . getenv ( \"NVIDIA_API_KEY\" ) , truncate = \"NONE\" , ) note You can update this code to use different foundational LLMs, or add the base_url parameter if you are using privately hosted NVIDIA NIM\nmicroservices. Ask the foundational LLM a test question by modifying chatbot.py , adding the following lines and running it: response = model . invoke ( \"How do I request access to the company VPN?\" ) print ( response . content ) While the model is able to interpret your question and formulate a response, it does not have access to any information about company-specific policies. How the agent adds contextual information ​ To add company-specific information, your application must consider contextual information. To do this, you can use the glean_example/src/agent.py file. agent.py uses a LangGraph agent to go through the following phases: The LLM interprets the user's question and adds any relevant context. Most free form questions can be passed directly to the Glean Search API. Adds relevant context about the user and then query the Glean knowledge base using the Glean search API to get the most relevant supporting documents. Embeds those supporting documents into a local vector DB. Uses a retriever model to fetch the most relevant supporting document based on the user's original question. Takes the most relevant supporting document and add it to the LLM by adding it to the LLM's prompt (RAG). Asks the LLM to summarize the results and answer the user's question with this new relevant context. The following sections explain some core concepts of the agent.py application's code: LangGraph Agent Creation ​ This code is responsible for creating the agent: class InfoBotState ( BaseModel ) : messages : List [ Tuple [ str , str ] ] = None glean_query_required : Optional [ bool ] = None glean_results : Optional [ List [ str ] ] = None db : Optional [ Any ] = None answer_candidate : Optional [ str ] = None graph = StateGraph ( InfoBotState ) graph . add_node ( \"determine_user_intent\" , determine_user_intent ) graph . add_node ( \"call_glean\" , call_glean ) graph . add_node ( \"add_embeddings\" , add_embeddings ) graph . add_node ( \"answer_candidates\" , answer_candidates ) graph . add_node ( \"summarize_answer\" , summarize_answer ) graph . add_edge ( START , \"determine_user_intent\" ) graph . add_conditional_edges ( \"determine_user_intent\" , route_glean , { \"call_glean\" : \"call_glean\" , \"summarize_answer\" : \"summarize_answer\" } ) graph . add_edge ( \"call_glean\" , \"add_embeddings\" ) graph . add_edge ( \"add_embeddings\" , \"answer_candidates\" ) graph . add_edge ( \"answer_candidates\" , \"summarize_answer\" ) graph . add_edge ( \"summarize_answer\" , END ) agent = graph . compile ( ) Each node represents a function responsible for implementing one of the six steps in our process. The InfoBotState is a special type of dictionary that will hold all of the information the agent needs through each step of the process. Prompt Loading ​ The source of each function is also available in glean_example/src/agent.py . For example, the implementation of call_bot is: def summarize_answer ( state : InfoBotState ) : \"\"\"the main agent responsible for taking all the context and answering the question\"\"\" logger . info ( \"Generate final answer\" ) llm = PROMPT_ANSWER | model response = llm . invoke ( { \"messages\" : state . messages , \"glean_search_result_documents\" : state . glean_results , \"answer_candidate\" : state . answer_candidate , } ) state . messages . append ( ( \"agent\" , response . content ) ) return state This function takes the LLM NIM and invokes it with a specific prompt and the information available in the agent state. The prompt tells the agent what to do, injecting the relevant information from the agent state. You can see the prompts in the file glean_example/src/prompts.py . For example, the PROMPT_ANSWER is: You are the final part of an agent graph. Your job is to answer the user's question based on the information below. Include a url citation in your answer. Message History: {messages} All Supporting Documents from Glean: {glean_search_result_documents} Content from the most relevant document that you should prioritize: {answer_candidate} Answer: Citation Url: Glean Search ​ A main part of this agent is the step that calls the Glean Search API. This RESTful request is implemented in the file glean_example/src/glean_utils/utils.py : def glean_search ( query , api_key , base_url , ** kwargs ) : endpoint = f\" { base_url } /search\" headers = { \"Authorization\" : f\"Bearer { api_key } \" , \"Content-Type\" : \"application/json\" } payload = { \"query\" : query , \"pageSize\" : kwargs . get ( \"page_size\" , 10 ) , \"requestOptions\" : { } , } # Add optional parameters if \"cursor\" in kwargs : payload [ \"cursor\" ] = kwargs [ \"cursor\" ] if \"facet_filters\" in kwargs : payload [ \"requestOptions\" ] [ \"facetFilters\" ] = kwargs [ \"facet_filters\" ] if \"timeout_millis\" in kwargs : payload [ \"timeoutMillis\" ] = kwargs [ \"timeout_millis\" ] try : response = requests . post ( endpoint , json = payload , headers = headers ) response . raise_for_status ( ) data = response . json ( ) result = { \"status_code\" : response . status_code , \"request_id\" : data . get ( \"requestID\" ) , \"results\" : data . get ( \"results\" , [ ] ) , \"facet_results\" : data . get ( \"facetResults\" , [ ] ) , \"cursor\" : data . get ( \"cursor\" ) , \"has_more_results\" : data . get ( \"hasMoreResults\" , False ) , \"tracking_token\" : data . get ( \"trackingToken\" ) , \"backend_time_millis\" : data . get ( \"backendTimeMillis\" ) , } return result except requests . exceptions . RequestException as e : raise e Run the Agent ​ To try out the agent, you can replace the code in chatbot.py with the following code to load the glean_example source code and invoke the full agent: from glean_example . src . agent import agent msg = \"What's the latest on the new API project?\" history = [ ] history . append ( ( \"user\" , msg ) ) response = agent . invoke ( { \"messages\" : history } ) print ( response [ \"messages\" ] [ - 1 ] [ 1 ] ) Edit this page Previous Agent Toolkit Next Overview Introduction Source Code Architecture Prerequisites Test connection to NIM microservices How the agent adds contextual information LangGraph Agent Creation Prompt Loading Glean Search Run the Agent",
      "topics": [
        "agents",
        "integration",
        "chat"
      ],
      "description": "This page provides a guide for building an agentic AI using NVIDIA NIM and Glean to answer questions about a company's internal knowledge base. It covers agent architecture, integration with Glean Search API and NVIDIA microservices, and demonstrates how to implement a RAG-based chat agent using LangGraph."
    },
    "https://developers.glean.com/guides/search/llm-content": {
      "content": "Guides Search LLM Snippets On this page Returning LLM Content Over Snippets You can receive expanded content by setting 2 fields in the request body: maxSnippetSize and returnLlmContentOverSnippets . Request Parameters ​ maxSnippetSize - Gives a hint to the server on how many characters of expanded content should be returned per result. The server may return less or more. This field must be set if returnLlmContentOverSnippets is true, and it must be an integer value greater than 0 and less than or equal to 10000. returnLlmContentOverSnippets - If true, the server will return expanded content. If not, the server will return SERP results as expected. The current retrieval process and formatting of content are what we use internally as LLM content, which we are still modifying for internal usage. Sample Request ​ Sample request body (contains all required fields at minimum to get expanded content): { \"query\" : \"mentions\" , \"pageSize\" : 10 , \"maxSnippetSize\" : 4000 , \"requestOptions\" : { \"returnLlmContentOverSnippets\" : true } } Reading the Search Response ​ The LLM content is formatted differently than the non-LLM content you get from a regular /search REST API request. In the response, there is a top-level field results . results is an array of objects, each representing a search result. Each search result has a top-level field snippets which is an array of text content from the search result. Non-LLM Content ​ The format of the content is different from LLM content in that the snippets are ordered by score, not in the order they appear in the document, and we include formatting instructions to bold terms in the content that match the query. mimeType : The type of text ranges : The indexes of text that we should apply special formatting to, to indicate a term matching in the query The endIndex is where the formatting should end The startIndex is when the formatting should begin The type is the kind of formatting we should do on this range snippet : Deprecated fullTextList : The content for slack/other messaging documents only text : The content snippetTextOrdering : The order of where the snippet appears in the original document { \"results\" : [ { ... more fields... \"snippets\" : [ { \"mimeType\" : \"text/plain\" , \"ranges\" : [ { \"endIndex\" : 16 , \"startIndex\" : 8 , \"type\" : \"BOLD\" } ] , \"snippet\" : \"\" , \"snippetTextOrdering\" : 1 , \"text\" : \"Testing mentions\" } , { \"mimeType\" : \"text/plain\" , \"ranges\" : [ { \"endIndex\" : 13 , \"startIndex\" : 5 , \"type\" : \"BOLD\" } ] , \"snippet\" : \"\" , \"snippetTextOrdering\" : 2 , \"text\" : \"This mentions user 1\" } ... more snippets ... ] ... more fields ... } ] } LLM Content ​ We do not bold hits for LLM content so we do not include the ranges field. mimeType stays the same For slack documents, we still only populate fullTextList for content We order snippets in order of the document, not by score, so we do not include snippetTextOrdering { \"results\" : [ { ... more fields... \"snippets\" : [ { \"mimeType\" : \"text/plain\" , \"text\" : \"Testing mentions\" , \"snippet\" : \"\" } , { \"mimeType\" : \"text/plain\" , \"text\" : \"This mentions user 1\" , \"snippet\" : \"\" } ] ... more snippets ... } ... more fields ... ] } FAQ ​ Will maxSnippetSize be honored when returnLlmContentOverSnippets is False? ​ We will try to hit the maxSnippetSize passed in, it is not clamped at 255 characters. However this is still a \"hint\" number and we may not meet it exactly due to wanting to respect word boundaries, and also due to the number of matches to the query there are in the text content. Is text generated when using returnLlmContentOverSnippets? ​ No text is generated, all text returned should be also present in the original doc. We might not return any snippet at all if there is not enough content to return. Is there a cap on the maximum number of snippets returned per document? ​ Yes, there is a cap at 10,000 characters. We have found that for our LLM purposes that use snippets, we've never needed more than 5000 characters for snippets, so we introduced a cap on both character count and doc count as to prevent sending too large of a response back. Why do I see irrelevant content when using returnLlmContentOverSnippets? ​ When we return snippets ( returnLlmContentOverSnippets = false ), snippets are limited to around 255 characters, so almost always, all the content returned is content related to or matching the search query. When you ask for LLM Content ( returnLlmContentOverSnippets = true ), you can request up to 10,000 characters using maxSnippetSize , and we will try to return as many characters as requested. So if the document does not have any more matches/relevant content to the search query, we will add extra content that surrounds the matches/relevant content to hit maxSnippetSize . For example, if the query is \"test\" and the document contains: ...more text... My favorite fruit is apples. I don't like taking tests. Today is Monday. ... more text ... We would get a snippet of \"I don't like taking tests\". But if returnLlmContentOverSnippets = true and we have a larger maxSnippetSize than the length of \"I don't like taking tests\", then we would try to expand the content returned to the text above and below \"I don't like taking tests\" and include the text in \"My favorite…\" and \"Today is..\" in the content returned. The surrounding text we include may or may not be relevant content, and that is why you may see content that is not relevant to the search query. Tips on Usage ​ If you only want relevant content, then you can use snippets directly (set returnLlmContentOverSnippets = false ) You can also increase/decrease the maxSnippetSize , an increase would introduce more surrounding content that is potentially irrelevant For our LLM usage, we use 4000 for maxSnippetSize , which includes a good amount of surrounding content. While the surrounding content would not be a semantic match, it can sometimes provide useful context that gives us better quality answers Still in Development ​ We are constantly making improvements to our content retrieval, and have several projects in flight to improve the quality of content retrieved. You can expect that this API will stay up to date with what we currently use in our LLM product! Next Steps ​ Search API Explore the complete Search API documentation Filtering Results Learn how to filter and refine search results Edit this page Previous Faceted Filtering Next Overview Request Parameters Sample Request Reading the Search Response Non-LLM Content LLM Content FAQ Will maxSnippetSize be honored when returnLlmContentOverSnippets is False? Is text generated when using returnLlmContentOverSnippets? Is there a cap on the maximum number of snippets returned per document? Why do I see irrelevant content when using returnLlmContentOverSnippets? Tips on Usage Still in Development Next Steps",
      "topics": [
        "search",
        "api-clients",
        "answers"
      ],
      "description": "This page explains how to retrieve expanded LLM-optimized content in search results using the Search API by configuring parameters like maxSnippetSize and returnLlmContentOverSnippets. It details the differences between standard and LLM-oriented snippet formatting, response structure, and provides usage tips and FAQs for developers integrating search results into LLM applications."
    },
    "https://developers.glean.com/api/client-api/tools/list-available-tools": {
      "content": "Client API Reference Tools List available tools List available tools GET /rest/api/v1/tools/list beta This endpoint is in Beta. Expect changes and instability. Returns a filtered set of available tools based on optional tool name parameters. If no filters are provided, all available tools are returned. Request ​ Responses ​ 200 400 401 404 429 Successful operation Bad Request Unauthorized Not Found Too Many Requests Previous Overview Next Execute the specified tool",
      "topics": [
        "client-api",
        "development-tools"
      ],
      "description": "This page provides reference documentation for the Client API endpoint that lists available tools, supporting developers in discovering and filtering tools programmatically. It includes details on request parameters, responses, and error codes."
    },
    "https://developers.glean.com/api-info/indexing/documents/supported-mimetypes": {
      "content": "Indexing API Documents Supported MIME Types On this page Supported MIME Types The Indexing API supports a variety of MIME types for various content fields in documents. This document provides a list of popular MIME types which are supported and guidelines on how to use them effectively. Supported ​ The following are some popular MIME types which are supported by the Indexing API: MIME Type Description application/vnd.apple.keynote Apple Keynote presentation application/epub+zip eBook file application/msword Microsoft Word document application/onenote Microsoft OneNote document application/pdf PDF document application/rtf Rich Text Format document application/vnd.apple.pages Apple Pages document application/vnd.google-apps.form Google Forms document application/vnd.google-apps.site Google Sites page application/vnd.ms-excel Microsoft Excel document application/vnd.openxmlformats-officedocument.presentationml.presentation Microsoft PowerPoint presentation application/vnd.openxmlformats-officedocument.spreadsheetml.sheet Microsoft Excel spreadsheet application/x-apple-diskimage Apple Disk Image application/x-executable Executable file application/x-shockwave-flash Flash file text/csv Comma-separated values file text/html HTML document text/markdown Markdown document text/plain Plain text document text/tab-separated-values Tab-separated values file text/vcard vCard file Please note that this list is not exhaustive and we support many other MIME Types. If you have query about a particular MIME Type which is not listed, please contact Glean support. Unsupported ​ The following are some popular MIME types which are not supported by the Indexing API: MIME Type Description application/json JSON file application/xml XML file text/css CSS file text/xml XML file video Video file application/mp4 MP4 video file image Image file audio Audio file zip ZIP archive rar RAR archive Additional Information ​ For more details on how to use the Indexing API to start indexing a custom datasource, refer to the Indexing API Getting Started Guide . If you encounter any issues or have questions about supported MIME types, please contact our support team. Edit this page Previous Document Model Next Overview Supported Unsupported Additional Information",
      "topics": [
        "indexing-api",
        "documents"
      ],
      "description": "This page details the MIME types supported and unsupported by the Indexing API when processing documents, providing guidance on acceptable file formats for indexing. Its main purpose is to help developers ensure their document content meets API requirements for successful ingestion."
    },
    "https://developers.glean.com/api/client-api/announcements/updateannouncement": {
      "content": "Client API Reference Announcements Update Announcement Update Announcement POST /rest/api/v1/updateannouncement Update a textual announcement visible to some set of users based on department and location. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Delete Announcement Next Overview",
      "topics": [
        "client-api",
        "messages"
      ],
      "description": "This page provides API reference documentation for updating textual announcements accessible to specific users based on department and location. It details the POST endpoint, request structure, and possible responses related to managing in-app announcements."
    },
    "https://developers.glean.com/api/client-api/announcements/createannouncement": {
      "content": "Client API Reference Announcements Create Announcement Create Announcement POST /rest/api/v1/createannouncement Create a textual announcement visible to some set of users based on department and location. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Overview Next Delete Announcement",
      "topics": [
        "client-api",
        "messages"
      ],
      "description": "This page documents the Client API endpoint for creating textual announcements targeted to specific user groups based on department and location. It includes details on request structure, responses, and status codes."
    },
    "https://developers.glean.com/api/client-api/agents/create-and-wait-run": {
      "content": "Client API Reference Agents Create an agent run and wait for the response Create an agent run and wait for the response POST /rest/api/v1/agents/runs/wait beta This endpoint is in Beta. Expect changes and instability. Executes an agent run and returns the final response. Request ​ Responses ​ 200 400 403 404 409 422 500 Success Bad request Forbidden Not Found Conflict Validation Error Internal server error Previous Create an agent run and stream the response Next Overview",
      "topics": [
        "agents",
        "api-clients",
        "client-api"
      ],
      "description": "This page provides reference documentation for the Client API endpoint to create an agent run and synchronously wait for its response. It details the POST request structure, status codes, and beta status of the API."
    },
    "https://developers.glean.com/api/client-api/announcements/deleteannouncement": {
      "content": "Client API Reference Announcements Delete Announcement Delete Announcement POST /rest/api/v1/deleteannouncement Delete an existing user-generated announcement. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Create Announcement Next Update Announcement",
      "topics": [
        "client-api",
        "messages"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/activity/activity": {
      "content": "Client API Reference Activity Report document activity Report document activity POST /rest/api/v1/activity Report user activity that occurs on indexed documents such as viewing or editing. This signal improves search quality. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Overview Next Report client activity",
      "topics": [
        "client-api",
        "insights"
      ],
      "description": "This page documents the Client API endpoint for reporting user activity on indexed documents, such as viewing or editing. The collected activity data helps improve search relevance and provides insights into document usage."
    },
    "https://developers.glean.com/api-info/indexing/documents/bulk-upload-model": {
      "content": "Indexing API Documents Bulk Upload Model Bulk Upload Model The bulk upload endpoints delete all entries that are not a part of the most recent upload. For example, /bulkindexdocuments endpoint would delete all the documents that are not present in the most recent upload. Concurrent uploads are not allowed ie. you cannot start a new upload before the previous upload is finished. There are some fields that are common across all bulk upload endpoints. We will be describing them here: Field Name Description uploadId This is the id which uniquely identifies an upload. You need to have a unique uploadId for all the paginated requests you send for an upload. isFirstPage This denotes whether the page being uploaded is the first page, and needs to be true for the first request and false for all subsequent requests for an upload. isLastPage This denotes whether the page being uploaded is the last page, and needs to be true for the last request and false for all other requests for an upload. forceRestartUpload This is required if you want to start a new upload but the previous upload has not finished or has failed. Not specifying this bit in case of an unsuccessful previous upload will fail the request. disableStaleDocumentDeletionCheck The /bulkindexdocuments asynchronously deletes all documents that weren’t a part of the most recent upload session. This can lead to accidental situations where too many documents get wiped in case of an erroneous bulk upload. To mitigate this, we have a deletion check in place which pauses the deletion of stale documents for 7 days if the percentage of docs being deleted exceeds 20%. In case you intentionally want to delete more than 20% of your previously uploaded documents, you can specify disableStaleDocumentDeletionCheck = true , which disables this check and allows the documents to be deleted. Note that documensts are delete asynchronously. If you wish for deletions to take effect immediately, use /processalldocuments endpoint. Edit this page Previous Bulk Indexing Next Document Model",
      "topics": [
        "indexing-api",
        "documents"
      ],
      "description": "This page describes the bulk upload model in the Indexing API, focusing on how to upload documents in batches, manage upload sessions, and control document deletion behavior during bulk operations. It covers key fields like uploadId, pagination flags, and safeguards against accidental data loss."
    },
    "https://developers.glean.com/api-info/indexing/documents/permissions": {
      "content": "Indexing API Documents Permissions On this page Permissions The content in Glean is highly customizable in terms of configuring visibility of documents, which can be noted while indexing documents using Indexing API endpoints. Glean may require some more information to manage users, groups and group memberships to enable the full power of customized permissions. This can be done using Permissions API endpoints . This tutorial assumes that you have followed the documentation / other tutorials to set up a custom datasource and know how to use the Indexing API to index documents . If not, check out the documentation and other tutorials available. We shall consider various scenarios with increasing complexity of permissions used, along with some example requests which can be used to reproduce them. Scenario 0: Allowing any glean user to search for a document ​ The most basic way to configure permissions for a document is to allow any Glean user within the organization to be able to search for a document. This can be accomplished by setting the allowAnonymousAccess field to be true while setting up permissions for a document. For example, the following request to index a document would lead to the document being visible to all Glean users: curl -X POST https://customer-be.glean.com/api/index/v1/indexdocument \\ #... \"permissions\": { \"allowAnonymousAccess\": \"true\" } #... Rest of the document Scenario 1: Explicitly allowing users that can search for a new document ​ Let’s address a simple scenario: We have a document and want to explicitly allow some users to be able to search for it using Glean. There are two steps required to achieve the above use-case: Index users into Glean: When using non-anonymous permissions, users need to be indexed before being referenced. This is an important step to let Glean know about the users that use a particular datasource before being referenced elsewhere (for example: while defining group memberships, document permissions). Add user-specific permissions to the document: While indexing a documemt, set the corresponding allowedUsers field to capture users that can search for it. Step 1.1: Index users into Glean ​ When using non-anonymous permissions, users need to be indexed before being referenced. This is an important step to let Glean know about the users that may have access to the datasource, before they are referenced while defining group memberships, document permissions, etc. This can be done using the indexuser or the /bulkindexusers endpoint. Note that this does not give permissions to the users to search for the document, but only let's Glean know that these users exist and can be referenced later. Let us look at the following sample request to understand better. The following request indexes a user with email user1@test.com and userId gleantest_user_1 , into the datasource gleantest : curl -X POST https://customer-be.glean.com/api/index/v1/indexuser \\ -H 'Authorization: Bearer <token>' \\ -d ' { \"datasource\": \"gleantest\", \"user\": { \"email\": \"user1@test.com\", \"userId\": \"gleantest_user_1\" # This can be ignored if not applicable \"name\": \"Test User 1\", \"isActive\": \"true\" } }' Step 1.2: Adding user-specific permissions to the document ​ Once the users are indexed, we can create a document with its allowedUsers field set appropriately to capture users that can search for it. Based on the isUserReferencedByEmail field set to true or false in the datasource config, we can follow one of the two scenarious below: Scenario 1.2-A: isUserReferencedByEmail field set to true in the datasource config ​ In case isUserReferencedByEmail is set to true , users should be referenced by their email when adding permissions to a document. This can be done by setting email under the allowedUsers field for each user that we want to give permissions to. The following sample creates a document, giving permissions to only user1@test.com ( assuming a user with this email has been indexed ) to search for this document: curl -X POST https://customer-be.glean.com/api/index/v1/indexdocument \\ # ... \"permissions\": { \"allowedUsers\": [ { \"email\": \"user1@test.com\", } ] } # ... Rest of the document Scenario 1.2-B: isUserReferencedByEmail field set to false in the datasource config ​ In case isUserReferencedByEmail is set to false , users should be referenced by their datasourceUserId when adding permissions to a document. This can be done by setting datasourceUserId under the allowedUsers field for each user that we want to give permissions to. The following sample creates a document, giving permissions to only gleantest_user_1 ( assuming a user with this userId has been indexed ) to search for this document: curl -X POST https://customer-be.glean.com/api/index/v1/indexdocument \\ # ... \"permissions\": { \"allowedUsers\": [ { \"datasourceUserId\": \"gleantest_user_1\", } ] } # ... Rest of the document Scenario 2: Allowing all users of the datasource to search a document ​ We shall move to a different scenario: We now want to allow all users of the datasource to be able to access a particular document.\nTo achieve this, we must first define “all users of the datasource” by indexing all relevant users into Glean. For example, if we only want user1@test.com to be a “datasource user”. We use the following sample request to index the user. curl -X POST https://customer-be.glean.com/api/index/v1/indexuser \\ -H 'Authorization: Bearer <token>' \\ -d ' { \"datasource\": \"gleantest\", \"user\": { \"email\": \"user1@test.com\", \"userId\": \"gleantest_user_1\" # This can be ignored if not applicable \"name\": \"Test User 1\", \"isActive\": \"true\" } }' Next, we should set the allowAllDatasourceUsersAccess field set to true to allow all datasource users to be able to search for the particular document. The following sample request creates a document that is accessible to all datasource users (i.e. only user1@test.com in this case) using Glean. curl -X POST https://customer-be.glean.com/api/index/v1/indexdocument \\ # ... \"permissions\": { \"allowAllDatasourceUsersAccess\": \"true\" } # ... Rest of the document Scenario 3: Allowing pre-defined groups of users to search for a document ​ For this scenario, we want to pre-define specific groups of users which are all to be given access to a document. For instance, a specific team within the organization may have access to a chunk of documents within the datasource. This can be achieved by indexing a group with all members of that team and allowing this group to access each relevant document. We shall learn more about this using an example. Let us assume that we have two users user1@test.com and user2@test.com and the datasource is configured to have the isUserReferencedByEmail field set to true .\nWe shall index a group gleantest_group_1 with the two users as their members, and then create a document that allows gleantest_group_1 to access it. This should implicitly allow user1@test.com and user2@test.com to search for the document using Glean. The following sequence of steps (with sample API calls) should help us reproduce the above mentioned situation: Index users into Glean: Index users user1@test.com and user2@test.com before moving to further steps (To learn how to index users, please refer to Step 1.1 above). Index a group named gleantest_group_1 using the /indexgroup endpoint: curl -X POST https://customer-be.glean.com/api/index/v1/indexgroup \\ -H 'Authorization: Bearer <token>' \\ -d ' { \"datasource\": \"gleantest\", \"group\": { \"name\":\"gleantest_group_1\" } }' Some key points about fields in the request body: name : It is the identifying key for a group within a datasource. There are a few considerations while defining the name of the group: Cannot contain any whitespaces Cannot be empty Cannot start with the prefix “scio” Index memberships for each of the two test users using the /indexmembership endpoint: # Index membership for user1@test.com curl -X POST https://customer-be.glean.com/api/index/v1/indexmembership \\ -H 'Authorization: Bearer <token>' \\ -d ' { \"datasource\": \"gleantest\", \"membership\": { \"groupName\": \"gleantest_group_1\", \"memberUserId\": \"user1@test.com\" } }' # Index membership for user2@test.com curl -X POST https://customer-be.glean.com/api/index/v1/indexmembership \\ -H 'Authorization: Bearer <token>' \\ -d ' { \"datasource\": \"gleantest\", \"membership\": { \"groupName\": \"gleantest_group_1\", \"memberUserId\": \"user2@test.com\" } }' Some key points about fields in the request body: groupName : A group with this particular groupName must be indexed before indexing memberships for it. memberUserId : This identifies a particular user as a member of the group. This must be the email ID of the user if isUserReferencedByEmail is set to true. In the other case, this field must be the userId specified while indexing the user. Note : In case a group needs to be added as a member of another\ngroup, that can be done by using the memberGroupName field in place of the memberUserId field (Exactly one of the two fields\nmust be present). Create a document with the allowedGroups field to include gleantest_group_1 . This would allow members of the group to search for the document using Glean. curl -X POST https://customer-be.glean.com/api/index/v1/indexdocument \\ # ... \"permissions\": { \"allowedGroups\": [\"gleantest_group_1\"] } # ... Rest of the document Notes and next steps ​ Note: Permissions and memberships are processed asynchronously, there might be a small delay before documents are visible to groups / users in Glean searches. This tutorial only covers singleton variants of endpoints that have a bulk upload version. The bulk upload endpoints are similar to their singleton variants, following the bulk upload model and can be used when bulk indexing is required. You can check permissions by using the /checkdocumentaccess API endpoint. Check out the debugging/troubleshooting tutorial for examples and additional helpful information. Edit this page Previous Activity Next Bulk Indexing Scenario 0: Allowing any glean user to s",
      "topics": [
        "permissions",
        "indexing-api",
        "documents"
      ],
      "description": "This page explains how to configure document-level permissions using the Indexing API, including setting access for anonymous users, specific users, all datasource users, and predefined groups. It covers the necessary steps to index users, groups, and memberships to enable fine-grained access control for documents in Glean."
    },
    "https://developers.glean.com/api-info/indexing/documents/document-model": {
      "content": "Indexing API Documents Document Model Document Model The following is the basic document model used for indexing a new document to Glean.\nThere are other fields too which you can use for advanced functionality. You can refer to them in the API reference docs here . Field Description datasource Represents the document datasource id Unique identifier for the document body Content which will be used to populate the document body and its mime type allowedUsers List of users who will be able to view this document viewURL Document view url allowAnonymousAccess If set to true, anyone who is signed into Glean can view search results for the document allowAllDatasourceUsersAccess If set to true, all users of the datasource (as uploaded using the Identity APIs) can view this document customProperties List of name - value pairs used to populate additional facets Edit this page Previous Bulk Upload Model Next Supported MIME Types",
      "topics": [
        "indexing-api",
        "documents",
        "datasources"
      ],
      "description": "This page describes the document model used in the Indexing API to structure and upload documents to Glean, including core fields like id, body, datasource, permissions, and custom properties. It serves as a guide for developers to understand how to format documents for indexing."
    },
    "https://developers.glean.com/api-info/indexing/documents/bulk-indexing": {
      "content": "Indexing API Documents Bulk Indexing On this page Bulk Indexing Bulk index documents endpoint is used to index all the documents of a custom\ndatasource using a series of /bulkindexdocuments requests with a common uploadId . Bulk indexing fully replaces the entire list of documents stored\nin Glean. After a successful bulk upload, all documents that were not a part of\nthe most recent upload are deleted asynchronously. There are similar bulk indexing endpoints for other objects like users, groups,\nemployees, and teams as well. Choosing /indexdocuments vs /bulkindexdocuments ​ When deciding between /indexdocuments and /bulkindexdocuments , it's\nimportant to understand their primary functions and use cases: /bulkindexdocuments : This endpoint is designed for completely refreshing\nthe datasource. It deletes all existing documents and replaces them with the new\nones provided. Use this endpoint when you need to replace the existing corpus and\nupload all documents anew. /indexdocuments : This endpoint is intended for incremental updates. It\nallows you to add a batch of new documents or update existing ones without\naffecting the other documents in the index. Choose this option when you want to\nkeep the existing documents intact while adding or updating specific documents. When to use each endpoint: Use /bulkindexdocuments : When you need to perform a full refresh of the datasource. When all existing documents need to be replaced with a new set of documents. Use /indexdocuments : When you need to add new documents to the existing index. When you need to update specific documents while keeping the rest of the\nindex unchanged. By selecting the appropriate endpoint based on your needs, you can efficiently\nmanage your document indexing process. Making your first successful request to /bulkindexdocuments ​ Here is a sample request to the /bulkindexdocuments endpoint. cURL Python curl -X POST  https://customer-be.glean.com/api/index/v1/bulkindexdocuments \\ -H 'Authorization: Bearer <token>' \\ -H 'Content-Type : application/json' \\ -d ' { \"uploadId\": \"test-upload-id\", \"isFirstPage\": true, \"isLastPage\": true, \"forceRestartUpload\": true, \"datasource\": \"gleantest\", \"documents\": [ { \"datasource\": \"gleantest\", \"objectType\": \"EngineeringDoc\", \"id\": \"test-doc-1\", \"title\": \"How to bulk index documents\", \"body\": { \"mimeType\": \"text/plain\", \"textContent\": \"This doc will help you make your first successful bulk index document request\" }, \"permissions\": { \"allowedUsers\": [ { \"email\": \"myuser@bluesky.test\", \"datasourceUserId\": \"myuser-datasource-id\", \"name\": \"My User\" } ], \"allowAllDatasourceUsersAccess\": true }, \"viewURL\": \"https://www.glean.engineering.co.in/test-doc-1\", \"customProperties\": [ { \"name\": \"Org\", \"value\": \"Infrastructure\" } ] } ] }' from glean . api_client import Glean import os with Glean ( api_token = os . getenv ( \"GLEAN_INDEXING_API_TOKEN\" , \"\" ) , instance = os . getenv ( \"GLEAN_INSTANCE\" , \"\" ) , ) as client : # Bulk index documents try : client . indexing . documents . bulk_index ( request = { \"uploadId\" : \"test-upload-id\" , \"datasource\" : \"gleantest\" , \"documents\" : [ { \"datasource\" : \"gleantest\" , \"objectType\" : \"EngineeringDoc\" , \"id\" : \"test-doc-1\" , \"title\" : \"How to bulk index documents\" , \"body\" : { \"mimeType\" : \"text/plain\" , \"textContent\" : \"This doc will help you make your first successful bulk index document request\" } , \"permissions\" : { \"allowAnonymousAccess\" : True } , \"viewURL\" : \"https://www.glean.engineering.co.in/test-doc-1\" , \"customProperties\" : [ { \"name\" : \"Org\" , \"value\" : \"Infrastructure\" } ] } ] , \"isFirstPage\" : True , \"isLastPage\" : True , \"forceRestartUpload\" : True } ) except Exception as e : print ( f\"Exception when bulk indexing documents: { e } \" ) Let's look at the different fields you need to successfully index documents to\nGlean. Note that this is just a sample request with minimal fields required to index content. For\nexhaustive list of fields, please\nrefer here . Next steps ​ You can check the status of your document using our debugging/troubleshooting APIs. Please refer here for documentation on how to use these APIs. For the indexed document to show up in Glean UI, the datasource must be enabled for search. For now, Glean will need to enable it internally, but in future this will be made available via Glean Admin Console. Once these steps are done, you should be able to search for the indexed document in Glean when logged in as the user having permissions to view the documents. Note that it takes around 15-20 minutes for the documents to be indexed and appear on your Glean UI. Edit this page Previous Permissions Next Bulk Upload Model Choosing /indexdocuments vs /bulkindexdocuments Making your first successful request to /bulkindexdocuments Next steps",
      "topics": [
        "indexing-api",
        "documents",
        "datasources"
      ],
      "description": "This page explains how to use the Bulk Indexing endpoint of the Indexing API to replace all documents in a custom datasource, contrasting it with incremental indexing, and provides a sample request along with key considerations for successful document ingestion."
    },
    "https://developers.glean.com/guides/search/faceted-filters": {
      "content": "Guides Search Faceted Filtering On this page Faceted Filtering We provide the functionality of filtering the list of possible facets of a particular type (obtained in the facetResults above) using a prefix. If you want to filter the buckets of a particular sourceName in the facetResults using a specific prefix, you can set the facetBucketFilter object. It has the following two fields: facet - The facet fieldName that you want to filter on. prefix - The prefix by which you want to filter the buckets of that facet by. To use this Facet Bucket Filtering make sure that the responseHints contains \"FACET_RESULTS\" . See the sample request body below that filters the \"type\" bucket using the prefix “co”: { \"query\" : \"test\" , \"requestOptions\" : { \"facetBucketFilter\" : { \"facet\" : \"type\" , \"prefix\" : \"co\" } , \"facetBucketSize\" : 3000 , \"responseHints\" : [ \"FACET_RESULTS\" ] } } Within the facetResults field in the response to this query, you will find that the bucket for sourceName =\"type\" contains only those values with the prefix \"co\" in any word. You can limit the maximum number of buckets you get within the facetResults for all sourceName by passing your desired value into facetBucketSize . In the example above, we limit buckets to 3000 Preferred Name prefix matching ​ For sourceName supporting people within the buckets (e.g., \"from\", \"owner\", etc.), we support prefix matching using their preferred names (or nicknames). So if facetBucketFilter is applied to the “from” facet using the prefix “Adi,” it will give all the people whose either name or preferred name has a prefix of “Adi”. Edit this page Previous Datasource Filters Next LLM Snippets Preferred Name prefix matching",
      "topics": [
        "search",
        "api-clients"
      ],
      "description": "This page explains how to filter facets in search results using a prefix, particularly for narrowing down buckets in faceted search by field and prefix, with support for preferred name matching in people-related fields. It provides guidance on using the facetBucketFilter in API requests to refine search responses."
    },
    "https://developers.glean.com/guides/search/datasource-filters": {
      "content": "Guides Search Datasource Filters On this page Datasource Filters Apart from the general filters we’ve discussed, some filters are specific to one datasource- for example, Confluence has the author facet, and Slack has the channel facet. There are also custom facets that are defined for custom datasources pushed via api. To uncover these datasource-specific facets, you can use our Glean UI to filter by the datasource you’re curious about. You will be able to find a list of facets for your search results, and facet values on the sidebar of the Glean UI (see image below). Getting possible facets via Search API ​ If you would like to curl to get the facets, you can use a /search request to get the values that we use to populate the sidebar with a request like this: { \"query\" : \"test\" , \"pageSize\" : 10 , \"requestOptions\" : { \"facetBucketSize\" : 3000 , \"facetFilters\" : [ { \"fieldName\" : \"app\" , \"values\" : [ { \"value\" : \"confluence\" , \"relationType\" : \"EQUALS\" } ] } ] } } This will return a top-level field, facetResults .\nfacetResults has the following relevant fields: sourceName - same as the facet fieldName in the facetFilter s object operatorName - not relevant buckets - a list of facet bucket objects corresponding to a facet value The facet bucket object has the following relevant fields: count - the number of search results that would be returned if filtering by the facet value value - the facet value (ie “engineering” for the space facet) stringValue - the string value intValue - the integer value (not common) displayLabel - alternative value used for display in the UI iconConfig - optional image used to represent the facet value, such as a profile picture for people facet values. { \"sourceName\" : \"space\" , \"operatorName\" : \"SelectMultiple\" , \"buckets\" : [ { \"count\" : 3 , \"value\" : { \"stringValue\" : \"engineering\" } } ] } To get all of the facets you can use with a particular datasource, you can look at all of the sourceName s in the facetsResult s returned. If latency is a concern, and you only want to receive facetResults , you can send a request with pageSize = 0, and add \"FACET_RESULTS\" within the responseHints field in requestOptions to not retrieve any documents and only retrieve facetResults. See sample request body below, which would gather facetResults for all confluence specific facets: { \"query\" : \"test\" , \"pageSize\" : 0 , \"requestOptions\" : { \"facetBucketSize\" : 3000 , \"facetFilters\" : [ { \"fieldName\" : \"app\" , \"values\" : [ { \"value\" : \"confluence\" , \"relationType\" : \"EQUALS\" } ] } ] , \"responseHints\" : [ \"FACET_RESULTS\" ] } } Edit this page Previous Filtering Results Next Faceted Filtering Getting possible facets via Search API",
      "topics": [
        "search",
        "datasources",
        "api-clients"
      ],
      "description": "This page explains how to use datasource-specific filters in search queries, particularly focusing on retrieving facet information for specific datasources like Confluence or Slack using the Glean UI or Search API. It provides guidance on making API requests to get facet metadata and optimize performance by retrieving only facet results."
    },
    "https://developers.glean.com/api/client-api/pins/listpins": {
      "content": "Client API Reference Pins List pins List pins POST /rest/api/v1/listpins Lists all pins. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Read pin Next Create pin",
      "topics": [
        "pins",
        "client-api"
      ],
      "description": "This page provides reference documentation for the Client API endpoint that lists all pins. It details the POST request structure, response codes, and related operations."
    },
    "https://developers.glean.com/api/client-api/pins/editpin": {
      "content": "Client API Reference Pins Update pin Update pin POST /rest/api/v1/editpin Update an existing user-generated pin. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Overview Next Read pin",
      "topics": [
        "pins",
        "client-api"
      ],
      "description": "This page provides reference documentation for updating an existing user-generated pin via the client API, detailing the endpoint, request structure, and possible responses."
    },
    "https://developers.glean.com/api/client-api/pins/unpin": {
      "content": "Client API Reference Pins Delete pin Delete pin POST /rest/api/v1/unpin Unpin a previously pinned result. Request ​ Responses ​ 200 400 401 403 429 OK Invalid request Not Authorized Forbidden from unpinning someone else's pin Too Many Requests Previous Create pin Next Overview",
      "topics": [
        "client-api",
        "pins"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/pins/pin": {
      "content": "Client API Reference Pins Create pin Create pin POST /rest/api/v1/pin Pin a document as a result for a given search query.Pin results that are known to be a good match. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous List pins Next Delete pin",
      "topics": [
        "pins",
        "client-api",
        "search"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/pins/getpin": {
      "content": "Client API Reference Pins Read pin Read pin POST /rest/api/v1/getpin Read pin details given its ID. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Update pin Next List pins",
      "topics": [
        "client-api",
        "pins"
      ],
      "description": "This page provides reference documentation for the Client API endpoint to retrieve pin details by ID, including request structure, responses, and status codes. It is part of the API functionality for managing pins programmatically."
    },
    "https://developers.glean.com/api/client-api/governance/downloadpolicycsv": {
      "content": "Client API Reference Governance Downloads violations CSV for policy Downloads violations CSV for policy GET /rest/api/v1/governance/data/policies/:id/download Downloads CSV violations report for a specific policy id. This does not support continuous policies. Request ​ Responses ​ 200 403 500 Downloads csv of batch policy violations. Permissions error Internal error Previous Creates new policy Next Creates new one-time report",
      "topics": [
        "governance",
        "api-clients",
        "client-api"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/governance/getpolicy": {
      "content": "Client API Reference Governance Gets specified policy Gets specified policy GET /rest/api/v1/governance/data/policies/:id Fetches the specified policy version, or the latest if no version is provided. Request ​ Responses ​ 200 403 500 OK Permissions error Internal error Previous Overview Next Updates an existing policy",
      "topics": [
        "governance",
        "client-api"
      ],
      "description": "This page provides a reference for the Client API endpoint to retrieve a specific data governance policy by ID, including versioning behavior and response codes. It is part of the broader governance and API client documentation for managing data policies programmatically."
    },
    "https://developers.glean.com/api/client-api/governance/createreport": {
      "content": "Client API Reference Governance Creates new one-time report Creates new one-time report POST /rest/api/v1/governance/data/reports Creates a new one-time report and executes its batch job. Request ​ Responses ​ 200 403 500 OK Permissions error Internal error Previous Downloads violations CSV for policy Next Downloads violations CSV for report",
      "topics": [
        "governance",
        "client-api"
      ],
      "description": "This page details a specific endpoint in the Client API for creating and executing one-time governance reports, including permissions and error responses. It focuses on programmatic report generation for compliance and auditing purposes."
    },
    "https://developers.glean.com/api/client-api/governance/listpolicies": {
      "content": "Client API Reference Governance Lists policies Lists policies GET /rest/api/v1/governance/data/policies Lists policies with filtering. Request ​ Responses ​ 200 403 500 OK Permissions error Internal error Previous Updates an existing policy Next Creates new policy",
      "topics": [
        "governance",
        "client-api",
        "api-clients"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/governance/getdocvisibility": {
      "content": "Client API Reference Governance Fetches documents visibility Fetches documents visibility GET /rest/api/v1/governance/documents/visibilityoverrides Fetches the visibility override status of the documents passed. Request ​ Responses ​ 200 403 500 The visibility status of documents Permissions error Internal error Previous Fetches report run status Next Hide or unhide docs",
      "topics": [
        "governance",
        "permissions",
        "client-api"
      ],
      "description": "This page documents a Client API endpoint that retrieves the visibility override status of documents, focusing on governance and permissions controls within the system."
    },
    "https://developers.glean.com/api/client-api/governance/updatepolicy": {
      "content": "Client API Reference Governance Updates an existing policy Updates an existing policy POST /rest/api/v1/governance/data/policies/:id Updates an existing policy. Request ​ Responses ​ 200 403 500 OK Permissions error Internal error Previous Gets specified policy Next Lists policies",
      "topics": [
        "governance",
        "client-api"
      ],
      "description": "This page is part of the Client API reference and details how to update an existing governance policy via a POST request to the specified endpoint. It outlines the required parameters, response codes, and permissions needed for the operation."
    },
    "https://developers.glean.com/api/client-api/governance/getreportstatus": {
      "content": "Client API Reference Governance Fetches report run status Fetches report run status GET /rest/api/v1/governance/data/reports/:id/status Fetches the status of the run corresponding to the report-id. Request ​ Responses ​ 200 403 500 Fetches status of report run. Permissions error Internal error Previous Downloads violations CSV for report Next Fetches documents visibility",
      "topics": [
        "governance",
        "client-api",
        "api-clients"
      ],
      "description": "This page provides a reference for the Client API endpoint that retrieves the status of a report run in the governance system. It outlines the request details, possible responses, and related permissions."
    },
    "https://developers.glean.com/api/client-api/governance/createpolicy": {
      "content": "Client API Reference Governance Creates new policy Creates new policy POST /rest/api/v1/governance/data/policies Creates a new policy with specified specifications and returns its id. Request ​ Responses ​ 200 403 500 OK Permissions error Internal error Previous Lists policies Next Downloads violations CSV for policy",
      "topics": [
        "governance",
        "client-api"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/governance/downloadreportcsv": {
      "content": "Client API Reference Governance Downloads violations CSV for report Downloads violations CSV for report GET /rest/api/v1/governance/data/reports/:id/download Downloads CSV violations report for a specific report id. Request ​ Responses ​ 200 403 500 Downloads csv of one-time report violations. Permissions error Internal error Previous Creates new one-time report Next Fetches report run status",
      "topics": [
        "governance",
        "api-clients"
      ],
      "description": ""
    },
    "https://developers.glean.com/guides/actions/faq": {
      "content": "Guides Actions FAQ On this page Actions FAQ Common Questions ​ Which fields are interpreted by LLM? The \"Unique Identifier\" and \"Trigger Condition (including Example Queries)\" fields are used by the LLM to identify which action it should invoke/use for a user's query. Make sure to give a detailed trigger condition and example queries, to ensure LLM knows exactly what user queries this action should be used for. How to authenticate Actions built using Glean's Jira template? Please follow the steps described on this page to setup authentication for Jira. What are type hints? Type hints are like instructions that help the Glean AI understand and work with different actions better. They're clues that tell the AI what each part of an action does, making it easier for the AI to get the right information or do the right thing with those actions. Benefits of Implementing Type Hints ​ Type hints provide two key advantages: Simplified Action Creation : Type hints make it easier for developers to describe their actions' capabilities and requirements. Better at Getting Information and Doing Tasks : Type hints give clear instructions on gathering data or performing actions, leading to more accurate and relevant results from the AI. How to Use Type Hints ​ To use type-hints, consider the following steps: Identify Relevant Type Hints: Review the list of supported type hints to determine which ones align with your action's functionality. Incorporate Type Hints into Your API Specs: Add the selected type hints as structured details in your action's API specifications. Supported Type Hints ​ Here are the type hints currently supported by Glean: Content ​ Applied to fields that deal with large amounts of text or content. Ideal for tools that generate, modify, or display content. description : x-glean-typehint : 'Content' type : string description : Rich description. EmailAddress ​ Used for fields that capture the email address of the user. assignee : x-glean-typehint : 'EmailAddress' type : string description : User to which the issue is assigned. JiraComponentId ​ Designated for fields involving a JIRA component ID. components : x-glean-typehint : 'JiraComponentId' type : string description : Component Id where the ticket should be filed. JiraIssueId ​ Used for fields that interact with a specific JIRA issue. issue : x-glean-typehint : 'JiraIssueId' type : string description : Issue Id on which comment should be posted. JiraIssuePriority ​ For fields that denote the priority of a Jira issue. priority : x-glean-typehint : 'JiraIssuePriority' type : integer description : Numeric priority. 1 (Highest) to 5 (Lowest) minimum : 1 maximum : 5 JiraIssueType ​ For fields that denote a Jira issue type. issue_type : x-glean-typehint : 'JiraIssueType' type : integer description : Issue type. 10000 refers to Epic , 10001 to Story , 10002 to Task , 10003 to Sub - Task , 10004 to Bug. JiraProjectID ​ For fields requiring a JIRA project ID. pid : x-glean-typehint : 'JiraProjectID' type : string description : Project ID where the ticket is created. ResultUrl ​ For fields containing the URL of created objects from write actions. jiraTicketUrl : x-glean-typehint : 'ResultUrl' type : string description : Url of the created object. Do Actions work for endpoints behind VPN? Yes, please contact our team for information on how to do this. How much data can my service return (for retrieval actions)? The response from the service you're connecting to retrieve content using your retrieval action will be sent to the LLM to create the final response. Hence, please ensure that the data returned is not larger than ~8000 characters. Depending on the LLM model being used, larger responses will be truncated from the end. Edit this page Previous Zendesk Ticket Redirection Next MCP Common Questions Benefits of Implementing Type Hints How to Use Type Hints Supported Type Hints",
      "topics": [
        "actions",
        "api-clients",
        "development-tools"
      ],
      "description": "This page provides a FAQ about Actions in Glean, focusing on how to define and optimize them using type hints, authentication setup, LLM interpretation of fields, and technical constraints like data size limits and VPN access. Its main purpose is to guide developers in effectively building and integrating API-based Actions with Glean's AI system."
    },
    "https://developers.glean.com/api/client-api/documents/getdocuments": {
      "content": "Client API Reference Documents Read documents Read documents POST /rest/api/v1/getdocuments Read the documents including metadata (does not include enhanced metadata via /documentmetadata ) for the given list of Glean Document IDs or URLs specified in the request. Request ​ Responses ​ 200 400 401 403 429 OK Invalid request Not Authorized Documents does not exist, or user cannot access documents. Too Many Requests Previous Read document permissions Next Read documents by facets",
      "topics": [
        "documents",
        "client-api",
        "permissions</hot"
      ],
      "description": "This page provides a reference for the Client API endpoint to retrieve documents by their IDs or URLs, including metadata, while also detailing access permissions and potential error responses."
    },
    "https://developers.glean.com/api/client-api/documents/getdocpermissions": {
      "content": "Client API Reference Documents Read document permissions Read document permissions POST /rest/api/v1/getdocpermissions beta This endpoint is in Beta. Expect changes and instability. Read the emails of all users who have access to the given document. Request ​ Responses ​ 200 400 401 403 429 OK Invalid request Not Authorized Forbidden Too Many Requests Previous Overview Next Read documents",
      "topics": [
        "client-api",
        "permissions",
        "documents"
      ],
      "description": "This page documents the Client API endpoint for retrieving the list of users who have access to a specific document, detailing request structure, response codes, and permissions handling."
    },
    "https://developers.glean.com/api/client-api/shortcuts/getshortcut": {
      "content": "Client API Reference Shortcuts Read shortcut Read shortcut POST /rest/api/v1/getshortcut Read a particular shortcut's details given its ID. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Delete shortcut Next List shortcuts",
      "topics": [
        "client-api",
        "api-clients"
      ],
      "description": "This page provides reference documentation for the Client API endpoint to retrieve details of a specific shortcut by its ID, including request structure, responses, and error codes."
    },
    "https://developers.glean.com/api/client-api/shortcuts/deleteshortcut": {
      "content": "Client API Reference Shortcuts Delete shortcut Delete shortcut POST /rest/api/v1/deleteshortcut Delete an existing user-generated shortcut. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Create shortcut Next Read shortcut",
      "topics": [
        "client-api",
        "core-concepts"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/shortcuts/listshortcuts": {
      "content": "Client API Reference Shortcuts List shortcuts List shortcuts POST /rest/api/v1/listshortcuts List shortcuts editable/owned by the currently authenticated user. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Read shortcut Next Update shortcut",
      "topics": [
        "client-api",
        "permissions"
      ],
      "description": "This page provides a reference for the Client API endpoint to list shortcuts that are editable or owned by the authenticated user, including details on request structure, responses, and status codes."
    },
    "https://developers.glean.com/api/client-api/shortcuts/createshortcut": {
      "content": "Client API Reference Shortcuts Create shortcut Create shortcut POST /rest/api/v1/createshortcut Create a user-generated shortcut that contains an alias and destination URL. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Overview Next Delete shortcut",
      "topics": [
        "client-api",
        "automation"
      ],
      "description": "This page provides reference documentation for the Client API endpoint to create a user-generated shortcut, including the alias and destination URL. It details the POST request structure, responses, and status codes."
    },
    "https://developers.glean.com/api/client-api/search/search": {
      "content": "Client API Reference Search Search Search POST /rest/api/v1/search Retrieve results from the index for the given query and filters. Request ​ Responses ​ 200 400 401 403 408 422 429 OK Invalid request Not Authorized Forbidden Request Timeout Invalid Query Too Many Requests Previous Recommend documents Next Overview",
      "topics": [
        "search",
        "client-api",
        "api-clients"
      ],
      "description": "This page provides reference documentation for the Client API's search endpoint, detailing how to retrieve indexed results using queries and filters, along with possible responses and error codes."
    },
    "https://developers.glean.com/api/client-api/activity/feedback": {
      "content": "Client API Reference Activity Report client activity Report client activity POST /rest/api/v1/feedback Report events that happen to results within a Glean client UI, such as search result views and clicks.  This signal improves search quality. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Report document activity Next Overview",
      "topics": [
        "client-api",
        "search",
        "insights"
      ],
      "description": "This page documents the Client API endpoint for reporting user activity such as search result views and clicks, which helps improve search relevance and provides insights into user interactions within the Glean client UI."
    },
    "https://developers.glean.com/api/client-api/agents/get-agent-schemas": {
      "content": "Client API Reference Agents List an agent's schemas List an agent's schemas GET /rest/api/v1/agents/:agent_id/schemas beta This endpoint is in Beta. Expect changes and instability. Return agent 's input and output schemas. You can use these schemas to detect changes to an agent's input or output structure. Request ​ Responses ​ 200 400 403 404 422 500 Success Bad request Forbidden Not Found Validation Error Internal server error Previous Retrieve an agent Next Search agents",
      "topics": [
        "client-api",
        "agents",
        "api-clients"
      ],
      "description": "This page documents the Client API endpoint for listing an agent's input and output schemas, enabling developers to detect changes in an agent's structure. It is part of the agents API reference and is currently in beta."
    },
    "https://developers.glean.com/api/client-api/agents/get-agent": {
      "content": "Client API Reference Agents Retrieve an agent Retrieve an agent GET /rest/api/v1/agents/:agent_id beta This endpoint is in Beta. Expect changes and instability. Returns details of an agent created in the Agent Builder. Request ​ Responses ​ 200 400 403 404 500 Success Bad request Forbidden Not Found Internal server error Previous Overview Next List an agent's schemas",
      "topics": [
        "client-api",
        "agents",
        "api-clients"
      ],
      "description": ""
    },
    "https://developers.glean.com/api/client-api/agents/search-agents": {
      "content": "Client API Reference Agents Search agents Search agents POST /rest/api/v1/agents/search beta This endpoint is in Beta. Expect changes and instability. Search for agents by agent name. Request ​ Responses ​ 200 400 403 404 422 500 Success Bad request Forbidden Not Found Validation Error Internal server error Previous List an agent's schemas Next Create an agent run and stream the response",
      "topics": [
        "agents",
        "client-api",
        "search"
      ],
      "description": "This page documents the Client API endpoint for searching agents by name, including request details, response codes, and its beta status. It is part of the API reference for interacting with agents programmatically."
    },
    "https://developers.glean.com/api/client-api/agents/create-and-stream-run": {
      "content": "Client API Reference Agents Create an agent run and stream the response Create an agent run and stream the response POST /rest/api/v1/agents/runs/stream beta This endpoint is in Beta. Expect changes and instability. Executes an agent run and returns the result as a stream of server-sent events (SSE). Request ​ Responses ​ 200 400 403 404 409 422 500 Success Bad request Forbidden Not Found Conflict Validation Error Internal server error Previous Search agents Next Create an agent run and wait for the response",
      "topics": [
        "api-clients",
        "agents",
        "client-api"
      ],
      "description": "This page provides reference documentation for the Client API endpoint to create an agent run and stream the response using server-sent events (SSE). It details the POST request structure, status codes, and beta status of the streaming functionality."
    },
    "https://developers.glean.com/api/client-api/answers/getanswer": {
      "content": "Client API Reference Answers Read Answer Read Answer POST /rest/api/v1/getanswer Read the details of a particular Answer given its ID. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Update Answer Next List Answers",
      "topics": [
        "client-api",
        "answers"
      ],
      "description": "This page provides reference documentation for the Client API endpoint used to retrieve details of a specific Answer by its ID. It outlines the request structure, possible responses, and error codes."
    },
    "https://developers.glean.com/api/client-api/answers/createanswer": {
      "content": "Client API Reference Answers Create Answer Create Answer POST /rest/api/v1/createanswer Create a user-generated Answer that contains a question and answer. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Overview Next Delete Answer",
      "topics": [
        "client-api",
        "answers"
      ],
      "description": "This page documents the Client API endpoint for creating a user-generated answer, including the question and answer content. It provides details on the POST request, parameters, and possible responses."
    },
    "https://developers.glean.com/api/client-api/answers/deleteanswer": {
      "content": "Client API Reference Answers Delete Answer Delete Answer POST /rest/api/v1/deleteanswer Delete an existing user-generated Answer. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Create Answer Next Update Answer",
      "topics": [
        "client-api",
        "answers"
      ],
      "description": "This page provides reference documentation for the Client API endpoint used to delete a user-generated answer, including request method, URL, and possible responses. It is part of the Answers API functionality within the broader client-facing API suite."
    },
    "https://developers.glean.com/api/client-api/answers/editanswer": {
      "content": "Client API Reference Answers Update Answer Update Answer POST /rest/api/v1/editanswer Update an existing user-generated Answer. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Delete Answer Next Read Answer",
      "topics": [
        "client-api",
        "answers"
      ],
      "description": "This page documents the Client API endpoint for updating an existing user-generated Answer, including request details and possible responses like 200 OK, 400, 401, and 429 status codes."
    },
    "https://developers.glean.com/api/client-api/search/autocomplete": {
      "content": "Client API Reference Search Autocomplete Autocomplete POST /rest/api/v1/autocomplete Retrieve query suggestions, operators and documents for the given partially typed query. Request ​ Responses ​ 200 400 401 429 OK Invalid request Not Authorized Too Many Requests Previous Search the index (admin) Next Feed of documents and events",
      "topics": [
        "client-api",
        "search"
      ],
      "description": "This page provides reference documentation for the Autocomplete API endpoint, which returns query suggestions, operators, and document matches based on a partially typed search query. It is part of the Client API and supports search functionality within the platform."
    },
    "https://developers.glean.com/api/client-api/search/adminsearch": {
      "content": "Client API Reference Search Search the index (admin) Search the index (admin) POST /rest/api/v1/adminsearch beta This endpoint is in Beta. Expect changes and instability. Retrieves results for search query without respect for permissions. This is available only to privileged users. Request ​ Responses ​ 200 400 401 403 422 429 OK Invalid request Not Authorized Forbidden Invalid Query Too Many Requests Previous Overview Next Autocomplete",
      "topics": [
        "search",
        "client-api",
        "administration"
      ],
      "description": "This page documents the admin search endpoint in the Client API, which allows privileged users to perform search queries against the index without permission checks. It is intended for administrative use and is currently in beta."
    },
    "https://developers.glean.com/api/client-api/search/feed": {
      "content": "Client API Reference Search Feed of documents and events Feed of documents and events POST /rest/api/v1/feed The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more. Request ​ Responses ​ 200 400 401 408 429 OK Invalid request Not Authorized Request Timeout Too Many Requests Previous Autocomplete Next Recommend documents",
      "topics": [
        "client-api",
        "feed",
        "documents"
      ],
      "description": "This page documents the Client API endpoint for retrieving a personalized feed of documents and events, such as suggestions, recent activity, and calendar events. It outlines request and response details, including status codes and structure."
    },
    "https://developers.glean.com/api/client-api/search/recommendations": {
      "content": "Client API Reference Search Recommend documents Recommend documents POST /rest/api/v1/recommendations beta This endpoint is in Beta. Expect changes and instability. Retrieve recommended documents for the given URL or Glean Document ID. Request ​ Responses ​ 200 202 204 400 401 403 429 OK Accepted. The Retry-After header has a hint about when the response will be available There are no recommendations for this URL Invalid request Not Authorized Document does not exist or user cannot access document Too Many Requests Previous Feed of documents and events Next Search",
      "topics": [
        "client-api",
        "recommendations",
        "documents"
      ],
      "description": "This page provides reference documentation for the Client API's recommendations endpoint, which retrieves suggested documents based on a given URL or Glean Document ID. It details request/response formats, status codes, and notes the beta status of the feature."
    },
    "https://developers.glean.com/guides/actions/create-actions": {
      "content": "Guides Actions Creating Actions On this page Creating Actions Overview ​ Actions allow you to create automated workflows and integrations within Glean. This guide walks through the process of creating and configuring an Action. note You must have an Admin or App and Action Creator role to create actions. To get started, navigate to Admin console > Platform > Actions where you'll see a list of all available actions. Click the \"New Action\" button in the top right corner to begin. You can choose to create a custom action from scratch, build a simple redirect action or pick from one of the available out-of-the-box actions (if enabled for you). tip For Gmail or Jira creation actions, you can use built-in templates with no coding required. For other use cases, you can create custom actions from scratch. If you select creating an action from scratch, these are the steps to create an action: Step 1: Basic Information Start by providing the essential details to identify your action: Field Type Required Description Display name string ✓ The name that will be shown in the actions directory Display description string ✓ A clear description of what your action does Unique identifier string ✓ A unique identifier to distinguish your action from others with similar names Action type string ✓ Choose between: • Action : Performs operations in external apps • Retrieval : Fetches information from external applications Action Types in Detail Action Helps users perform operations in external apps. Can be either: Execution : Performs the action directly within Glean Redirect : Sends users to the appropriate external URL Retrieval Fetches information from external applications that may or may not be indexed with Glean Step 2: Trigger Condition Configure when your action should be triggered in Glean Chat. When users interact with Glean Chat, the system matches their requests against the trigger conditions to determine which action to use. For example, for an IT support Action, you might include trigger conditions like: \"Creates IT support tickets on JIRA. Use this action when the user wants to create a support ticket, needs access to something or wants help with any IT related issues.\" You can also provide example queries such as: \"I forgot my password for Notion\" \"Need to reset my password for gmail\" \"I need access to gong\" Step 3: Functionality Define the specific configurations for your action. For actions created from scratch, you'll need to upload an API spec: Step 4: Authentication This step is only required for actions with a server. Configure how Glean should pass authentication information for requests coming from Glean to your action's server. Testing and Deployment ​ Testing Your Action ​ After saving your action, use the testing link provided at the bottom of the page to verify its functionality. Test with various queries that should trigger the action and refine the Trigger Condition if needed. Deployment Options ​ Actions can be deployed in two environments: Chat Deployment Deploy to all users (recommended after thorough testing) or a subset of users for testing Glean Agents Deploy for use in Glean Agents API Specification Configuration ​ note This section only applies to custom actions built from scratch. When configuring the API spec for your action, provide a YAML or JSON file that follows these requirements: Contains a single endpoint defined in /paths (e.g., /execute) Fields should be added in either requestBody.content or parameters All fields must follow this format: No nested fields (only string/number/integer/boolean or arrays of these types) Use enum with a single value for fixed values Assistant can guess non-fixed values Mark required fields using standard OpenAPI specifications For example implementations and API specs, refer to our examples documentation . Edit this page Previous Authentication Next Jira Issue Creation Overview Testing and Deployment Testing Your Action Deployment Options API Specification Configuration",
      "topics": [
        "actions",
        "automation",
        "development-tools"
      ],
      "description": "This page provides a step-by-step guide for creating and configuring custom Actions in Glean, which enable automated workflows and integrations with external applications. It covers setting up trigger conditions, defining functionality via API specs, authentication, testing, and deployment options for both Chat and Agents."
    },
    "https://developers.glean.com/guides/actions/examples/jira-issue-creation": {
      "content": "Guides Actions Examples Jira Issue Creation On this page Jira Issue Creation Overview ​ This guide explains how to create an execution action that allows Glean Assistant to create Jira issues on behalf of users. The implementation uses OAuth-based authentication and ensures proper user attribution for created issues. This is an execution action that performs operations directly by making API calls to Jira through a custom server implementation. Prerequisites ​ Before beginning this implementation, ensure you have: Administrator access to your Jira and Glean instances Familiarity with OAuth 2.0 authentication flows Basic understanding of API implementation Access to necessary development resources Implementation Guide ​ 1 Server Implementation The server implementation handles requests from Glean's actions backend and manages the creation of Jira issues. This implementation includes proper security measures and ensures accurate user attribution. Note: This example uses OAuth authentication configured through the Glean Admin UI. When setting up your action, you'll configure OAuth with the following settings: Client URL: https://auth.atlassian.com/authorize?audience={`{ATLASSIAN-DOMAIN}`}.atlassian.net&prompt=consent Authorization URL: https://auth.atlassian.com/oauth/token Scopes: write :jira-work , offline_access , read :me Click to expand the complete Python server implementation from flask import Flask , request , jsonify import requests import json app = Flask ( __name__ ) cloud_id = \"your_jira_cloud_id_here\" create_issue_url_format = f\"https://api.atlassian.com/ex/jira/ { cloud_id } /rest/api/3/issue\" users_search_url = f\"https://your-domain.atlassian.net/rest/api/3/users/search\" def get_reporter_id ( email , auth_header ) : \"\"\" Retrieves the Jira account ID for a given email address. This function supports proper user attribution in Jira issues. \"\"\" start_at = 0 max_results = 50 while True : params = { 'startAt' : start_at , 'maxResults' : max_results } headers = { 'Accept' : 'application/json' , 'Authorization' : auth_header } response = requests . get ( users_search_url , params = params , headers = headers ) users = json . loads ( response . text ) for user in users : if user [ 'emailAddress' ] == email : return user [ 'accountId' ] if len ( users ) < max_results : break start_at += max_results return None def transform_to_jira_request ( input_payload , reporter_id ) : \"\"\" Transforms the input payload into Jira's required format. Ensures all required fields are properly formatted. \"\"\" jira_request = { \"fields\" : { \"project\" : { \"id\" : input_payload [ 'pid' ] } , \"issuetype\" : { \"id\" : str ( input_payload [ 'issuetype' ] ) } , \"priority\" : { \"id\" : str ( input_payload [ 'priority' ] ) } , \"summary\" : input_payload [ 'summary' ] , \"components\" : [ { \"id\" : input_payload [ 'components' ] } ] , \"description\" : { \"type\" : \"doc\" , \"version\" : 1 , \"content\" : [ { \"type\" : \"text\" , \"text\" : input_payload [ 'description' ] } ] } , \"assignee\" : { \"id\" : input_payload [ 'assignee' ] } , \"reporter\" : { \"id\" : reporter_id } } } return jira_request @app . route ( '/create_issue' , methods = [ 'POST' ] ) def create_issue ( ) : \"\"\" Endpoint handler for creating Jira issues. Includes authentication validation and error handling. \"\"\" authorization_header = request . headers . get ( 'Authorization' ) glean_user_email = request . headers . get ( 'Glean-User-Email' ) if authorization_header is None or glean_user_email is None : return jsonify ( { \"error\" : \"Authorization header or Glean-User-Email not found\" } ) , 401 reporter_id = get_reporter_id ( glean_user_email , authorization_header ) if reporter_id is None : return jsonify ( { \"error\" : \"Reporter ID not found\" } ) , 400 input_payload = request . json jira_request = transform_to_jira_request ( input_payload , reporter_id ) headers = { \"Content-Type\" : \"application/json\" , \"Authorization\" : authorization_header } response = requests . post ( create_issue_url_format , headers = headers , json = jira_request ) if response . status_code == 200 : return jsonify ( { \"resultURL\" : json . loads ( response . text ) . get ( \"key\" ) } ) , 200 else : return jsonify ( { \"error\" : \"Failed to create issue\" , \"details\" : response . text } ) , response . status_code if __name__ == '__main__' : app . run ( port = 8080 ) 2 API Specification The OpenAPI specification defines how Glean Assistant interacts with your action server. This specification provides clear guidance for field population and ensures consistent behavior. Click to expand the complete OpenAPI specification openapi : 3.0.0 info : title : Jira Execution Action version : 1.0.0 servers : - url : https : // { instance - name } - be.glean.com/tools/jira variables : instance : default : instance - name description : The instance name (typically the email domain without the TLD) that determines the deployment backend. paths : /create_issue : post : summary : Creates an issue or a sub - task from a JSON representation description : | This API allows you to create an issue in Jira. parameters : - name : Glean - User - Email in : header required : true schema : type : string description : Email of the authenticated glean user. requestBody : content : application/json : schema : type : object properties : pid : x-glean-typehint : 'JiraProjectID' type : string description : Project ID where the ticket is created. issuetype : type : integer description : The ID corresponding to the type of issue being created. priority : type : integer minimum : 1 maximum : 5 description : Numeric priority. 1 (highest) to 5 (lowest). summary : x-glean-typehint : 'Content' type : string description : Title of the issue components : x-glean-typehint : 'JiraComponentId' type : string description : Component name where the ticket should be filed. description : x-glean-typehint : 'Content' type : string description : Body of the issue. assignee : x-glean-typehint : 'EmailAddress' type : string description : User to which the issue is assigned. required : true responses : '200' : description : OK content : application/json : schema : $ref : '#/components/schemas/CreateIssuePostResponse' '400' : description : Bad Request '401' : description : Not Authorized '409' : description : Conflict components : schemas : CreateIssuePostResponse : type : object properties : resultURL : type : string description : URL of the created issue. 3 Testing and Deployment After configuration, thoroughly test the action before deployment. Testing Process Deploy your server implementation to a publicly accessible endpoint Configure the action in Glean with your server URL Test with various user email addresses to verify user attribution Validate that issues are created with correct project, type, and assignee information Test error scenarios (invalid users, missing permissions, etc.) Deployment Configuration Once testing is complete, deploy the action to your organization with appropriate access controls. Best Practices ​ Security and Authentication ​ OAuth Configuration The implementation incorporates several security measures that protect your Jira integration: The OAuth configuration uses admin-level authentication, which provides centralized control while maintaining individual user attribution The server implementation validates all incoming requests and enforces proper user attribution The Glean-User-Email header ensures that issues are created with the correct reporter, maintaining accountability and traceability User Attribution System ​ Email Mapping The server retrieves the appropriate Jira account ID for each user by matching their email address: This process ensures that issues appear in Jira with the correct reporter Maintains accurate audit trails and user accountability Handles cases where users might not be found in Jira Data Integrity The implementation prevents issues from being created without proper attribution: Safeguards maintain data integrity within your Jira instance Error handling for missing or invalid user information Proper validation of all required fields Performance Optimization ​ Efficient Implementation Several measures ensure optimal performance of the Jira integration: Uses efficient user lookup mechanisms with pagination for large organizations Includes proper request timeouts and connection pooling API specification includes type hints that help Glean Assistant populate fields correctly Reduces the need for repeated attempts or corrections Error Handling ​ Comprehensive Error Management The implementation includes comprehensive error handling that addresses common scenarios: Authentication failures receive appropriate error responses with clear messages Missing or invalid user information is caught and handled gracefully Jira API errors are properly captured and communicated back to users Network issues and timeouts are managed appropriately Common Pitfalls to Avoid ​ warning Watch out for these common implementation mistakes: Authentication Issues Verify OAuth token validity Check scope configurations Confirm user permissions User Attribution Problems Verify email mapping functionality Check Jira user account status Confirm proper header parsing Performance Concerns Monitor response times Check rate limit usage Review connection pooling settings Troubleshooting ​ If you encounter issues during setup or execution: Verify Authentication Configuration Check OAuth credentials are correctly configured Ensure proper scopes are granted Validate server endpoint accessibility Debug User Attribution Verify email mapping functionality Check Jira user account status Confirm proper header parsing and validation Test API Integration Monitor response times and error rates Check rate limit usage against Jira limits Review connection pooling and timeout settings Next Steps ​ After implementing the Jira integration: Documentation : Create comprehensive user documentation Monitoring : Establish monitoring and alerting systems Schedules : Set up regular mainte",
      "topics": [
        "actions",
        "integration"
      ],
      "description": "This page provides a detailed guide on creating an execution action that integrates Glean Assistant with Jira to enable automated issue creation, using OAuth authentication and a custom server implementation. It covers setup, security, user attribution, error handling, and best practices for integration deployment."
    },
    "https://developers.glean.com/guides/actions/authentication": {
      "content": "Guides Actions Authentication On this page Authentication Overview ​ Glean's authentication system supports the OAuth 2.0 standard for securing action requests. This guide covers the available authentication types and how to verify requests from Glean. Authentication Types ​ OAuth Admin Requires one-time authorization by the action developer or app admin during\nsetup. After authorization, Glean sends the token for all requests from\nauthorized users. OAuth User Requires initial OAuth connection setup by the developer/admin. Users must authorize the action on first use, after which their token is used for subsequent requests. None No tokens are provided in the request. Choose this if you don't require specific tokens from Glean to handle requests. warning When using \"None\" authentication type, it's highly recommended to implement request verification to ensure requests are coming from Glean. Without additional protections (e.g., VPN, Firewall), your endpoint would be publicly accessible. OAuth Configuration ​ When setting up OAuth (admin or user), you'll need to configure the following parameters using the OAuth authorization_code grant type : Parameter Type Required Description Client ID string ✓ The client ID for your OAuth application Client Secret string ✓ The client secret for your OAuth application Client URL string ✓ The URL used to redirect users for authentication Authorization URL string ✓ The URL Glean uses to complete OAuth by issuing a POST request with the authorization code Scopes string Optional parameter for relevant application scopes. Consider adding offline_access scope if supported to ensure refresh tokens are sent ( reference ) warning Your OAuth App must be configured to allow redirects (Callback URL) to: https://{your-glean-instance}-be.glean.com/tools/oauth/verify_code/{toolName} You can find your instance name using our instance lookup guide . Without this, the OAuth integration may fail or show invalid redirect URI errors. Request Verification ​ info While optional, implementing request verification is highly recommended to enhance the security of your action server endpoints. Glean provides a JWT-based signature in the Glean-Actions-Signature header, signed using RSA-SHA256. The signature can be verified using your Glean instance's public key. JWT Claims ​ The JWT header includes these standard claims: iat - Issued at time exp - Expiration time iss - Issuer (always set to 'glean') Implementation Examples ​ Python Java import jwt import json import requests # Fill your glean instance here. YOUR_GLEAN_INSTANCE = '' # Find this value using our instance lookup guide: /get-started/authentication#finding-your-glean-instance # Use this function as is in your code (once you have filled out YOUR_GLEAN_INSTANCE). # Pass the header value for Glean-Actions-Signature as the 'token' in this function. def verify_jwt ( token ) : try : # First, we fetch the public key JSON response. response = requests . get ( f\"https:// { YOUR_GLEAN_INSTANCE } -be.glean.com/api/tools/v1/verification_key\" ) response . raise_for_status ( ) # Raises an exception for 4XX/5XX responses public_key_str = response . json ( ) [ 'publicKey' ] # Second, we convert this into the PEM format. pem_key = f\"-----BEGIN PUBLIC KEY-----\\n { public_key_str } \\n-----END PUBLIC KEY-----\" # Finally, we attempt to decode the token using the public key. decoded = jwt . decode ( token , pem_key , algorithms = [ 'RS256' ] , issuer = 'glean' ) return True except jwt . PyJWTError as e : # Handle error (e.g., token expired, token tampered, etc.) print ( f\"JWT verification failed: { e } \" ) return False import java . util . Base64 ; import java . security . KeyFactory ; import java . security . NoSuchAlgorithmException ; import java . security . PublicKey ; import java . security . spec . InvalidKeySpecException ; import java . security . spec . X509EncodedKeySpec ; import org . jose4j . jwa . AlgorithmConstraints ; import org . jose4j . jwt . consumer . InvalidJwtException ; import org . jose4j . jwt . consumer . JwtConsumer ; import org . jose4j . jwt . consumer . JwtConsumerBuilder ; public static void verifySignature ( String publicKey , String jwtFromHeader ) throws IOException { byte [ ] derKey = Base64 . getDecoder ( ) . decode ( publicKey ) ; final X509EncodedKeySpec keySpec = new X509EncodedKeySpec ( derKey ) ; PublicKey rsaOrEcKey ; try { rsaOrEcKey = KeyFactory . getInstance ( JWT_ALG ) . generatePublic ( keySpec ) ; } catch ( NoSuchAlgorithmException e ) { // This should never happen, since we're using a standard algorithm. throw new RuntimeException ( e . getMessage ( ) ) ; } catch ( InvalidKeySpecException e ) { throw new RuntimeException ( \"Unhandled exception during public key setup: \" + e . getMessage ( ) ) ; } AlgorithmConstraints constraints = new AlgorithmConstraints ( AlgorithmConstraints . ConstraintType . WHITELIST , \"RS256\" ) ; JwtConsumer jwtConsumer = new JwtConsumerBuilder ( ) . setRequireExpirationTime ( ) . setRequireIssuedAt ( ) . setAllowedClockSkewInSeconds ( 30 ) . setExpectedIssuer ( \"glean\" ) . setVerificationKey ( rsaOrEcKey ) . setJwsAlgorithmConstraints ( constraints ) . build ( ) ; try { jwtConsumer . processToClaims ( jwtFromHeader ) ; } catch ( InvalidJwtException e ) { throw new IOException ( \"Failed to verify actions signature: \" + e . getMessage ( ) ) ; } } Edit this page Previous Overview Next Creating Actions Overview Authentication Types OAuth Configuration Request Verification JWT Claims Implementation Examples",
      "topics": [
        "authentication",
        "actions"
      ],
      "description": "This page provides guidance on securing Glean Actions using OAuth 2.0 and request verification via JWT signatures. It covers authentication types, OAuth configuration, and implementation examples for verifying that requests originate from Glean."
    },
    "https://developers.glean.com/libraries/api-clients/typescript": {
      "content": "Libraries API Clients TypeScript On this page TypeScript API Client Glean's TypeScript API client provides full type safety for integrating Glean's search and AI capabilities into web applications and Node.js services. @gleanwork/api-client Official TypeScript/JavaScript client for Glean's Client API Installation ​ npm yarn pnpm npm install @gleanwork/api-client yarn add @gleanwork/api-client pnpm add @gleanwork/api-client Quick Start ​ import { Glean } from \"@gleanwork/api-client\" ; const client = new Glean ( { apiToken : process . env . GLEAN_API_TOKEN , instance : process . env . GLEAN_INSTANCE , } ) ; const result = await client . client . chat . create ( { messages : [ { fragments : [ { text : \"What are our company values?\" } ] } ] } ) ; Core Features ​ Chat API ​ // Simple chat const response = await client . client . chat . create ( { messages : [ { fragments : [ { text : \"Explain our Q4 strategy\" } ] } ] } ) ; // Streaming responses const stream = client . client . chat . stream ( { messages : [ { fragments : [ { text : \"What are our priorities?\" } ] } ] } ) ; for await ( const chunk of stream ) { console . log ( chunk . text ) ; } Search API ​ const results = await client . client . search . search ( { query : \"quarterly business review\" , pageSize : 10 } ) ; results . results ?. forEach ( result => { console . log ( ` Title: ${ result . title } ` ) ; console . log ( ` URL: ${ result . url } ` ) ; } ) ; Framework Integrations ​ Next.js API Route ​ // app/api/chat/route.ts import { NextRequest , NextResponse } from 'next/server' ; import { Glean } from '@gleanwork/api-client' ; export async function POST ( request : NextRequest ) { const { message } = await request . json ( ) ; const client = new Glean ( { apiToken : process . env . GLEAN_API_TOKEN ! , instance : process . env . GLEAN_INSTANCE ! , } ) ; const response = await client . client . chat . create ( { messages : [ { fragments : [ { text : message } ] } ] } ) ; return NextResponse . json ( { response : response . text } ) ; } React Component ​ import React , { useState } from 'react' ; import { Glean } from '@gleanwork/api-client' ; export function ChatComponent ( { apiToken , instance } ) { const [ input , setInput ] = useState ( '' ) ; const [ response , setResponse ] = useState ( '' ) ; const client = new Glean ( { apiToken , instance } ) ; const handleSubmit = async ( e ) => { e . preventDefault ( ) ; const result = await client . client . chat . create ( { messages : [ { fragments : [ { text : input } ] } ] } ) ; setResponse ( result . text || '' ) ; } ; return ( < form onSubmit = { handleSubmit } > < input value = { input } onChange = { ( e ) => setInput ( e . target . value ) } placeholder = \"Ask a question...\" / > < button type = \"submit\" > Send < / button > { response && < div > { response } < / div > } < / form > ) ; } Express.js ​ import express from 'express' ; import { Glean } from '@gleanwork/api-client' ; const app = express ( ) ; app . use ( express . json ( ) ) ; const client = new Glean ( { apiToken : process . env . GLEAN_API_TOKEN ! , instance : process . env . GLEAN_INSTANCE ! , } ) ; app . post ( '/api/chat' , async ( req , res ) => { const { message } = req . body ; const response = await client . client . chat . create ( { messages : [ { fragments : [ { text : message } ] } ] } ) ; res . json ( { response : response . text } ) ; } ) ; Authentication ​ User-Scoped Tokens (Recommended) ​ const client = new Glean ( { apiToken : \"your-user-token\" , instance : \"your-company\" } ) ; Global Tokens with ActAs ​ const response = await client . client . chat . create ( { messages : [ { fragments : [ { text : \"Hello\" } ] } ] } , { headers : { \"X-Glean-ActAs\" : \"user@company.com\" } } ) ; Error Handling ​ try { const response = await client . client . chat . create ( { messages : [ { fragments : [ { text : \"Hello\" } ] } ] } ) ; } catch ( error ) { console . error ( 'API error:' , error ) ; } Testing ​ import { jest } from '@jest/globals' ; import { Glean } from '@gleanwork/api-client' ; jest . mock ( '@gleanwork/api-client' ) ; const MockedGlean = Glean as jest . MockedClass < typeof Glean > ; test ( 'chat service' , async ( ) => { const mockCreate = jest . fn ( ) . mockResolvedValue ( { text : 'Test response' } ) ; MockedGlean . mockImplementation ( ( ) => ( { client : { chat : { create : mockCreate } } } as any ) ) ; // Test your code here } ) ; Additional Resources ​ GitHub Repository Source code and examples API Reference Complete endpoint documentation Web SDK Frontend integration components Authentication Guide Token creation and management Edit this page Previous Python Next Go Installation Quick Start Core Features Chat API Search API Framework Integrations Next.js API Route React Component Express.js Authentication User-Scoped Tokens (Recommended) Global Tokens with ActAs Error Handling Testing Additional Resources",
      "topics": [
        "api-clients",
        "chat",
        "search"
      ],
      "description": "This page documents Glean's official TypeScript/JavaScript API client, focusing on how to integrate it into web applications and Node.js services to access Glean's chat and search functionalities with type safety. It includes installation instructions, usage examples for chat and search, framework integrations (Next.js, React, Express), authentication methods, and testing guidance."
    },
    "https://developers.glean.com/libraries/api-clients/go": {
      "content": "Libraries API Clients Go On this page Go API Client Glean's Go API client provides idiomatic Go interfaces for integrating enterprise search and AI capabilities into your Go applications. api-client-go Official Go client for Glean's Client API Installation ​ go get github.com/gleanwork/api-client-go Quick Start ​ package main import ( \"context\" \"fmt\" \"os\" glean \"github.com/gleanwork/api-client-go\" ) func main ( ) { ctx := context . Background ( ) client := glean . New ( glean . WithAPIToken ( os . Getenv ( \"GLEAN_API_TOKEN\" ) ) , glean . WithInstance ( os . Getenv ( \"GLEAN_INSTANCE\" ) ) , ) message := glean . ChatMessageFragment { Text : \"What are our company values?\" , } res , err := client . Client . Chat . Create ( ctx , & glean . ChatRequest { Messages : [ ] glean . ChatMessage { { Fragments : [ ] glean . ChatMessageFragment { message } , } } , } ) if err != nil { fmt . Printf ( \"Error: %v\\n\" , err ) return } fmt . Println ( res . Text ) } Core Features ​ Chat API ​ func chatExample ( client * glean . Client ) error { ctx := context . Background ( ) response , err := client . Client . Chat . Create ( ctx , & glean . ChatRequest { Messages : [ ] glean . ChatMessage { { Fragments : [ ] glean . ChatMessageFragment { { Text : \"Explain our Q4 strategy\" , } } , } } , } ) if err != nil { return err } fmt . Println ( response . Text ) return nil } Search API ​ func searchExample ( client * glean . Client ) error { ctx := context . Background ( ) results , err := client . Client . Search . Search ( ctx , & glean . SearchRequest { Query : \"quarterly business review\" , PageSize : glean . Int ( 10 ) , } ) if err != nil { return err } for _ , result := range results . Results { fmt . Printf ( \"Title: %s\\n\" , result . Title ) fmt . Printf ( \"URL: %s\\n\" , result . URL ) } return nil } Framework Integrations ​ Gin Web Framework ​ package main import ( \"net/http\" \"github.com/gin-gonic/gin\" glean \"github.com/gleanwork/api-client-go\" ) type ChatRequest struct { Message string `json:\"message\"` } func setupRoutes ( client * glean . Client ) * gin . Engine { r := gin . Default ( ) r . POST ( \"/chat\" , func ( c * gin . Context ) { var req ChatRequest if err := c . ShouldBindJSON ( & req ) ; err != nil { c . JSON ( http . StatusBadRequest , gin . H { \"error\" : err . Error ( ) } ) return } response , err := client . Client . Chat . Create ( c . Request . Context ( ) , & glean . ChatRequest { Messages : [ ] glean . ChatMessage { { Fragments : [ ] glean . ChatMessageFragment { { Text : req . Message , } } , } } , } ) if err != nil { c . JSON ( http . StatusInternalServerError , gin . H { \"error\" : err . Error ( ) } ) return } c . JSON ( http . StatusOK , gin . H { \"response\" : response . Text } ) } ) return r } Echo Framework ​ import ( \"net/http\" \"github.com/labstack/echo/v4\" glean \"github.com/gleanwork/api-client-go\" ) func chatHandler ( client * glean . Client ) echo . HandlerFunc { return func ( c echo . Context ) error { var req ChatRequest if err := c . Bind ( & req ) ; err != nil { return echo . NewHTTPError ( http . StatusBadRequest , err . Error ( ) ) } response , err := client . Client . Chat . Create ( c . Request ( ) . Context ( ) , & glean . ChatRequest { Messages : [ ] glean . ChatMessage { { Fragments : [ ] glean . ChatMessageFragment { { Text : req . Message , } } , } } , } ) if err != nil { return echo . NewHTTPError ( http . StatusInternalServerError , err . Error ( ) ) } return c . JSON ( http . StatusOK , map [ string ] string { \"response\" : response . Text , } ) } } Concurrency Patterns ​ Batch Processing with Goroutines ​ func batchSearch ( client * glean . Client , queries [ ] string ) ( [ ] glean . SearchResponse , error ) { ctx := context . Background ( ) results := make ( [ ] glean . SearchResponse , len ( queries ) ) errors := make ( [ ] error , len ( queries ) ) var wg sync . WaitGroup for i , query := range queries { wg . Add ( 1 ) go func ( index int , q string ) { defer wg . Done ( ) result , err := client . Client . Search . Search ( ctx , & glean . SearchRequest { Query : q , } ) if err != nil { errors [ index ] = err return } results [ index ] = * result } ( i , query ) } wg . Wait ( ) // Check for errors for _ , err := range errors { if err != nil { return nil , err } } return results , nil } Authentication ​ User-Scoped Tokens (Recommended) ​ client := glean . New ( glean . WithAPIToken ( \"your-user-token\" ) , glean . WithInstance ( \"your-company\" ) , ) Global Tokens with ActAs ​ ctx := context . Background ( ) // Add ActAs header to context ctx = context . WithValue ( ctx , \"X-Glean-ActAs\" , \"user@company.com\" ) response , err := client . Client . Chat . Create ( ctx , & glean . ChatRequest { Messages : [ ] glean . ChatMessage { { Fragments : [ ] glean . ChatMessageFragment { { Text : \"Hello\" , } } , } } , } ) Error Handling ​ func safeChat ( client * glean . Client , message string ) ( string , error ) { ctx , cancel := context . WithTimeout ( context . Background ( ) , 30 * time . Second ) defer cancel ( ) response , err := client . Client . Chat . Create ( ctx , & glean . ChatRequest { Messages : [ ] glean . ChatMessage { { Fragments : [ ] glean . ChatMessageFragment { { Text : message , } } , } } , } ) if err != nil { return \"\" , fmt . Errorf ( \"chat error: %w\" , err ) } return response . Text , nil } Testing ​ import ( \"context\" \"testing\" \"github.com/stretchr/testify/assert\" \"github.com/stretchr/testify/mock\" ) func TestChatService ( t * testing . T ) { // Mock implementation mockClient := & MockGleanClient { } expectedResponse := & glean . ChatResponse { Text : \"Test response\" , } mockClient . On ( \"Create\" , mock . Anything , mock . Anything ) . Return ( expectedResponse , nil ) // Test your service here assert . NotNil ( t , expectedResponse ) } Additional Resources ​ GitHub Repository Source code and examples API Reference Complete endpoint documentation Authentication Guide Token creation and management Go Documentation Go package documentation Edit this page Previous TypeScript Next Java Installation Quick Start Core Features Chat API Search API Framework Integrations Gin Web Framework Echo Framework Concurrency Patterns Batch Processing with Goroutines Authentication User-Scoped Tokens (Recommended) Global Tokens with ActAs Error Handling Testing Additional Resources",
      "topics": [
        "api-clients",
        "chat",
        "search"
      ],
      "description": "This page documents Glean's Go API client, providing idiomatic Go interfaces for integrating enterprise search and AI-powered chat capabilities into Go applications. It includes installation instructions, quick start examples, usage of core features like Chat and Search APIs, framework integrations, concurrency patterns, authentication methods, error handling, and testing guidance."
    },
    "https://developers.glean.com/libraries/web-sdk/guides/brightspot": {
      "content": "Libraries Web SDK Guides Brightspot Brightspot The following steps will guide you through replacing your Brightspot site's native search with Glean's modal search interface. 1 Access Site Settings Navigate to Admin > Sites & Settings in your Brightspot dashboard and select the site(s) where you want to implement Glean search. 2 Navigate to Front-end Settings In the Edit Site view: 1. Select the Front-end tab 2. Expand the Advanced section 3 Add Custom Head Elements Container Click Add Custom Head Elements 2. Set Internal Name to Glean 4 Configure Web SDK Script Under Elements , add a Script Element with the following configuration: Field Value Required Internal Name Glean Web SDK ✅ Type Link ✅ Script URL https://app.glean.com/embedded-search-latest.min.js ✅ Defer true ✅ 5 Add Integration Script Add another Script Element with these settings: Field Value Required Internal Name Glean Search Replace ✅ Type Inline ✅ Body See script below ✅ addEventListener ( 'DOMContentLoaded' , ( ) => { // If you've customized the page header, you'll need to adjust these selectors. GleanWebSDK . attach ( document . querySelector ( '.Page-header-search-open' ) ) ; GleanWebSDK . attach ( document . querySelector ( '.Page-header-search-input' ) ) ; } ) 6 Save Changes Click Save to apply your configuration changes. note If you have customized your page header, you may need to modify the CSS\nselectors in the integration script to match your specific implementation. Edit this page Previous Lumapps Next Overview",
      "topics": [
        "web-sdk",
        "integration",
        "development-tools"
      ],
      "description": "This page provides step-by-step instructions for replacing a Brightspot site's native search with Glean's modal search interface using the Web SDK, including custom script injection and DOM integration. It focuses on frontend implementation and configuration within a specific CMS platform."
    },
    "https://developers.glean.com/libraries/api-clients/python": {
      "content": "Libraries API Clients Python On this page Python API Client Glean's Python API client provides a Pythonic interface to Glean's Client API, making it easy to integrate enterprise search and AI capabilities into your Python applications. glean-api-client Official Python client for Glean's Client API info Authentication Required : You'll need a Client API token to use this library. Installation ​ pip poetry uv pip install glean-api-client poetry add glean-api-client uv add glean-api-client Quick Start ​ 1 Set up environment variables export GLEAN_INSTANCE=\"your-company\" export GLEAN_API_TOKEN=\"your-token-here\" 2 Basic usage from glean . api_client import Glean import os with Glean ( api_token = os . getenv ( \"GLEAN_API_TOKEN\" ) , instance = os . getenv ( \"GLEAN_INSTANCE\" ) , ) as client : response = client . client . chat . create ( messages = [ { \"fragments\" : [ { \"text\" : \"What are our company values?\" } ] } ] , timeout_millis = 30000 ) print ( response ) Core Features ​ Chat API ​ Build conversational AI applications: # Simple chat response = client . client . chat . create ( messages = [ { \"fragments\" : [ { \"text\" : \"Explain our Q4 strategy\" } ] } ] ) # Streaming chat for real-time responses for chunk in client . client . chat . stream ( messages = [ { \"fragments\" : [ { \"text\" : \"What are our priorities?\" } ] } ] ) : print ( chunk . text , end = \"\" , flush = True ) Search API ​ Integrate enterprise search: results = client . client . search . search ( query = \"quarterly business review\" , page_size = 10 ) for result in results . results : print ( f\"Title: { result . title } \" ) print ( f\"URL: { result . url } \" ) Agents API ​ Execute pre-built agents: response = client . client . agents . create_and_wait_run ( agent_id = \"your-agent-id\" , inputs = { \"query\" : \"Analyze sales performance\" } ) Framework Integrations ​ FastAPI ​ from fastapi import FastAPI from glean . api_client import Glean from pydantic import BaseModel app = FastAPI ( ) class ChatRequest ( BaseModel ) : message : str @app . post ( \"/chat\" ) async def chat_endpoint ( request : ChatRequest ) : with Glean ( api_token = os . getenv ( \"GLEAN_API_TOKEN\" ) , instance = os . getenv ( \"GLEAN_INSTANCE\" ) , ) as client : response = client . client . chat . create ( messages = [ { \"fragments\" : [ { \"text\" : request . message } ] } ] ) return { \"response\" : response . text } Django ​ from django . http import JsonResponse from glean . api_client import Glean import json def chat_view ( request ) : data = json . loads ( request . body ) message = data . get ( 'message' ) with Glean ( api_token = os . getenv ( \"GLEAN_API_TOKEN\" ) , instance = os . getenv ( \"GLEAN_INSTANCE\" ) , ) as client : response = client . client . chat . create ( messages = [ { \"fragments\" : [ { \"text\" : message } ] } ] ) return JsonResponse ( { 'response' : response . text } ) Streamlit ​ import streamlit as st from glean . api_client import Glean st . title ( \"Company Knowledge Assistant\" ) user_input = st . text_input ( \"Ask a question:\" ) if user_input : with Glean ( api_token = os . getenv ( \"GLEAN_API_TOKEN\" ) , instance = os . getenv ( \"GLEAN_INSTANCE\" ) , ) as client : response = client . client . chat . create ( messages = [ { \"fragments\" : [ { \"text\" : user_input } ] } ] ) st . write ( response . text ) Authentication ​ User-Scoped Tokens (Recommended) ​ client = Glean ( api_token = \"your-user-token\" , instance = \"your-company\" ) Global Tokens with ActAs ​ response = client . client . chat . create ( messages = [ { \"fragments\" : [ { \"text\" : \"Hello\" } ] } ] , headers = { \"X-Glean-ActAs\" : \"user@company.com\" } ) Error Handling ​ from glean . api_client . exceptions import GleanAPIError try : response = client . client . chat . create ( messages = [ . . . ] ) except GleanAPIError as e : print ( f\"API error: { e } \" ) except Exception as e : print ( f\"Unexpected error: { e } \" ) Testing ​ Unit Testing with Mocks ​ import pytest from unittest . mock import patch , MagicMock @pytest . fixture def mock_glean_client ( ) : with patch ( 'your_app.Glean' ) as mock : client_instance = MagicMock ( ) mock . return_value . __enter__ . return_value = client_instance yield client_instance def test_chat_service ( mock_glean_client ) : mock_response = MagicMock ( ) mock_response . text = \"Test response\" mock_glean_client . client . chat . create . return_value = mock_response result = send_message ( \"Hello\" ) assert result == \"Test response\" Additional Resources ​ GitHub Repository Source code and examples API Reference Complete endpoint documentation Authentication Guide Token creation and management LangChain Integration Use with LangChain framework Edit this page Previous Overview Next TypeScript Installation Quick Start Core Features Chat API Search API Agents API Framework Integrations FastAPI Django Streamlit Authentication User-Scoped Tokens (Recommended) Global Tokens with ActAs Error Handling Testing Unit Testing with Mocks Additional Resources",
      "topics": [
        "api-clients",
        "chat",
        "search"
      ],
      "description": "This page documents the Python API client for Glean's Client API, enabling developers to integrate chat, search, and agent functionalities into Python applications. It covers installation, authentication, core features like chat and search, framework integrations, and testing practices."
    },
    "https://developers.glean.com/libraries/api-clients/java": {
      "content": "Libraries API Clients Java On this page Java API Client Glean's Java API client provides enterprise-ready integration for Java applications, with support for Spring Boot and traditional enterprise patterns. glean-api-client Official Java client for Glean's Client API Installation ​ Maven Gradle < dependency > < groupId > com.glean.api-client </ groupId > < artifactId > glean-api-client </ artifactId > < version > 0.x.x </ version > </ dependency > implementation 'com.glean.api-client:glean-api-client:0.x.x' Quick Start ​ import com . glean . api_client . glean_api_client . Glean ; import com . glean . api_client . glean_api_client . models . components . * ; import java . util . List ; public class GleanExample { public static void main ( String [ ] args ) { Glean client = Glean . builder ( ) . apiToken ( System . getenv ( \"GLEAN_API_TOKEN\" ) ) . instance ( System . getenv ( \"GLEAN_INSTANCE\" ) ) . build ( ) ; var response = client . client ( ) . chat ( ) . create ( ) . chatRequest ( ChatRequest . builder ( ) . messages ( List . of ( ChatMessage . builder ( ) . fragments ( List . of ( ChatMessageFragment . builder ( ) . text ( \"What are our company values?\" ) . build ( ) ) ) . build ( ) ) ) . build ( ) ) . call ( ) ; if ( response . chatResponse ( ) . isPresent ( ) ) { System . out . println ( response . chatResponse ( ) . get ( ) . text ( ) ) ; } } } Core Features ​ Chat API ​ public class ChatService { private final Glean client ; public ChatService ( String apiToken , String instance ) { this . client = Glean . builder ( ) . apiToken ( apiToken ) . instance ( instance ) . build ( ) ; } public String sendMessage ( String message ) { var response = client . client ( ) . chat ( ) . create ( ) . chatRequest ( ChatRequest . builder ( ) . messages ( List . of ( ChatMessage . builder ( ) . fragments ( List . of ( ChatMessageFragment . builder ( ) . text ( message ) . build ( ) ) ) . build ( ) ) ) . build ( ) ) . call ( ) ; return response . chatResponse ( ) . map ( ChatResponse :: text ) . orElse ( \"No response\" ) ; } } Search API ​ public class SearchService { private final Glean client ; public SearchService ( String apiToken , String instance ) { this . client = Glean . builder ( ) . apiToken ( apiToken ) . instance ( instance ) . build ( ) ; } public List < SearchResult > search ( String query ) { var response = client . client ( ) . search ( ) . search ( ) . searchRequest ( SearchRequest . builder ( ) . query ( query ) . pageSize ( 10 ) . build ( ) ) . call ( ) ; return response . searchResponse ( ) . map ( SearchResponse :: results ) . orElse ( List . of ( ) ) ; } } Spring Boot Integration ​ Configuration ​ @Configuration @ConfigurationProperties ( prefix = \"glean\" ) public class GleanConfig { private String apiToken ; private String instance ; // Getters and setters public String getApiToken ( ) { return apiToken ; } public void setApiToken ( String apiToken ) { this . apiToken = apiToken ; } public String getInstance ( ) { return instance ; } public void setInstance ( String instance ) { this . instance = instance ; } } @Configuration @EnableConfigurationProperties ( GleanConfig . class ) public class GleanAutoConfiguration { @Bean public Glean gleanClient ( GleanConfig config ) { return Glean . builder ( ) . apiToken ( config . getApiToken ( ) ) . instance ( config . getInstance ( ) ) . build ( ) ; } } REST Controller ​ @RestController @RequestMapping ( \"/api\" ) public class GleanController { private final Glean gleanClient ; public GleanController ( Glean gleanClient ) { this . gleanClient = gleanClient ; } @PostMapping ( \"/chat\" ) public ResponseEntity < String > chat ( @RequestBody Map < String , String > request ) { try { String message = request . get ( \"message\" ) ; var response = gleanClient . client ( ) . chat ( ) . create ( ) . chatRequest ( ChatRequest . builder ( ) . messages ( List . of ( ChatMessage . builder ( ) . fragments ( List . of ( ChatMessageFragment . builder ( ) . text ( message ) . build ( ) ) ) . build ( ) ) ) . build ( ) ) . call ( ) ; String responseText = response . chatResponse ( ) . map ( ChatResponse :: text ) . orElse ( \"No response\" ) ; return ResponseEntity . ok ( responseText ) ; } catch ( Exception e ) { return ResponseEntity . status ( 500 ) . body ( \"Error: \" + e . getMessage ( ) ) ; } } } Authentication ​ User-Scoped Tokens (Recommended) ​ Glean client = Glean . builder ( ) . apiToken ( \"your-user-token\" ) . instance ( \"your-company\" ) . build ( ) ; Configuration Properties ​ # application.yml glean : api-token : $ { GLEAN_API_TOKEN } instance : $ { GLEAN_INSTANCE } Error Handling ​ public String safeChat ( Glean client , String message ) { try { var response = client . client ( ) . chat ( ) . create ( ) . chatRequest ( ChatRequest . builder ( ) . messages ( List . of ( ChatMessage . builder ( ) . fragments ( List . of ( ChatMessageFragment . builder ( ) . text ( message ) . build ( ) ) ) . build ( ) ) ) . build ( ) ) . call ( ) ; return response . chatResponse ( ) . map ( ChatResponse :: text ) . orElse ( \"No response\" ) ; } catch ( Exception e ) { System . err . println ( \"API error: \" + e . getMessage ( ) ) ; return \"Sorry, I couldn't process your request.\" ; } } Testing ​ JUnit 5 with Mockito ​ @ExtendWith ( MockitoExtension . class ) class ChatServiceTest { @Mock private Glean gleanClient ; @InjectMocks private ChatService chatService ; @Test void shouldSendMessageSuccessfully ( ) { String message = \"Test message\" ; String expectedResponse = \"Test response\" ; // Mock setup and test implementation assertNotNull ( expectedResponse ) ; } } Additional Resources ​ GitHub Repository Source code and examples API Reference Complete endpoint documentation Authentication Guide Token creation and management Maven Central Maven repository Edit this page Previous Go Next Overview Installation Quick Start Core Features Chat API Search API Spring Boot Integration Configuration REST Controller Authentication User-Scoped Tokens (Recommended) Configuration Properties Error Handling Testing JUnit 5 with Mockito Additional Resources",
      "topics": [
        "api-clients",
        "authentication",
        "development-tools"
      ],
      "description": "This page documents the Java API client for Glean, providing setup instructions, code examples for chat and search functionality, Spring Boot integration, authentication via API tokens, error handling, and testing practices. Its main purpose is to help Java developers integrate Glean's Client API into enterprise applications."
    },
    "https://developers.glean.com/api-info/indexing/datasource/test-datasource": {
      "content": "Indexing API Datasource Test Datasource On this page Test Datasource Before going live with a production datasource you might want to set up a test/staging datasource. You can use a test datasource to experiment with the indexing API, or to stage your changes. This test datasource lives in the production environment but doesn’t affect it. You can do this by ensuring that: All ranking signals are turned off from a test datasource. This ensures that the production is not affected by a test datasource. The test datasource is only visible to select users so that a developer can check results and permissions easily. Setting up a test datasource is quite easy, you have to go through almost the same steps as you would go through setting up a normal datasource, but there are some differences. The steps are: 1. Setting isTestDatasource to true ​ When setting up the datasource using /adddatasource , remember to set the isTestDatasource field to true. curl Python curl -X POST https://customer-be.glean.com/api/index/v1/adddatasource \\ ... \"isTestDatasource\" : \"true” ... from glean_indexing_api_client . api import datasources_api from glean_indexing_api_client . model . custom_datasource_config import CustomDatasourceConfig # Please refer to the Getting Started page for more details on how to setup api_client datasource_api = datasources_api . DatasourcesApi ( api_client ) datasource_config = CustomDatasourceConfig ( . . . , # other fields is_test_datasource = True ) try : datasource_api . adddatasource_post ( datasource_config ) except indexing_api . ApiException as e : print ( 'Exception when calling DatasourcesApi->adddatasource_post: %s\\\\n' % e ) Glean turns off ranking signals from a test datasource. For example, Glean uses document references(link to a document) as one of its ranking signals. A document that is referenced more in other documents will be given more importance then a less referenced one. Glean stops all such signals for a test datasource so that it does not pollute production rankings. 2. Using /betausers endpoint to give select visibilty to users. ​ At this stage your test datasource is not affecting the production and it is neither visible to anyone. Now you would like to give selective visibility to it. This can be done using the /betausers endpoint. This endpoint allows you to control the people who can have visibility to the test datasource. An example command would look like: curl Python curl -X POST https://customer-be.glean.com/api/index/v1/betausers \\ -H 'Authorization: Bearer <token>' \\ -H 'Content-Type : application/json' \\ -d ' { \"datasource\": \"gleantest\", \"emails\": [ \"user1@example.com\", \"user2@example.com\" ] }' from glean_indexing_api_client . api import permissions_api from glean_indexing_api_client . model . greenlist_users_request import GreenlistUsersRequest # Please refer to the Getting Started page for more details on how to setup api_client permission_api = permissions_api . PermissionsApi ( api_client ) greenlist_users_request = GreenlistUsersRequest ( datasource = “gleantest” , emails = [ \"user1@example.com\" , \"user2@example.com\" ] ) try : permission_api . betausers_post ( greenlist_users_request ) except glean_indexing_api_client . ApiException as e : print ( \"Exception when calling PermissionsApi->betausers_post: %s\\n\" % e ) This command would give visibility of the test datasource to user1 and user2. This would allow you to test your custom datasource among a small number of users. Note: For a document to be visible to beta users, they must also have appropriate permissions to view it. For more details about setting permissions, follow the Setting Permissions tutorial. Edit this page Previous Custom Properties Next Category 1. Setting isTestDatasource to true 2. Using /betausers endpoint to give select visibilty to users.",
      "topics": [
        "datasources",
        "indexing-api",
        "permissions"
      ],
      "description": "This page explains how to set up and configure a test datasource using the Indexing API, including marking it as a test and restricting visibility to select users via the betausers endpoint, ensuring it does not impact production rankings or access."
    },
    "https://developers.glean.com/api-info/indexing/datasource/category": {
      "content": "Indexing API Datasource Category On this page Category Choosing the appropriate type enables enhanced ranking. Please contact us if you\nare unsure of how to categorize your datasource. If a datasource has multiple\nobjectTypes which belong to different categories (such as Zendesk articles and\nZendesk tickets), please set each category using objectDefinitions.docCategory .\nThe category definitions below still apply. Datasource Category ​ Category Name Description KNOWLEDGE_HUB Reference documentation that may be continually updated as a source of truth, such as Github READMEs, Confluence documents, or ServiceNow knowledge articles PUBLISHED_CONTENT Blog posts published at a point in time, such as Brightspot posts or Confluence blog posts. Note that Confluence blog posts are different from other Confluence documents, which should be classified as KNOWLEDGE_HUB. COLLABORATIVE_CONTENT Documents that can be edited collaboratively, such as Google Drive, Dropbox, or Figma files QUESTION_ANSWER Question-answer content such as Stack Overflow posts TICKETS Work item or issue trackers such as Asana tasks, Jira tickets, or Github issues CODE_REPOSITORY Source code repositories such as Github repositories CHANGE_MANAGEMENT Code change management systems such as pull or merge requests on Github EMAIL Email content such as Gmail or Outlook messages MESSAGING Chat message or conversational content such as Slack or Discord messages CRM Customer relationship management systems such as Sales Cloud SSO Single-sign-on services such as Azure SSO or GSuite SSO ATS Applicant tracking systems such as Greenhouse PEOPLE This should not be used, please instead use the /bulkindexemployees API to upload data about employees EXTERNAL_SHORTCUT This should not be used; please contact us for guidance UNCATEGORIZED This should not be used; please contact us for guidance Edit this page Previous Test Datasource Next Rendering Search Results Datasource Category",
      "topics": [
        "indexing-api",
        "datasources",
        "knowledge-base"
      ],
      "description": "This page explains how to categorize datasources in the Indexing API to improve content ranking, providing definitions for each category and guidance on proper classification based on content type."
    },
    "https://developers.glean.com/libraries/web-sdk/guides/lumapps": {
      "content": "Libraries Web SDK Guides Lumapps LumApps To integrate Glean's modal search interface into your LumApps environment, you'll need to add custom code to your site's header. This can be done using LumApps' custom code feature . note Replace {YOUR_GLEAN_DOMAIN} in the code below with your company's Glean\ndomain (e.g., app.glean.com, company.glean.com) HTML Integration Code < style > .searchbox__suggestions { display : none !important ; } </ style > < script defer src = \" https://{YOUR_GLEAN_DOMAIN}/embedded-search-latest.min.js \" > </ script > < script > window . addEventListener ( 'load' , async ( ) => { const getSearchBox = ( ) => document . querySelector ( \".header-top__search\" ) ; while ( ! getSearchBox ( ) ) { await new Promise ( r => setTimeout ( r , 300 ) ) ; } window . GleanWebSDK . attach ( getSearchBox ( ) ) ; } ) </ script > The integration code performs three key functions: Disables LumApps' native search suggestions using CSS Loads the Glean Web SDK from your company's domain Attaches Glean's search functionality to the LumApps search box once the page has fully loaded info The script includes a polling mechanism to ensure the search box element is present before attempting to attach the Glean functionality, preventing any race conditions during page load. Edit this page Previous Zendesk Next Brightspot",
      "topics": [
        "web-sdk",
        "integration",
        "development-tools"
      ],
      "description": "This page provides instructions for integrating Glean's modal search interface into LumApps by adding custom HTML and JavaScript code to the site header. It covers loading the Glean Web SDK, attaching search functionality, and disabling native search suggestions."
    },
    "https://developers.glean.com/libraries/web-sdk/guides/zendesk": {
      "content": "Libraries Web SDK Guides Zendesk On this page Zendesk Overview ​ Glean offers two distinct options for implementing search functionality within Zendesk Guide: Modal Search A modal search interface that overlays the current page when activated Autocomplete & Results Page An integrated search experience with autocomplete and a dedicated results\npage note These implementation instructions are based on the Copenhagen Zendesk Template. While they should work with other themes with minimal\nmodifications, some adjustments may be needed depending on your specific\ntheme. Modal Search Implementation ​ 1 Access Theme Customization Navigate to the Customize design section by clicking the \"eye\" icon in the left navigation 2 Select Theme Locate the Live theme section and click Customize on your theme warning For live help centers, we recommend creating a copy of your theme for testing: Find your live theme Click the three vertical dots menu Select Copy 3 Edit Theme Code Click Edit Code to access the theme code editor Open script.js from the left panel Add the following code at the top level: const gleanScript = document . createElement ( \"script\" ) ; gleanScript . src = \"https://{YOUR_GLEAN_DOMAIN}/browser-api/embedded-search-latest.min.js\" ; gleanScript . defer = true ; gleanScript . addEventListener ( \"load\" , function ( ) { EmbeddedSearch . attach ( document . querySelector ( \"input[type=search]\" ) ) ; } ) ; document . head . append ( gleanScript ) ; Click Save 4 Preview and Publish Click Preview in the left panel to verify your changes Once confirmed, apply the changes to your live theme Click Publish to make the changes live Autocomplete and Search Results Implementation ​ 1 Import JavaScript Files Access theme customization as described above Click Edit Code Open document_header.hbs Add the following script tag: <script defer src=\"https://{YOUR_GLEAN_DOMAIN}/browser-api/glean-for-zendesk-guide-latest.min.js\"></script> 2 Replace Search UI Components Home Page Search ​ Open home_page.hbs Replace the existing {{search}} component with: <div class=\"glean-search-box\" style=\"width: 100%; height: 60px; max-width: 600px; margin:auto; position: relative;\" > </div> Search Results Page ​ Open search_results.hbs Replace all existing code with: <div class=\"glean-search-results\" style=\"width: 100%; margin:auto; position: relative;\"></div> 3 Add Compact Search Box Open article_page.hbs Replace the existing search code with: <div class=\"glean-search-box--compact\" style=\"width: 100%; height: 42px; max-width: 600px; margin:auto; position: relative;\" > </div> 4 Initialize Glean Search Open script.js Add the following code at the end of the file: /** Setup Glean search **/ function initializeGleanSearch ( ) { // Note: This should match the backend URL for your Glean setup const backend = '<CHANGEME>' ; // See available customizations here: https://app.glean.com/meta/browser_api/interfaces/SearchBoxCustomizations.html const customizations = { boxShadow : 'none' , borderRadius : 8 , placeholderText : 'Search...' , // Change me to a placeholder of your choice } ; // Initialize GleanForZendesk GleanForZendeskGuide . init ( { // This should match the search page used by your theme -- this usually matches /hc/search searchUrl : '/hc/search' , // If your Glean setup supports guest users, mark this as true. // Note: If your Glean setup is internal users only, this option will be ignored. anonymous : false , backend , } ) . then ( ( instance ) => { // Attach hero search box instance . renderSearchBox ( '.glean-search-box' , { searchBoxCustomizations : Object . assign ( { } , customizations , { fontSize : 20 , // Additional customizations can be added here } ) , backend , } ) ; // Attach compact search box instance . renderSearchBox ( '.glean-search-box--compact' , { searchBoxCustomizations : Object . assign ( { } , customizations , { fontSize : 16 , // Additional customizations can be added here } ) , backend , } ) ; // Attach search results instance . renderSearchResults ( '.glean-search-results' , { backend , showInlineSearchBox : true } ) ; } ) ; } if ( document . readyState === 'loading' ) { document . addEventListener ( 'DOMContentLoaded' , initializeGleanSearch ) ; } else { initializeGleanSearch ( ) ; } 5 Verify and Publish Click Preview to test your changes Apply the changes to your live theme Click Publish to make the changes live Edit this page Previous React Next Lumapps Overview Modal Search Implementation Autocomplete and Search Results Implementation Home Page Search Search Results Page",
      "topics": [
        "web-sdk",
        "integration",
        "search"
      ],
      "description": "This page provides step-by-step instructions for integrating Glean's search functionality into Zendesk Guide using the Web SDK, offering two implementation options: modal search and autocomplete with dedicated search results. It covers code modifications, theme customization, and initialization needed to embed Glean search within a Zendesk help center."
    },
    "https://developers.glean.com/guides/actions/examples/zendesk-ticket-redirection": {
      "content": "Guides Actions Examples Zendesk Ticket Redirection On this page Zendesk Ticket Redirection Action Overview ​ This guide demonstrates how to create a redirect action that allows users to create Zendesk tickets through Glean Assistant. This implementation leverages Zendesk's URL-based ticket creation parameters to provide a seamless experience that directs users to the familiar Zendesk interface with pre-populated ticket fields. This is a redirect action that directs users to Zendesk's ticket creation interface with pre-populated fields using URL parameters. Prerequisites ​ Before implementing this action, ensure you have: Administrator access to your Zendesk and Glean instances Understanding of Zendesk's URL parameter structure and ticket creation interface Access to Zendesk API documentation for field mappings Knowledge of redirect action configuration principles Implementation Guide ​ 1 OpenAPI Specification Design The OpenAPI specification serves as the blueprint for parameter handling and URL construction. This specification must accurately reflect Zendesk's parameter structure and validation requirements. Click to expand the complete OpenAPI specification openapi : 3.0.0 info : title : Create Zendesk Ticket Action version : 1.0.0 servers : - url : https : // { ZENDESK_SUBDOMAIN } .zendesk.com/agent/tickets/new ? variables : ZENDESK_SUBDOMAIN : default : your - subdomain description : Your Zendesk subdomain paths : / : post : summary : Create a new support ticket in Zendesk description : | This action redirects to Zendesk's ticket creation interface with pre-populated fields for efficient ticket creation and management. parameters : - name : ticket [ requester ] in : query required : true schema : type : string x-glean-typehint : EmailAddress description : Email address of the person requesting support - name : ticket [ subject ] in : query required : true schema : type : string x-glean-typehint : Content description : Brief summary of the issue or request - name : ticket [ description ] in : query required : true schema : type : string x-glean-typehint : Content description : Detailed description of the issue or request - name : ticket [ priority ] in : query schema : type : string enum : - low - normal - high - urgent default : normal description : Priority level of the ticket - name : ticket [ type ] in : query schema : type : string enum : - question - incident - problem - task default : question description : Type of ticket being created - name : ticket [ status ] in : query schema : type : string enum : - new - open - pending - hold - solved - closed default : new description : Initial status of the ticket responses : '200' : description : Successful redirect to Zendesk ticket creation interface content : text/html : schema : type : string 2 URL Construction Strategy The URL construction process is the core functionality of this redirect action. Understanding how Zendesk processes URL parameters ensures that tickets are created with the correct information. Parameter Structure Zendesk uses a nested parameter structure where ticket fields are prefixed with ticket[] . This format ensures that parameters are properly interpreted by Zendesk's ticket creation interface. For example, ticket[subject] sets the ticket's subject field. Required vs Optional Parameters The specification defines three required parameters that ensure basic ticket functionality: ticket[requester] : The email address of the person requesting support ticket[subject] : A brief summary of the issue or request ticket[description] : Detailed information about the issue Optional parameters provide additional context and workflow control: ticket[priority] : Allows setting urgency levels (low, normal, high, urgent) ticket[type] : Categorizes the ticket (question, incident, problem, task) ticket[status] : Sets initial workflow state (typically \"new\") Content Generation Guidelines The x-glean-typehint directives guide Glean Assistant in generating appropriate content: EmailAddress : Ensures valid email format for the requester field Content : Generates contextually appropriate text for subject and description 3 Testing and Deployment Thorough testing ensures that the redirect action functions correctly across different scenarios and user types. Testing Process Test URL generation with various parameter combinations Verify that redirects properly reach Zendesk's interface Confirm that all fields are correctly populated in Zendesk's form Test with different user types and permission levels Validate parameter encoding for special characters and long content Test edge cases such as missing optional parameters Deployment Configuration Configure deployment settings to ensure appropriate access control and user experience. Best Practices ​ Parameter Management ​ Effective Parameter Design The specification implements several best practices for parameter management: Clear Naming : Use descriptive parameter names that match Zendesk's expectations Appropriate Defaults : Provide sensible default values for optional parameters Type Validation : Use enums to constrain values to valid options Content Hints : Leverage type hints to guide content generation URL Construction and Encoding ​ Proper URL Encoding URL construction requires careful attention to encoding: Encode special characters to prevent URL parsing errors Handle spaces and line breaks in description fields Ensure parameter values don't exceed URL length limits Validate parameter order for optimal compatibility Content Length Management Manage content length to ensure successful redirects: Monitor description length to prevent URL truncation Implement content summarization for long descriptions Consider character encoding implications Test with various content types and formats Security Considerations ​ Security Best Practices Important security measures for redirect actions: Domain Validation : Ensure redirects only target authorized Zendesk instances Parameter Sanitization : Clean parameter values to prevent injection attacks Access Control : Verify users have appropriate permissions to create tickets Audit Logging : Log action usage for security monitoring and compliance Performance Optimization ​ Redirect Efficiency Optimize redirect performance: Minimize the number of parameters to reduce URL complexity Cache parameter validation logic where possible Implement client-side validation to prevent invalid redirects Monitor redirect success rates and failure patterns User Experience Enhance the user experience: Provide clear feedback during the redirect process Ensure smooth transitions between Glean and Zendesk interfaces Handle error scenarios gracefully with appropriate messaging Consider mobile compatibility for redirect URLs Advanced Configuration ​ Multi-Subdomain Support ​ Multiple Zendesk Instances For organizations with multiple Zendesk instances: Dynamic Subdomain Selection : Implement logic to determine the correct Zendesk subdomain based on user context Configuration Management : Maintain mappings between user groups and Zendesk instances URL Template Flexibility : Design URL templates that accommodate different subdomain patterns Error Handling : Provide fallback mechanisms when subdomain determination fails Custom Field Integration ​ Enhanced Field Mapping Support for Zendesk custom fields: Custom Field Parameters : Add parameters for organization-specific custom fields Field Validation : Implement validation for custom field values and formats Dynamic Field Discovery : Consider mechanisms for automatically discovering available custom fields Field Mapping Logic : Create mappings between Glean context and Zendesk custom fields Common Pitfalls to Avoid ​ warning Common challenges and their solutions: URL Length Limitations Monitor total URL length to prevent truncation Implement content summarization for long descriptions Consider parameter prioritization for essential fields Character Encoding Issues Properly encode special characters and Unicode content Test with various languages and character sets Validate encoding compatibility with Zendesk Parameter Mapping Errors Verify parameter names match Zendesk's expectations Test with different ticket types and field configurations Validate enum values against current Zendesk setup Redirect Failures Implement fallback mechanisms for failed redirects Provide clear error messages for troubleshooting Monitor redirect success rates and common failure points Troubleshooting ​ If you encounter issues during implementation or operation: Verify Parameter Configuration Check parameter names against Zendesk documentation Validate enum values match your Zendesk configuration Ensure required parameters are properly marked Test URL Construction Manually test generated URLs in browsers Verify parameter encoding and formatting Check URL length against browser limitations Debug Zendesk Integration Confirm Zendesk subdomain and URL structure Test with different user permission levels Validate field mappings and custom field configurations Monitor Performance Track redirect success and failure rates Monitor user feedback and error reports Analyze usage patterns for optimization opportunities Next Steps ​ To ensure ongoing success: Documentation : Create comprehensive user guides and troubleshooting resources Monitoring : Establish metrics tracking for redirect success rates and user satisfaction Feedback : Implement feedback collection mechanisms for continuous improvement Maintenance : Plan regular reviews of parameter configurations and Zendesk compatibility Enhancement : Consider additional features such as template-based ticket creation This implementation provides a solid foundation for streamlined ticket creation while maintaining the familiar Zendesk interface. Regular monitoring and user feedback will guide future enhancements and ensure continued effectiveness. Edit this page Previous Google Docs Update Next FAQ Overview Prerequisites Implementa",
      "topics": [
        "actions",
        "integration",
        "automation"
      ],
      "description": "This page provides a detailed guide on creating a redirect action that integrates Glean Assistant with Zendesk, enabling users to create support tickets with pre-populated fields via URL parameters. It covers implementation, best practices, testing, and troubleshooting for seamless workflow automation between the two systems."
    },
    "https://developers.glean.com/guides/actions/examples/google-docs-update": {
      "content": "Guides Actions Examples Google Docs Update On this page Google Docs Update Action Overview ​ This guide demonstrates how to create an execution action that enables Glean Assistant to update Google Documents. You'll learn how to configure the OpenAPI specification, set up OAuth authentication, and deploy the action for use within your organization. This is an execution action that performs operations directly within Glean by making API calls to Google Docs on behalf of users. Prerequisites ​ Before proceeding, ensure you have: Admin or app developer access to Glean Access to Google Cloud Console Familiarity with OAuth 2.0 authentication flows Implementation Guide ​ 1 Basic Configuration Navigate to Admin console > Platform > Actions and create a new action from scratch. Basic Information Configuration Configure the following settings: Display name: Choose a descriptive name (e.g., \"Google Docs Updater\") Description: Explain the action's functionality Unique identifier: Set a unique ID (e.g., \"googleDocsUpdate\") Action type: Select \"Action\" since this will modify documents Trigger Condition Setup In the trigger condition, provide comprehensive guidance for when Glean Assistant should use this action. Include: Specific use cases that should trigger the action Examples of appropriate user queries Cases where the action should not be used 2 API Specification Development The first step involves creating a properly formatted OpenAPI specification that defines how Glean Assistant will interact with the Google Docs API. We'll use the following endpoint: POST https://docs.googleapis.com/v1/documents/{`{documentId}`}:batchUpdate While Google doesn't typically provide OpenAPI specs publicly, you can construct one using their documentation or reference third-party sources. Here's the complete OpenAPI specification: Click to expand the full OpenAPI specification openapi: 3.0.0\nservers:\n- url: 'https://docs.googleapis.com/'\ninfo:\ndescription: Writes Google Docs documents.\ntitle: Google Docs API\nversion: v1\npaths:\n'/v1/documents/{documentId}:batchUpdate':\n  post:\n    description: >-\n      Applies one or more updates to the document. Each request is validated\n      before being applied. If any request is not valid, then the entire\n      request will fail and nothing will be applied. The updates in your request\n      are guaranteed to be applied together atomically.\n    operationId: docs.documents.batchUpdate\n    parameters:\n      - description: >-\n          The ID of the document to update. Use glean search to find\n          the relevant document. The documentId usually exists in the\n          url of the doc. The syntax of URL (with documentId) is like:\n          https://docs.google.com/document/d/<documentId>/edit\n          Extract out the documentId from the URL.\n        in: path\n        name: documentId\n        required: true\n        schema:\n          type: string\n    requestBody:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              requests:\n                type: array\n                maxItems: 2\n                items:\n                  type: object\n                  properties:\n                    insertText:\n                      description: >-\n                        Inserts text at the specified location. Always use this\n                        operation except when text deletion or text replacement\n                        is required.\n                      type: object\n                      properties:\n                        location:\n                          type: object\n                          properties:\n                            index:\n                              description: >-\n                                The zero-based index, in UTF-16 code units.\n                                Strictly use a value of 1 and nothing else.\n                              format: int32\n                              type: integer\n                        text:\n                          description: >-\n                            The text to be inserted. This is the most important field\n                            for this text inserting operation. Insert a neatly\n                            formatted text consisting of multiple paragraphs. Whenever\n                            required, always start with a new line for paragraphs,\n                            tables, lists for neatness.\n                          type: string\n                    replaceAllText:\n                      description: >-\n                        Replaces all instances of the specified text.\n                        Always use this operation when text deletion\n                        or text replacement is required.\n                      type: object\n                      properties:\n                        containsText:\n                          type: object\n                          properties:\n                            matchCase:\n                              description: >-\n                                Indicates whether the search should respect\n                                case: - `True`: the search is case sensitive.\n                                - `False`: the search is case insensitive.\n                              type: boolean\n                              title: Do you want to match case\n                            text:\n                              description: The text to search for in the document.\n                              type: string\n                        replaceText:\n                          description: >-\n                            The text that will replace the\n                            matched text. Keep empty for deletion.\n                          type: string\n    responses:\n      '200':\n        description: Successful response Functionality Configuration Paste the OpenAPI specification you prepared above. Since we're using Google's API directly, leave the \"Use existing on-premise server\" option unchecked. 3 Authentication Setup The action requires OAuth 2.0 authentication to interact with Google Docs securely. Google Cloud Console Configuration Visit the Google Cloud Console Credentials page Create new OAuth 2.0 credentials: Select \"Web Application\" as the application type: Redirect URI Configuration Add the following redirect URI to your OAuth client configuration (Note your instance name is typically the email domain without the TLD): https:// {instance-name}-be.glean.com/tools/oauth/verify_code/{your-action-unique-identifier-name} The unique identifier in the redirect URI must match exactly with the identifier you set when creating the action, including case sensitivity. OAuth Settings in Glean Configure these OAuth settings in the Authentication section: Client URL: https://accounts.google.com/o/oauth2/auth?prompt=consent&access_type=offline\nAuthorization URL: https://accounts.google.com/o/oauth2/token\nScopes: https://www.googleapis.com/auth/documents Enable Google Docs API Navigate to the Google Cloud Console Enable the Google Docs API for your project: 4 Testing and Deployment After configuration, thoroughly test the action before deployment. Testing Process Click the testing URL provided after saving the action Issue test queries to verify proper triggering Use the \"Review and confirm\" interface: Verify document changes: Before changes: After changes: Deployment Configuration Deploy the action through the deploy tab: You can: Enable the action for all teammates Restrict access to specific teammates Configure deployment settings for Chat or AI Apps integration Best Practices ​ API Configuration Best Practices ​ When preparing your OpenAPI specification for Google Docs integration: Field Descriptions The quality of field descriptions significantly impacts Glean Assistant's ability to populate them correctly. Consider these guidelines: Make descriptions actionable and specific Include examples of valid values Explain the business context of each field Clarify relationships between fields Schema Structure Your schema structure affects how Glean Assistant interprets the API: Keep the schema as flat as possible Use meaningful field names that reflect their purpose Leverage built-in formats (like date-time ) where applicable Include proper type constraints and validations Authentication Considerations ​ OAuth Configuration Important considerations for OAuth setup: Always use access_type=offline to enable refresh tokens Include appropriate error handling for token expiration Consider implementing token rotation for security Monitor token usage and implement proper logging Performance Optimization ​ User Experience Optimize the action for user interaction: Provide clear feedback when the action is processing Include meaningful error messages Allow users to preview changes before applying them Maintain consistent behavior across different document types Efficient Operations Ensure efficient operation: Batch related operations when possible Implement appropriate timeouts Cache frequently used document metadata Monitor action execution times Error Handling ​ When working with the Google Docs API: Document Operations Choose the right operation type for your use case: Use insertText for adding new content without affecting existing text Use replaceAllText when you need to modify existing content Consider using index: 1 for insertions to maintain consistent behavior Handle formatting through plain text markers (like asterisks for bullets) Common Issues Common issues to watch for: Document permissions mismatches Rate limiting constraints Invalid document IDs Concurrent modification conflicts Common Pitfalls to Avoid ​ warning Watch out for these common implementation mistakes: Document ID Handling Not properly extracting IDs from URLs Failing to validate ID format Not handling shared drive documents correctly Permission Issues Insufficient OAuth scopes Missing document-level permissions Incorrect service account configuration Content Formatting",
      "topics": [
        "actions",
        "integration",
        "authentication"
      ],
      "description": "This page provides a comprehensive guide to creating an execution action that allows Glean Assistant to update Google Docs by configuring an OpenAPI specification, setting up OAuth 2.0 authentication, and deploying the action within an organization. The main focus is on integrating external services (Google Docs) with Glean through custom actions that perform real-time document modifications."
    },
    "https://developers.glean.com/guides/actions/examples/google-calendar-events": {
      "content": "Guides Actions Examples Google Calendar Events On this page Google Calendar Events Retrieval Action Overview ​ This guide walks through creating a retrieval action that allows Glean Assistant to access and display Google Calendar events. This integration enables users to query their calendar events directly through Glean's interface with proper OAuth authentication and secure API access. This is a retrieval action that fetches calendar data from Google Calendar API with OAuth User authentication. Prerequisites ​ Before beginning this implementation, ensure you have: Administrator access to your Glean instance Access to Google Cloud Console with appropriate permissions Understanding of OAuth 2.0 authentication flows Implementation Guide ​ 1 Creating the Base Action Begin by navigating to Admin console > Platform > Actions and selecting \"New Action\". info Choose \"start from scratch\" since the Google Calendar action isn't available in the templates. Basic Information Configuration ​ Configure these essential details: Display Name : Choose a clear, descriptive name (e.g., \"Calendar Events Retrieval\") Description : Explain the action's purpose and capabilities Unique Identifier : Set a unique ID (e.g., \"retrieveCalendarEvents\") Action Type : Select \"Retrieval\" since this action reads calendar data Trigger Condition Setup ​ Your trigger condition should clearly specify: When Glean Assistant should use this action Expected user query patterns Scenarios where the action shouldn't be used 2 Configuring the API Specification Add this OpenAPI specification to define how Glean Assistant interacts with the Google Calendar API: Click to expand the complete OpenAPI specification openapi : 3.0.1 servers : - url : 'https://www.googleapis.com/calendar/v3/' info : title : Google Calendar Events API description : This API returns events on the primary calendar of the currently logged - in user. version : 1.0.0 paths : /calendars/primary/events : get : summary : List Events description : Retrieves events from the primary calendar. parameters : - name : timeMin in : query description : | Lower bound (exclusive) for an event's start time to filter by. Must be an RFC3339 timestamp with a mandatory time zone offset. Its very important to have timestamp in Z format Example: 2011-06-03T10:00:00Z required : false schema : type : string format : date - time - name : timeMax in : query description : | Upper bound (exclusive) for an event's start time to filter by. Must be an RFC3339 timestamp with a mandatory time zone offset. Its very important to have timestamp in Z format Example: 2011-06-03T10:00:00Z required : false schema : type : string format : date - time - name : q in : query description : Free text search terms to find events that match these terms in various fields such as summary , description , location , etc. required : false schema : type : string responses : '200' : description : A list of events. content : application/json : schema : type : object properties : items : type : array items : type : object properties : id : type : string description : Identifier of the event. status : type : string description : Status of the event (confirmed , tentative , cancelled). summary : type : string description : Title of the event. description : type : string description : Description of the event. start : type : object properties : dateTime : type : string format : date - time description : The start time of the event. end : type : object properties : dateTime : type : string format : date - time description : The end time of the event. warning Leave the \"Use existing on-premise server\" option unchecked since we're accessing Google's API directly. 3 Setting Up OAuth Authentication This action requires OAuth User authentication to access individual users' calendar data. Google Cloud Console Setup ​ Access the Google Cloud Console Credentials page Create OAuth credentials: Configure as a web application: Redirect URI Configuration ​ Add this URI to your OAuth client (Note your instance name is typically the email domain without the TLD): https://{instance-name}-be.glean.com/tools/oauth/verify_code/{your-action-unique-identifier-name} OAuth Settings in Glean ​ Configure these parameters in Glean: Client URL: https://accounts.google.com/o/oauth2/auth?prompt=consent&access_type=offline Authorization URL: https://accounts.google.com/o/oauth2/token Scopes: https://www.googleapis.com/auth/calendar.readonly Enable Google Calendar API ​ Access your Google Cloud Console Enable the Calendar API: 4 Testing and Deployment Test the action thoroughly before deployment. Initial Testing ​ Use the provided testing URL You'll see the connection banner: Authenticate with Google Verify event retrieval: Deployment ​ Configure deployment settings: Set appropriate access controls: Enable for all teammates or Restrict to specific team members Best Practices ​ API Specification Design ​ Parameter Configuration When configuring the Calendar API parameters: Use RFC3339 format for all date-time fields Include timezone offsets in timestamp examples Provide clear descriptions for search parameters Consider default values for time ranges Response Handling Important considerations for handling calendar data: Process multiple calendar event types (recurring, all-day, etc.) Handle timezone conversions appropriately Consider pagination for large result sets Process cancelled or declined events properly Authentication Implementation ​ OAuth Setup Critical OAuth implementation details: Always use access_type=offline for refresh token support Request minimal scopes (readonly for calendar access) Handle token refresh scenarios gracefully Implement proper token storage and security Performance Optimization ​ Query Optimization Optimize calendar queries by: Using appropriate time ranges Implementing result caching Limiting returned fields Managing API quota usage Error Handling Implement robust error handling: Handle quota limit scenarios Manage token expiration gracefully Provide meaningful error messages Implement retry logic for transient failures Common Implementation Challenges ​ warning Watch out for these common issues: Time Zone Handling Inconsistent timezone formatting Missing timezone offsets Incorrect local time conversions Calendar Access Primary vs. secondary calendar confusion Shared calendar permissions Resource calendar access Event Filtering Inefficient time range queries Missing recurring event instances Incomplete search term matching OAuth Configuration Incorrect redirect URIs Missing required scopes Token refresh failures Security Considerations ​ Security Best Practices Important security measures for calendar integration: Scope Minimization : Request only necessary permissions (readonly for retrieval) Token Security : Implement secure token storage and transmission Access Logging : Log access patterns for security monitoring Data Privacy : Ensure calendar data is handled according to privacy policies Troubleshooting ​ If you encounter issues: Verify OAuth Configuration Check credential settings in Google Cloud Console Confirm correct scopes are requested Validate redirect URIs match exactly Check API Access Confirm Calendar API is enabled in Google Cloud Console Verify quota availability and limits Check user permissions for calendar access Debug Authentication Flow Test the OAuth flow manually Check for proper token generation and refresh Validate scope permissions Review Implementation Validate timestamp formats in API calls Check parameter formatting and encoding Verify error handling logic Next Steps ​ After successful implementation: Documentation : Create user guides for calendar integration features Monitoring : Set up dashboards for tracking usage and performance Support : Establish procedures for handling user issues Enhancement : Plan feature expansions based on user feedback Reviews : Schedule regular system and security reviews Edit this page Previous Jira Issue Creation Redirect Next Google Docs Update Overview Prerequisites Implementation Guide Best Practices API Specification Design Authentication Implementation Performance Optimization Common Implementation Challenges Security Considerations Troubleshooting Next Steps",
      "topics": [
        "actions",
        "authentication",
        "integration"
      ],
      "description": "This page provides a step-by-step guide for creating a retrieval action that integrates Google Calendar with Glean Assistant, allowing users to query their calendar events securely via OAuth authentication and the Google Calendar API. The main focus is on building, configuring, and deploying the integration with best practices for security, performance, and error handling."
    },
    "https://developers.glean.com/guides/actions/examples/jira-issue-creation-redirect": {
      "content": "Guides Actions Examples Jira Issue Creation Redirect On this page Jira Issue Creation Using Redirect Action Overview ​ This guide explains how to implement a redirect action that allows users to create Jira issues through Glean Assistant. Unlike execution actions that create issues programmatically, this approach directs users to Jira's native interface with relevant information already filled in. This implementation maintains the familiar Jira environment while streamlining the issue creation process. This is a redirect action that directs users to Jira's issue creation interface with pre-populated fields. Prerequisites ​ Before proceeding, ensure you have: Administrator access to your Jira and Glean instances Understanding of Jira's URL parameter structure Access to Jira project and component IDs Familiarity with redirect action concepts Implementation Guide ​ 1 API Specification Development The OpenAPI specification serves as the blueprint for how Glean Assistant interacts with your redirect action. This specification must clearly define all parameters and their behaviors to ensure accurate field population. Click to expand the complete OpenAPI specification openapi : '3.0.0' info : title : 'Jira Create Ticket' version : '1.0.0' servers : - url : 'https://{YOUR-ATLASSIAN-DOMAIN}.atlassian.net/secure/CreateIssueDetails!init.jspa?' paths : / : post : summary : 'Creates an issue or a sub-task from a JSON representation' description : | This API allows you to create a ticket or an issue in Jira. parameters : - name : 'pid' in : 'query' required : true schema : type : 'string' x-glean-typehint : 'JiraProjectID' default : '10000' description : 'Project ID where the ticket is created. 10000 refers to Engineering project.' - name : 'issuetype' in : 'query' required : true schema : type : 'integer' enum : - 10002 - 10004 description : 'Issue type. 10002 refers to Task, 10004 refers to Bug.' - name : 'priority' in : 'query' schema : type : 'integer' minimum : 1 maximum : 5 description : 'Numeric priority. 1 (highest) to 5 (lowest).' - name : 'summary' in : 'query' required : true schema : type : 'string' x-glean-typehint : 'Content' description : 'Title of the issue.' - name : 'components' in : 'query' schema : type : 'string' x-glean-typehint : 'JiraComponent' description : 'Component name where the ticket should be filed.' - name : 'description' in : 'query' schema : type : 'string' x-glean-typehint : 'Content' description : 'Body of the issue.' - name : 'assignee' in : 'query' schema : type : 'string' x-glean-typehint : 'JiraId' description : 'User to which the issue is assigned.' responses : '200' : description : 'OK' content : application/json : schema : type : 'string' 2 Parameter Configuration Strategy The specification includes carefully designed parameters that guide Glean Assistant in populating the Jira issue creation form. Each parameter serves a specific purpose and includes clear instructions for value generation. Project Identification The project ID parameter ( pid ) requires specific attention as it determines where issues are created. The specification includes a default value and clear description to ensure proper project targeting. For example, setting \"10000\" as the Engineering project helps maintain consistent issue organization. Issue Type Classification The issue type parameter uses enumerated values to ensure accurate categorization. The specification maps numeric values to specific issue types, such as 10002 for Tasks and 10004 for Bugs. This mapping ensures that issues are properly classified within your Jira instance. Priority Assignment The priority parameter implements a numeric scale from 1 to 5, with built-in validation to prevent invalid values. This structured approach maintains consistency with Jira's priority system while allowing for flexible assignment based on issue urgency. Content Generation Content-related parameters like summary and description use the x-glean-typehint: \"Content\" directive to guide Glean Assistant in generating appropriate text. This hint ensures that generated content matches the expected format and style for Jira issues. 3 Testing and Deployment After configuration, thoroughly test the redirect action before deployment. Testing Process Test the action with various user queries to verify proper parameter population Verify that URLs are constructed correctly with all required parameters Check that redirects function properly and reach the correct Jira interface Validate that field values are correctly populated in Jira's form Test with different project types, issue types, and user scenarios Deployment Configuration Once testing is complete, deploy the action to your organization with appropriate access controls. Best Practices ​ Parameter Value Management ​ Value Management Strategy The specification implements various methods for managing parameter values effectively: Default Values : Provide sensible defaults where appropriate to streamline the creation process Value Constraints : Use enumerated values and ranges to ensure valid input Type Hints : Leverage Glean-specific type hints to guide content generation Required Fields : Mark essential parameters as required to ensure complete issue creation URL Construction ​ URL Building Process The redirect action builds URLs that properly integrate with Jira's interface: Proper parameter encoding to handle special characters and spaces Correct ordering of query parameters for optimal compatibility Implementation of appropriate parameter separators and delimiters Validation of URL length to prevent truncation issues Error Prevention The implementation includes several measures to prevent common issues: Parameter validation before URL construction Proper encoding of special characters Length validation for generated content Type checking for numeric values Performance Optimization ​ URL Construction Efficiency To ensure optimal performance and user experience: Minimize parameter count to reduce URL length Implement efficient parameter value generation Consider caching frequently used project and component mappings Add client-side validation to prevent invalid redirects Response Time Management Optimize redirect timing and reliability: Monitor redirect success rates and identify common failure patterns Implement fallback mechanisms for parameter population failures Track redirect timing metrics Optimize parameter generation processes Security Considerations ​ Security Best Practices Important security considerations for redirect actions: URL Validation : Ensure generated URLs point only to authorized Jira instances Parameter Sanitization : Sanitize all parameter values to prevent injection attacks Access Control : Verify users have appropriate permissions for target projects Audit Logging : Implement logging for action usage and parameter values Common Pitfalls to Avoid ​ warning Common implementation challenges and solutions: Parameter Encoding Issues Ensure special characters are properly URL-encoded Test with various content types including non-ASCII characters Verify encoding compatibility with Jira's interface Field Mapping Problems Confirm project IDs and issue type IDs match your Jira configuration Validate component names and assignee IDs Test with different user permission levels URL Length Limitations Monitor generated URL lengths to prevent truncation Implement content trimming for long descriptions Consider parameter prioritization for essential fields Troubleshooting ​ If you encounter issues during setup or execution: Verify Parameter Configuration Check that all required parameters are properly defined Validate parameter types and constraints Ensure type hints are correctly applied Test URL Generation Verify that URLs are constructed correctly Check parameter encoding and formatting Test with various input scenarios Debug Jira Integration Confirm that generated URLs work directly in browsers Validate that field mapping matches Jira's expectations Test with different Jira projects and configurations Next Steps ​ To ensure ongoing success with your implementation: Documentation : Develop comprehensive user documentation Monitoring : Establish regular monitoring procedures Feedback : Create a feedback collection system Reviews : Plan for periodic review and updates Enhancements : Consider potential feature enhancements This implementation provides a solid foundation for streamlined issue creation while maintaining the flexibility and familiarity of the Jira interface. Regular monitoring and maintenance will ensure continued effectiveness and user satisfaction. Edit this page Previous Jira Issue Creation Next Google Calendar Events Overview Prerequisites Implementation Guide Best Practices Parameter Value Management URL Construction Performance Optimization Security Considerations Common Pitfalls to Avoid Troubleshooting Next Steps",
      "topics": [
        "actions",
        "integration",
        "automation"
      ],
      "description": "This page provides a guide on implementing a redirect action that enables users to create Jira issues through Glean Assistant by redirecting them to Jira's native interface with pre-filled fields. It covers configuration, best practices, testing, and security considerations for integrating Glean with Jira using redirect actions."
    }
  },
  "visited_urls": [
    "https://developers.glean.com/",
    "https://developers.glean.com/api-info/indexing/debugging/datasource-config",
    "https://developers.glean.com/oas/client",
    "https://developers.glean.com/api/client-api/verification/overview",
    "https://developers.glean.com/libraries/web-sdk/overview",
    "https://developers.glean.com/api/client-api/messages/overview",
    "https://developers.glean.com/api/client-api/authentication/overview",
    "https://developers.glean.com/api/indexing-api/permissions-overview",
    "https://developers.glean.com/get-started/rate-limits",
    "https://developers.glean.com/api/indexing-api/documents-overview",
    "https://developers.glean.com/api/indexing-api/shortcuts-overview",
    "https://developers.glean.com/api/indexing-api/troubleshooting-overview",
    "https://developers.glean.com/api/indexing-api/people-overview",
    "https://developers.glean.com/api-info/client/authentication/overview",
    "https://developers.glean.com/api/client-api/entities/overview",
    "https://developers.glean.com/api/client-api/insights/overview",
    "https://developers.glean.com/api-info/indexing/authentication/overview",
    "https://developers.glean.com/api/client-api/summarize/overview",
    "https://developers.glean.com/guides/chat/overview",
    "https://developers.glean.com/api/client-api/collections/overview",
    "https://developers.glean.com/api/indexing-api/datasources-overview",
    "https://developers.glean.com/api/client-api/chat/overview",
    "https://developers.glean.com/guides/agents/overview",
    "https://developers.glean.com/api/client-api/tools/overview",
    "https://developers.glean.com/api/indexing-api/authentication-overview",
    "https://developers.glean.com/api/client-api/announcements/overview",
    "https://developers.glean.com/api-info/indexing/documents/activity",
    "https://developers.glean.com/guides/search/overview",
    "https://docs.glean.com/",
    "https://developers.glean.com/api/client-api/pins/overview",
    "https://developers.glean.com/api-info/indexing/getting-started/overview",
    "https://developers.glean.com/api/client-api/governance/overview",
    "https://developers.glean.com/oas/indexing",
    "https://developers.glean.com/guides/mcp",
    "https://developers.glean.com/api/client-api/documents/overview",
    "https://developers.glean.com/get-started/authentication",
    "https://developers.glean.com/api/client-api/shortcuts/overview",
    "https://developers.glean.com/api/client-api/agents/overview",
    "https://developers.glean.com/api/client-api/answers/overview",
    "https://developers.glean.com/changelog",
    "https://developers.glean.com/api/client-api/search/overview",
    "https://developers.glean.com/api/client-api/activity/overview",
    "https://developers.glean.com/guides/actions/overview",
    "https://developers.glean.com/get-started/key-terms",
    "https://developers.glean.com/libraries/api-clients",
    "https://developers.glean.com/api-info/client/getting-started/overview",
    "https://developers.glean.com/api-info/indexing/datasource/custom-properties",
    "https://developers.glean.com/api-info/indexing/debugging/datasource-status",
    "https://developers.glean.com/api-info/indexing/debugging/document-count",
    "https://developers.glean.com/api-info/indexing/debugging/datasource-user",
    "https://developers.glean.com/api-info/indexing/datasource/rendering-search-results",
    "https://developers.glean.com/api-info/indexing/debugging/document-access",
    "https://developers.glean.com/api-info/indexing/debugging/datasource-document",
    "https://developers.glean.com/api/client-api/verification/verify",
    "https://developers.glean.com/api/client-api/tools/execute-the-specified-tool",
    "https://developers.glean.com/api/client-api/verification/listverifications",
    "https://developers.glean.com/api/client-api/verification/addverificationreminder",
    "https://developers.glean.com/libraries/web-sdk/components/modal-search",
    "https://developers.glean.com/libraries/web-sdk/components/autocomplete",
    "https://developers.glean.com/libraries/web-sdk/guides/react",
    "https://developers.glean.com/libraries/web-sdk/3rd-party-cookies",
    "https://developers.glean.com/libraries/web-sdk/authentication",
    "https://developers.glean.com/libraries/web-sdk/components/sidebar",
    "https://developers.glean.com/libraries/web-sdk/components/chat",
    "https://developers.glean.com/libraries/web-sdk/components/recommendations",
    "https://developers.glean.com/api/client-api/messages/messages",
    "https://developers.glean.com/api/client-api/insights/insights",
    "https://developers.glean.com/api/client-api/answers/listanswers",
    "https://developers.glean.com/api/client-api/authentication/createauthtoken",
    "https://developers.glean.com/api/indexing-api/index-user",
    "https://developers.glean.com/api/indexing-api/bulk-index-teams",
    "https://developers.glean.com/api/indexing-api/delete-membership",
    "https://developers.glean.com/api/indexing-api/index-group",
    "https://developers.glean.com/api/indexing-api/bulk-index-memberships-for-a-group",
    "https://developers.glean.com/api/indexing-api/bulk-index-users",
    "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-group-memberships",
    "https://developers.glean.com/api/indexing-api/delete-user",
    "https://developers.glean.com/api/indexing-api/bulk-index-groups",
    "https://developers.glean.com/api/indexing-api/index-membership",
    "https://developers.glean.com/api/indexing-api/beta-users",
    "https://developers.glean.com/api/indexing-api/delete-group",
    "https://developers.glean.com/api-info/client/authentication/glean-issued",
    "https://developers.glean.com/api/indexing-api/index-document",
    "https://developers.glean.com/api/indexing-api/get-datasource-config",
    "https://developers.glean.com/api/indexing-api/update-document-permissions",
    "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-uploaded-documents",
    "https://developers.glean.com/api/indexing-api/delete-document",
    "https://developers.glean.com/api/indexing-api/index-documents",
    "https://developers.glean.com/api/indexing-api/bulk-index-documents",
    "https://developers.glean.com/api/indexing-api/upload-shortcuts",
    "https://developers.glean.com/api/indexing-api/bulk-index-external-shortcuts",
    "https://developers.glean.com/api/indexing-api/get-user-count",
    "https://developers.glean.com/api/indexing-api/check-document-access",
    "https://developers.glean.com/api/indexing-api/beta-get-user-information",
    "https://developers.glean.com/api/indexing-api/get-document-count",
    "https://developers.glean.com/api/indexing-api/beta-get-information-of-a-batch-of-documents",
    "https://developers.glean.com/api/indexing-api/beta-get-document-information",
    "https://developers.glean.com/api/indexing-api/get-document-upload-and-indexing-status",
    "https://developers.glean.com/api/indexing-api/beta-get-datasource-status",
    "https://developers.glean.com/api/indexing-api/index-employee",
    "https://developers.glean.com/api/indexing-api/index-team",
    "https://developers.glean.com/api/indexing-api/delete-employee",
    "https://developers.glean.com/api/indexing-api/schedules-the-processing-of-uploaded-employees-and-teams",
    "https://developers.glean.com/api/indexing-api/bulk-index-employees",
    "https://developers.glean.com/api/indexing-api/delete-team",
    "https://developers.glean.com/api-info/client/getting-started/basic-usage",
    "https://developers.glean.com/guides/search/filtering-results",
    "https://developers.glean.com/api-info/client/authentication/oauth",
    "https://developers.glean.com/api/client-api/entities/people",
    "https://developers.glean.com/api/client-api/collections/deletecollectionitem",
    "https://developers.glean.com/api/client-api/entities/listentities",
    "https://developers.glean.com/api/client-api/governance/setdocvisibility",
    "https://developers.glean.com/api-info/indexing/getting-started/setup-datasource",
    "https://developers.glean.com/api-info/indexing/authentication/token-rotation",
    "https://developers.glean.com/api-info/indexing/getting-started/index-documents",
    "https://developers.glean.com/api/client-api/shortcuts/updateshortcut",
    "https://developers.glean.com/api/client-api/summarize/summarize",
    "https://developers.glean.com/guides/chat/chatbot-example",
    "https://developers.glean.com/api/client-api/collections/addcollectionitems",
    "https://developers.glean.com/api/client-api/collections/createcollection",
    "https://developers.glean.com/api/client-api/collections/getcollection",
    "https://developers.glean.com/api/client-api/collections/listcollections",
    "https://developers.glean.com/api/client-api/collections/editcollectionitem",
    "https://developers.glean.com/api/client-api/collections/deletecollection",
    "https://developers.glean.com/api/client-api/documents/getdocumentsbyfacets",
    "https://developers.glean.com/api/client-api/collections/editcollection",
    "https://developers.glean.com/api/indexing-api/rotate-token",
    "https://developers.glean.com/api/indexing-api/add-or-update-datasource",
    "https://developers.glean.com/api/client-api/chat/listchats",
    "https://developers.glean.com/api/client-api/chat/getchat",
    "https://developers.glean.com/api/client-api/chat/chat",
    "https://developers.glean.com/api/client-api/chat/getchatapplication",
    "https://developers.glean.com/api/client-api/chat/uploadchatfiles",
    "https://developers.glean.com/api/client-api/chat/chat-stream",
    "https://developers.glean.com/api/client-api/chat/deletechatfiles",
    "https://developers.glean.com/api/client-api/chat/getchatfiles",
    "https://developers.glean.com/api/client-api/chat/deleteallchats",
    "https://developers.glean.com/api/client-api/chat/deletechats",
    "https://developers.glean.com/guides/agents/langchain",
    "https://docs.glean.com/agents/home",
    "https://developers.glean.com/guides/agents/direct-api",
    "https://developers.glean.com/guides/agents/toolkit",
    "https://developers.glean.com/guides/agents/nvidia-example",
    "https://developers.glean.com/guides/search/llm-content",
    "https://developers.glean.com/api/client-api/tools/list-available-tools",
    "https://developers.glean.com/api-info/indexing/documents/supported-mimetypes",
    "https://developers.glean.com/api/client-api/announcements/updateannouncement",
    "https://developers.glean.com/api/client-api/announcements/createannouncement",
    "https://developers.glean.com/api/client-api/agents/create-and-wait-run",
    "https://developers.glean.com/api/client-api/announcements/deleteannouncement",
    "https://developers.glean.com/api/client-api/activity/activity",
    "https://developers.glean.com/api-info/indexing/documents/bulk-upload-model",
    "https://developers.glean.com/api-info/indexing/documents/permissions",
    "https://developers.glean.com/api-info/indexing/documents/document-model",
    "https://developers.glean.com/api-info/indexing/documents/bulk-indexing",
    "https://developers.glean.com/guides/search/faceted-filters",
    "https://developers.glean.com/guides/search/datasource-filters",
    "https://docs.glean.com/security",
    "https://docs.glean.com/protect/ai-security/home",
    "https://docs.glean.com/connectors/home",
    "https://docs.glean.com/connectors/about",
    "https://docs.glean.com/troubleshooting/home",
    "https://docs.glean.com/user-guide/basics/how-to-search-in-glean",
    "https://docs.glean.com/home",
    "https://docs.glean.com/archive/help-glean/getting-started-in-glean/what-is-glean",
    "https://docs.glean.com/release-notes/home",
    "https://docs.glean.com/user-guide/assistant/glean-chat",
    "https://docs.glean.com/administration/about",
    "https://docs.glean.com/security/home",
    "https://docs.glean.com/get-started/welcome",
    "https://docs.glean.com/user-guide/about/what-is-glean",
    "https://docs.glean.com/user-guide/apps/installing-the-browser-extension",
    "https://developers.glean.com/api/client-api/pins/listpins",
    "https://developers.glean.com/api/client-api/pins/editpin",
    "https://developers.glean.com/api/client-api/pins/unpin",
    "https://developers.glean.com/api/client-api/pins/pin",
    "https://developers.glean.com/api/client-api/pins/getpin",
    "https://developers.glean.com/api/client-api/governance/downloadpolicycsv",
    "https://developers.glean.com/api/client-api/governance/getpolicy",
    "https://developers.glean.com/api/client-api/governance/createreport",
    "https://developers.glean.com/api/client-api/governance/listpolicies",
    "https://developers.glean.com/api/client-api/governance/getdocvisibility",
    "https://developers.glean.com/api/client-api/governance/updatepolicy",
    "https://developers.glean.com/api/client-api/governance/getreportstatus",
    "https://developers.glean.com/api/client-api/governance/createpolicy",
    "https://developers.glean.com/api/client-api/governance/downloadreportcsv",
    "https://developers.glean.com/guides/actions/faq",
    "https://docs.glean.com/administration/platform/mcp/connecting-to-glean-mcp-server",
    "https://developers.glean.com/api/client-api/documents/getdocuments",
    "https://developers.glean.com/api/client-api/documents/getdocpermissions",
    "https://developers.glean.com/api/client-api/shortcuts/getshortcut",
    "https://developers.glean.com/api/client-api/shortcuts/deleteshortcut",
    "https://developers.glean.com/api/client-api/shortcuts/listshortcuts",
    "https://developers.glean.com/api/client-api/shortcuts/createshortcut",
    "https://developers.glean.com/api/client-api/search/search",
    "https://developers.glean.com/api/client-api/activity/feedback",
    "https://developers.glean.com/api/client-api/agents/get-agent-schemas",
    "https://developers.glean.com/api/client-api/agents/get-agent",
    "https://developers.glean.com/api/client-api/agents/search-agents",
    "https://developers.glean.com/api/client-api/agents/create-and-stream-run",
    "https://developers.glean.com/api/client-api/answers/getanswer",
    "https://developers.glean.com/api/client-api/answers/createanswer",
    "https://developers.glean.com/api/client-api/answers/deleteanswer",
    "https://developers.glean.com/api/client-api/answers/editanswer",
    "https://developers.glean.com/changelog.xml",
    "https://developers.glean.com/api/client-api/search/autocomplete",
    "https://developers.glean.com/api/client-api/search/adminsearch",
    "https://developers.glean.com/api/client-api/search/feed",
    "https://developers.glean.com/api/client-api/search/recommendations",
    "https://developers.glean.com/guides/actions/create-actions",
    "https://developers.glean.com/guides/actions/examples/jira-issue-creation",
    "https://developers.glean.com/guides/actions/authentication",
    "https://developers.glean.com/libraries/api-clients/typescript",
    "https://developers.glean.com/libraries/api-clients/go",
    "https://developers.glean.com/libraries/web-sdk/guides/brightspot",
    "https://developers.glean.com/libraries/api-clients/python",
    "https://developers.glean.com/libraries/api-clients/java",
    "https://developers.glean.com/api-info/indexing/datasource/test-datasource",
    "https://developers.glean.com/api-info/indexing/datasource/category",
    "https://developers.glean.com/libraries/web-sdk/guides/lumapps",
    "https://developers.glean.com/libraries/web-sdk/guides/zendesk",
    "https://developers.glean.com/web",
    "https://developers.glean.com/indexing/documents/bulk-upload-model",
    "https://developers.glean.com/indexing/documents/bulk-indexing/choosing-indexdocuments-vs-bulkindexdocuments",
    "https://developers.glean.com/indexing/debugging/datasource-status",
    "https://developers.glean.com/indexing/debugging/datasource-config",
    "https://developers.glean.com/indexing/debugging/datasource-document",
    "https://developers.glean.com/indexing/authentication/token-rotation",
    "https://docs.glean.com/agents/respond-to-slack-workflow-messages",
    "https://docs.glean.com/agents/create-powerful-agent",
    "https://docs.glean.com/agents/introduction",
    "https://docs.glean.com/administration/managing-agents/set-up-llms",
    "https://docs.glean.com/administration/managing-agents/agent-access",
    "https://docs.glean.com/administration/assistant/actions/redirect-actions",
    "https://docs.glean.com/administration/managing-agents/migrating-prompts-apps",
    "https://docs.glean.com/agents/create-first-agent",
    "https://docs.glean.com/agents/slack-automatic-responses",
    "https://docs.glean.com/agents/concepts/agent-library",
    "https://docs.glean.com/agents/actions/glean/calendar-search",
    "https://docs.glean.com/agents/how-agents-work",
    "https://developers.glean.com/agents/agents-api",
    "https://docs.glean.com/security/architecture/shared-responsibility",
    "https://docs.glean.com/security/architecture/shared-centralized-services",
    "mailto:security@glean.com",
    "https://docs.glean.com/security/knowledge-graph",
    "https://docs.glean.com/security/architecture/sdlc",
    "https://docs.glean.com/security/architecture/data-flow",
    "https://docs.glean.com/security/networking/glean-ip-ranges",
    "https://docs.glean.com/security/cloud-prem/home",
    "https://docs.glean.com/protect/ai-security/investigating-violations",
    "https://docs.glean.com/protect/ai-security/findings-dashboard",
    "https://docs.glean.com/protect/ai-security/introduction",
    "https://docs.glean.com/protect/ai-security/configuring-policies",
    "https://docs.glean.com/protect/ai-security/configuring-panw",
    "https://docs.glean.com/connectors/native/airtable/home",
    "https://docs.glean.com/connectors/native/tableau/home",
    "https://docs.glean.com/connectors/native/zoom/home",
    "https://docs.glean.com/connectors/crawling-faq",
    "https://docs.glean.com/connectors/native/coda/home",
    "https://docs.glean.com/connectors/native/confluence-onprem/home",
    "https://docs.glean.com/connectors/crawling-frequency",
    "https://docs.glean.com/connectors/native/gitlab/home",
    "https://docs.glean.com/connectors/native/gmail/home",
    "https://docs.glean.com/connectors/native/gitlab-onprem/home",
    "https://docs.glean.com/connectors/native/gdrive/home",
    "https://docs.glean.com/connectors/native/servicenow/home",
    "https://docs.glean.com/connectors/native/jira-onprem/home",
    "https://docs.glean.com/connectors/native/monday/home",
    "https://docs.glean.com/connectors/excluding-content",
    "https://docs.glean.com/connectors/native/jira/home",
    "https://docs.glean.com/connectors/native/confluence/home",
    "https://docs.glean.com/connectors/native/stackoverflow/home",
    "https://docs.glean.com/connectors/native/salesforce/home",
    "https://docs.glean.com/connectors/crawler-and-indexing-limits",
    "https://docs.glean.com/connectors/native/asana/home",
    "https://docs.glean.com/connectors/native/box/home",
    "https://docs.glean.com/connectors/native/zendesk/home",
    "https://docs.glean.com/connectors/native/workday/home",
    "https://docs.glean.com/connectors/native/hubspot/home",
    "https://docs.glean.com/connectors/native/sharepoint/home",
    "https://docs.glean.com/connectors/native/github-enterprise/home",
    "https://docs.glean.com/connectors/monitoring",
    "https://docs.glean.com/connectors/custom/about",
    "https://docs.glean.com/connectors/native/15five/home",
    "https://docs.glean.com/connectors/native/github/home",
    "https://docs.glean.com/connectors/native/gcal/home",
    "https://docs.glean.com/connectors/native/databricks/home",
    "https://docs.glean.com/connectors/native/notion/home",
    "https://docs.glean.com/connectors/native/slack/home",
    "https://docs.glean.com/troubleshooting/clear-browser-cache",
    "https://docs.glean.com/troubleshooting/error-codes",
    "https://docs.glean.com/troubleshooting/chrome-trace",
    "https://docs.glean.com/troubleshooting/requesting-access",
    "https://docs.glean.com/troubleshooting/raise-ticket",
    "https://docs.glean.com/user-guide/basics/search-from-wherever-you-work",
    "https://docs.glean.com/user-guide/basics/improve-search-quality-by-giving-feedback-on-results",
    "https://docs.glean.com/user-guide/apps/why-does-the-chrome-extension-ask-for-those-permissions",
    "https://docs.glean.com/user-guide/apps/extension-sidebar",
    "https://docs.glean.com/user-guide/apps/glean-companion",
    "https://docs.glean.com/user-guide/basics/a-beginner-s-guide-to-chat",
    "https://docs.glean.com/user-guide/assistant/best-practices",
    "https://docs.glean.com/user-guide/advanced/searching-from-address-bar",
    "https://docs.glean.com/user-guide/search/browser-history-apps",
    "https://docs.glean.com/user-guide/about/accessibility",
    "https://docs.glean.com/user-guide/about/glean-for-engineering",
    "https://docs.glean.com/user-guide/basics/faq",
    "https://docs.glean.com/user-guide/about/glean-for-support",
    "https://docs.glean.com/user-guide/apps/get-the-desktop-app",
    "https://docs.glean.com/user-guide/assistant/ai-answers",
    "https://docs.glean.com/user-guide/about/end-user-quick-start-guide",
    "https://docs.glean.com/user-guide/assistant/code-generation",
    "https://docs.glean.com/user-guide/advanced/configuring-dark-mode",
    "https://docs.glean.com/user-guide/assistant/how-glean-accesses-info",
    "https://docs.glean.com/user-guide/advanced/keyboard-shortcuts",
    "https://docs.glean.com/user-guide/basics/customizing-your-glean-profile",
    "https://docs.glean.com/user-guide/about/glean-for-sales",
    "https://docs.glean.com/user-guide/advanced/customizing-home-page",
    "https://docs.glean.com/user-guide/apps/glean-extension-via-company-push",
    "https://docs.glean.com/user-guide/about/first-day-faqs",
    "https://docs.glean.com/archive/help-glean/getting-started-in-glean/first-day-faqs",
    "https://docs.glean.com/archive/help-glean/getting-started-in-glean/glean-cloud-prem-self-hosted-gcp-preparation-guide",
    "https://docs.glean.com/archive/help-glean/getting-started-in-glean/end-user-quick-start-guide",
    "https://docs.glean.com/archive/help-glean/getting-started-in-glean/aws-setup-deployment-of-glean",
    "https://docs.glean.com/archive/help-glean/getting-started-in-glean/glean-deployment-options",
    "https://docs.glean.com/agents/concepts/agent-builder",
    "https://docs.glean.com/agents/insights",
    "https://docs.glean.com/agents/create-agents/debug-agent",
    "https://docs.glean.com/administration/assistant/features/agentic-reasoning",
    "https://docs.glean.com/administration/search/about",
    "https://docs.glean.com/administration/search/hiding-content",
    "https://docs.glean.com/administration/assistant/actions/salesforce-actions-setup",
    "http://docs.glean.com/administration/managing-agents/migrating-prompts-apps",
    "https://docs.glean.com/administration/assistant/data-analysis/about-data-analysis",
    "https://docs.glean.com/agents/actions/glean/read/user-activities",
    "https://docs.glean.com/administration/platform/embedded-integrations/home",
    "https://docs.glean.com/agents/actions/datasource/salesforce",
    "https://docs.glean.com/administration/management/customization/home-page",
    "https://docs.glean.com/agents/actions/datasource/googlecloud",
    "https://docs.glean.com/administration/assistant/actions/jira-actions-setup",
    "https://docs.glean.com/administration/management/audit-logs/admin-audit-logs",
    "https://docs.glean.com/get-started/build/aws/deploy-aws",
    "https://docs.glean.com/administration/insights/overview",
    "https://docs.glean.com/agents/actions/datasource/jira",
    "https://docs.glean.com/security/cloud-prem/gcp/wiz-sensor",
    "https://docs.glean.com/security/cloud-prem/aws/wiz-sensor",
    "https://docs.glean.com/agents/actions/glean/web-search",
    "https://docs.glean.com/agents/concepts/triggers",
    "https://docs.glean.com/administration/assistant/configuration/supported-llms",
    "https://docs.glean.com/release-notes/coming-soon",
    "http://docs.glean.com/administration/assistant/features/agentic-engine",
    "https://docs.glean.com/get-started/setup/access-the-admin-ui",
    "https://docs.glean.com/agents/actions/datasource/snowflake",
    "https://docs.glean.com/connectors/native/s3/home",
    "https://docs.glean.com/agents/concepts/agents-draft-version",
    "https://docs.glean.com/agents/actions/datasource/databricks",
    "https://docs.glean.com/security/data-governance/about",
    "https://docs.glean.com/archive/help-glean/getting-started-in-glean/searching-in-glean/how-to-search-in-glean",
    "https://docs.glean.com/security/cloud-prem/aws/aws-waf",
    "https://docs.glean.com/agents/create-agent-natural-language",
    "https://docs.glean.com/user-guide/knowledge/answers/answer-boards-migration",
    "https://docs.glean.com/agents/actions/datasource/email",
    "https://docs.glean.com/administration/platform/embedded-integrations/glean-in-miro",
    "https://docs.glean.com/administration/assistant/features/web-search",
    "https://docs.glean.com/get-started/learn/crawling-and-learning",
    "https://docs.glean.com/administration/managing-agents/agent-library",
    "https://docs.glean.com/connectors/native/microsoft/microsoft-dynamics-365-connector",
    "https://docs.glean.com/administration/search/troubleshooting",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/admin-features-in-glean",
    "https://docs.glean.com/administration/tenant-id",
    "https://docs.glean.com/administration/developer/api-tokens",
    "https://docs.glean.com/administration/zoom-ai-companion",
    "https://docs.glean.com/administration/insights/how-glean-calculates-active-teammates",
    "https://docs.glean.com/administration/github-copilot-extension-install",
    "https://docs.glean.com/administration/managing-agents/featured-agents",
    "https://docs.glean.com/administration/gce-logs/insights-dashboard-queries",
    "https://docs.glean.com/administration/search/faq",
    "https://docs.glean.com/administration/insights/glean-in-support-applications",
    "https://docs.glean.com/administration/developer/keycloak-credentials",
    "https://docs.glean.com/administration/platform/mcp/about-glean-mcp-integration",
    "https://docs.glean.com/administration/platform/mcp/troubleshooting",
    "https://docs.glean.com/administration/managing-agents/how-an-app-is-translated-to-an-agent",
    "https://docs.glean.com/administration/management/maintenance-windows",
    "https://docs.glean.com/get-started/setup/connect-data-sources",
    "https://docs.glean.com/get-started/build",
    "https://docs.glean.com/get-started/golive/setup-glean-assistant",
    "https://docs.glean.com/get-started/setup",
    "https://docs.glean.com/get-started/setup/sync-people-data",
    "https://docs.glean.com/get-started/build/about-self-hosted",
    "https://docs.glean.com/get-started/prepare/items-to-prepare",
    "https://docs.glean.com/get-started/setup/setup-checklist",
    "https://docs.glean.com/get-started/prepare/pre-deployment-checklist",
    "https://docs.glean.com/get-started/setup/configure-sso",
    "https://docs.glean.com/get-started/golive/populate-content",
    "https://docs.glean.com/get-started/start",
    "https://docs.glean.com/get-started/golive",
    "https://docs.glean.com/get-started/learn",
    "https://docs.glean.com/get-started/golive/launch-preparation",
    "https://docs.glean.com/get-started/golive/deploy-apps",
    "https://docs.glean.com/get-started/golive/customize-branding",
    "https://docs.glean.com/get-started/start/post-launch-tasks",
    "https://docs.glean.com/get-started/prepare",
    "https://docs.glean.com/user-guide/assistant/prompt-library/guide-to-advanced-prompts",
    "https://developers.glean.com/guides/actions/examples/zendesk-ticket-redirection",
    "https://developers.glean.com/assets/files/actions-trigger-condition-637c297eeb0988cf8530b411ab980af9.png",
    "https://developers.glean.com/assets/files/actions-functionality-spec-8e4ee43b22d41da7881f8e1689da4dcd.png",
    "https://developers.glean.com/guides/actions/examples/google-docs-update",
    "https://developers.glean.com/guides/actions/examples/google-calendar-events",
    "https://developers.glean.com/guides/actions/examples/jira-issue-creation-redirect",
    "https://docs.glean.com/administration/assistant/apps/slack-automatic-responses",
    "https://docs.glean.com/agents/concepts/publish-slack",
    "https://docs.glean.com/administration/assistant/actions/snowflake-actions-setup",
    "https://docs.glean.com/archive/help-glean/actions/how-to-create-redirect-actions-using-the-redirect-url-builder",
    "https://docs.glean.com/administration/assistant/actions/disable-microsoft-actions",
    "https://docs.glean.com/administration/assistant/actions/calendar-search-actions-setup",
    "https://docs.glean.com/administration/assistant/actions/databricks-actions-setup",
    "https://docs.glean.com/administration/assistant/actions/github-actions-setup",
    "https://developers.glean.com/docs/tools/example_tools",
    "https://docs.glean.com/administration/assistant/actions/m365-actions-setup",
    "https://docs.glean.com/administration/assistant/actions/google-actions-setup",
    "https://docs.glean.com/agents/actions",
    "https://docs.glean.com/agents/actions/custom",
    "https://docs.glean.com/agents/actions/datasource/slack",
    "https://docs.glean.com/agents/concepts/flow",
    "https://docs.glean.com/agents/concepts/memory",
    "https://docs.glean.com/agents/concepts/sharing-permissions",
    "https://docs.glean.com/agents/concepts/insights",
    "https://docs.glean.com/agents/concepts/featured-agents",
    "https://docs.glean.com/agents/actions/glean/wait-for-user-input",
    "https://docs.glean.com/agents/actions/glean/read-personal-activity",
    "https://docs.glean.com/agents/actions/glean/expert-search",
    "https://docs.glean.com/agents/actions/glean/analyze-data",
    "https://docs.glean.com/agents/actions/glean/people-profile-search",
    "https://docs.glean.com/agents/actions/glean/think",
    "https://docs.glean.com/agents/actions/glean/plan-execute",
    "https://docs.glean.com/connectors/native/gcal/native-setup",
    "https://docs.glean.com/agents/actions/glean/read-document",
    "https://docs.glean.com/agents/actions/glean/code-search",
    "https://docs.glean.com/agents/actions/glean/company-search",
    "https://docs.glean.com/connectors/native/teams/teams-transcripts",
    "https://docs.glean.com/agents/actions/glean/respond",
    "https://docs.glean.com/security/cloud-prem/gcp/home",
    "https://docs.glean.com/security/cloud-prem/aws/home",
    "https://docs.glean.com/connectors/native/aha/home",
    "mailto:support@glean.com",
    "https://docs.glean.com/connectors/native/tableau/about",
    "https://docs.glean.com/connectors/native/stackoverflow/troubleshooting",
    "https://docs.glean.com/connectors/native/zoom/about",
    "https://docs.glean.com/troubleshooting/error-codes/home",
    "https://docs.glean.com/connectors/native/zendesk/about",
    "https://docs.glean.com/connectors/native/box/restrictions",
    "https://docs.glean.com/connectors/native/confluence",
    "https://docs.glean.com/connectors/native/confluence-onprem/about",
    "https://docs.glean.com/connectors/native/confluence/forge-upgrade",
    "https://docs.glean.com/connectors/native/gitlab/setup",
    "https://docs.glean.com/connectors/native/gitlab/about",
    "https://docs.glean.com/connectors/native/gmail/setup",
    "https://docs.glean.com/connectors/native/gong/home",
    "https://docs.glean.com/connectors/native/gitlab-onprem/about",
    "https://docs.glean.com/connectors/native/gdrive/setup",
    "https://docs.glean.com/connectors/native/gchat/home",
    "https://docs.glean.com/connectors/native/gdrive/restrictions",
    "https://docs.glean.com/connectors/native/gdrive/about",
    "https://docs.glean.com/connectors/native/gdrive/security/permissions",
    "https://docs.glean.com/connectors/native/gdrive/setup-non-gcp",
    "https://docs.glean.com/connectors/native/servicenow/servicenow-custom-role",
    "https://docs.glean.com/connectors/native/servicenow/about",
    "https://docs.glean.com/connectors/native/servicenow/setup",
    "https://docs.glean.com/connectors/native/jira-onprem/about",
    "https://docs.glean.com/connectors/native/lessonly/home",
    "https://docs.glean.com/connectors/native/jira",
    "https://docs.glean.com/connectors/native/jira/about",
    "https://docs.glean.com/connectors/native/monday/about",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/manage-exclusion-and-inclusion-rules",
    "https://docs.glean.com/connectors/native/jira-onprem",
    "https://docs.glean.com/connectors/native/confluence-onprem",
    "https://docs.glean.com/connectors/native/confluence/about",
    "https://docs.glean.com/connectors/native/stackoverflow/about",
    "https://docs.glean.com/connectors/native/salesforce/salesforce-index-attachment",
    "https://docs.glean.com/connectors/native/salesforce/setup",
    "https://docs.glean.com/connectors/native/quip/home",
    "https://docs.glean.com/connectors/native/salesforce/about",
    "https://docs.glean.com/connectors/native/azure-devops/home",
    "https://docs.glean.com/connectors/native/bitbucket/home",
    "https://docs.glean.com/connectors/native/box/about",
    "https://docs.glean.com/connectors/native/workday/about",
    "https://docs.glean.com/connectors/native/wordpress/home",
    "https://docs.glean.com/connectors/native/highspot/home",
    "https://docs.glean.com/connectors/native/sharepoint/setup",
    "https://docs.glean.com/connectors/native/sharepoint/security/api",
    "https://docs.glean.com/connectors/native/sharepoint/security/permissions",
    "https://docs.glean.com/connectors/native/sharepoint/restrictions",
    "https://docs.glean.com/connectors/native/sharepoint/about",
    "https://docs.glean.com/connectors/native/github-enterprise/about",
    "https://docs.glean.com/connectors/native/github/about",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/admin-guide-managing-data-sources",
    "https://docs.glean.com/connectors/custom/glean-apis",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/setting-up-a-custom-data-source",
    "https://docs.glean.com/connectors/custom/faq",
    "https://docs.glean.com/connectors/custom/troubleshooting",
    "https://docs.glean.com/connectors/native/gcal/setup",
    "https://docs.glean.com/connectors/native/gcal/error-codes",
    "https://docs.glean.com/connectors/native/databricks/about",
    "https://docs.glean.com/connectors/native/databricks/setup",
    "https://docs.glean.com/connectors/native/outlook/about",
    "https://docs.glean.com/connectors/native/slack/setup",
    "https://docs.glean.com/connectors/native/shortcut/home",
    "https://docs.glean.com/archive/help-glean/troubleshooting/clearing-browser-cache",
    "https://docs.glean.com/troubleshooting/error-codes/gcp/setup-key-2",
    "https://docs.glean.com/troubleshooting/error-codes/gcp/setup-key-1",
    "https://docs.glean.com/get-started/build/gcp/deploy-gcp",
    "https://docs.glean.com/troubleshooting/error-codes/gcp/setup-key-3",
    "https://docs.glean.com/get-started/build/gcp/supported-gcp-regions",
    "https://docs.glean.com/troubleshooting/error-codes/gcp/setup-key-5",
    "https://docs.glean.com/troubleshooting/error-codes/gcp/setup-key-4",
    "https://docs.glean.com/archive/help-glean/troubleshooting/recording-a-chrome-trace",
    "https://docs.glean.com/archive/help-glean/troubleshooting/how-to-reset-gleans-support-portal-credentials",
    "https://docs.glean.com/archive/help-glean/troubleshooting/how-to-get-access-to-gleans-support-portal",
    "https://docs.glean.com/user-guide/knowledge/go-links/how-go-links-work",
    "https://docs.glean.com/archive/help-glean/faq/pressing-tab-is-not-focusing-on-glean-search-box-in-firefox",
    "https://docs.glean.com/archive/help-glean/faq/how-do-i-search-glean-directly-from-the-address-bar",
    "https://docs.glean.com/archive/help-glean/faq/browser-history-apps",
    "https://docs.glean.com/archive/help-glean/accessibility/glean-accessibility-statement",
    "mailto:a11y@glean.com",
    "https://docs.glean.com/archive/help-glean/what-do-i-use-glean-for/glean-for-engineering",
    "https://docs.glean.com/archive/help-glean/what-do-i-use-glean-for/glean-for-support",
    "https://docs.glean.com/user-guide/knowledge/home-page/celebrations-widget",
    "https://docs.glean.com/user-guide/assistant/prompt-library/guide-to-prompts",
    "https://docs.glean.com/user-guide/people/teams/setting-up-team-pages",
    "https://docs.glean.com/archive/help-glean/what-do-i-use-glean-for/glean-for-sales",
    "https://docs.glean.com/archive/help-glean/faq/glean-extension-via-company-push",
    "mailto:johnsmith@acme.com",
    "https://docs.glean.com/administration/identity/roles/faq",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/manage-which-data-sources-appear-in-search-results",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/how-to-hide-documents-via-csv-upload",
    "https://docs.glean.com/archive/help-glean/actions/authenticate-actions-in-salesforce",
    "http://docs.glean.com/administration/management/maintenance-windows",
    "http://docs.glean.com/administration/developer/api-tokens",
    "http://docs.glean.com/administration/tenant-id",
    "http://docs.glean.com/administration/zoom-ai-companion",
    "http://docs.glean.com/release-notes/home",
    "http://docs.glean.com/troubleshooting/home",
    "http://docs.glean.com/home",
    "http://docs.glean.com/administration/platform/mcp/connecting-to-glean-mcp-server",
    "http://docs.glean.com/administration/insights/how-glean-calculates-active-teammates",
    "http://docs.glean.com/administration/insights/overview",
    "http://docs.glean.com/administration/managing-agents/agent-access",
    "http://docs.glean.com/administration/gce-logs/insights-dashboard-queries",
    "http://docs.glean.com/administration/search/about",
    "http://docs.glean.com/administration/managing-agents/how-an-app-is-translated-to-an-agent",
    "http://docs.glean.com/archive/help-glean/getting-started-in-glean/what-is-glean",
    "http://docs.glean.com/administration/platform/mcp/troubleshooting",
    "http://docs.glean.com/protect/ai-security/home",
    "http://docs.glean.com/administration/management/audit-logs/admin-audit-logs",
    "http://docs.glean.com/agents/home",
    "http://docs.glean.com/user-guide/about/what-is-glean",
    "http://docs.glean.com/administration/about",
    "http://docs.glean.com/administration/insights/glean-in-support-applications",
    "http://docs.glean.com/connectors/home",
    "http://docs.glean.com/administration/managing-agents/set-up-llms",
    "http://docs.glean.com/administration/search/troubleshooting",
    "http://docs.glean.com/administration/platform/mcp/about-glean-mcp-integration",
    "http://docs.glean.com/administration/managing-agents/featured-agents",
    "http://docs.glean.com/security/home",
    "http://docs.glean.com/administration/search/faq",
    "http://docs.glean.com/administration/search/hiding-content",
    "http://docs.glean.com/get-started/welcome",
    "http://docs.glean.com/administration/github-copilot-extension-install",
    "http://docs.glean.com/",
    "http://docs.glean.com/administration/platform/embedded-integrations/home",
    "http://docs.glean.com/administration/developer/keycloak-credentials",
    "http://docs.glean.com/administration/managing-agents/agent-library",
    "https://docs.glean.com/administration/assistant/data-analysis/technical-overview",
    "https://docs.glean.com/administration/assistant/data-analysis/file-security",
    "https://docs.glean.com/administration/glean-agents-in-microsoft-teams/glean-agents-ms-teams",
    "https://docs.glean.com/administration/platform/embedded-integrations/glean-in-service-now",
    "https://docs.glean.com/administration/platform/embedded-integrations/glean-in-zendesk",
    "https://docs.glean.com/administration/platform/embedded-integrations/glean-in-service-cloud",
    "https://docs.glean.com/agents/actions/datasource/microsoft-365",
    "https://docs.glean.com/agents/actions/datasource/github",
    "https://docs.glean.com/agents/actions/datasource/google",
    "https://docs.glean.com/administration/management/customization/branding",
    "https://docs.glean.com/archive/help-glean/actions/jira-custom-authentication-setup",
    "https://docs.glean.com/archive/help-glean/actions/jira-service-management-action",
    "https://docs.glean.com/security/cloud-prem/aws/cost-controls",
    "https://docs.glean.com/security/cloud-prem/aws/faq",
    "https://docs.glean.com/get-started/build/aws/supported-aws-regions",
    "https://docs.glean.com/security/cloud-prem/gcp/faq",
    "https://docs.glean.com/security/cloud-prem/gcp/owner-role",
    "https://docs.glean.com/security/cloud-prem/aws/connecting-to-onprem-datasources",
    "https://docs.glean.com/archive/help-glean/chat/glean-assistant-llm-providers",
    "https://docs.glean.com/connectors/native/seismic/home",
    "https://docs.glean.com/archive/help-glean/getting-started-in-glean/searching-in-glean/improve-search-quality-by-giving-feedback-on-results",
    "https://docs.glean.com/archive/help-glean/getting-started-in-glean/searching-in-glean/search-from-wherever-you-work",
    "https://docs.glean.com/administration/assistant/features/code-tool",
    "https://docs.glean.com/archive/help-glean/chat/web-search-with-glean",
    "https://docs.glean.com/administration/assistant/features/file-upload",
    "https://docs.glean.com/connectors/native/miro/home",
    "https://docs.glean.com/archive/help-glean/people-teams/teams/setting-up-team-pages",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/admin-guide-setting-up-creating-announcements-from-slack",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/admin-guide-teams-in-glean",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/admin-guide-exporting-organization-chart-data",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/aws-hosting-cost-reduction-recommendation",
    "https://docs.glean.com/archive/help-glean/uncategorized/how-to-run-a-sensitive-content-report.mdx",
    "https://docs.glean.com/administration/identity/roles/manage-users",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/managed-chrome-extension-rollout",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/admin-guide-setting-up-people",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/admin-guide-admin-alerts",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/confluence-cloud-webhook-app-installation-guide",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/managing-api-tokens",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/configuring-glean-assist-for-your-team",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/admin-guide-teammates-page",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/admin-guide-toggle-user-profile-attributes-and-social-profile-visibility",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/admin-guide-resolving-people-data-issues",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/glean-in-slack",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/how-to-customize-glean-for-your-organization",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/jira-activity-plugin-installation-guide",
    "https://docs.glean.com/archive/help-glean/managing-your-glean-deployment/how-glean-in-slack-detects-and-answers-questions",
    "https://docs.glean.com/administration/identity/sso/about",
    "https://docs.glean.com/administration/gce-logs/migrating-to-workflowrun-logs",
    "https://docs.glean.com/administration/glean-agents-in-microsoft-teams/faq",
    "https://docs.glean.com/administration/gce-logs/data-dictionary-examples",
    "https://docs.glean.com/administration/assistant/configuration/chat-history",
    "https://docs.glean.com/archive/help-glean/faq/glean-assist-insights-report",
    "https://docs.glean.com/administration/gce-logs/data-dictionary",
    "https://docs.glean.com/administration/protect/sensitive-findings/about",
    "https://docs.glean.com/connectors",
    "https://docs.glean.com/administration/assistant/configuration/custom-instructions",
    "https://docs.glean.com/administration/assistant/configuration/user-feedback",
    "https://docs.glean.com/administration/assistant/configuration/content-restrictions",
    "https://docs.glean.com/archive/help-glean/chat/setting-up-glean-ai-features",
    "https://docs.glean.com/administration/assistant/slackbot/about-slackbot",
    "https://docs.glean.com/administration/identity/sso/configuration/generic-saml",
    "https://docs.glean.com/administration/identity/sso/configuration/google-oidc",
    "https://docs.glean.com/administration/identity/sso/configuration/okta-saml",
    "https://docs.glean.com/administration/identity/sso/configuration/entra-id-oidc",
    "https://docs.glean.com/user-guide/knowledge/verification/how-verification-works",
    "https://docs.glean.com/user-guide/knowledge/pins/how-pins-work",
    "https://docs.glean.com/user-guide/knowledge/answers/what-are-answers-and-how-do-they-work",
    "https://docs.glean.com/user-guide/knowledge/collections/how-collections-work",
    "https://docs.glean.com/get-started/golive/get-started/golive/deploy-apps",
    "https://docs.glean.com/administration/management/apps/mobile",
    "https://docs.glean.com/administration/management/apps/browser/about",
    "https://docs.glean.com/administration/management/apps/browser/deployment",
    "https://docs.glean.com/administration/management/apps/macos",
    "https://docs.glean.com/archive/help-glean/chat/guide-to-advanced-prompts",
    "https://developers.glean.com/assets/files/calendar_action_calendar_events-347471327de3f542dbba74f4409cce1b.png",
    "https://developers.glean.com/assets/files/calendar_action_create_oauth_client-834713df063c01a38edeffe9f417035a.png",
    "https://developers.glean.com/assets/files/calendar_action_google_api-8768d93d224f5d0a3e7b16313e744e4c.png",
    "https://developers.glean.com/assets/files/calendar_action_gcs_cloud_create_cred-4d8e446d88ee9f93318111ff4f1f3be0.png",
    "https://developers.glean.com/assets/files/calendar_action_connect_banner-5dbdfa7f4e061f54337d23e6a2c401da.png",
    "https://developers.glean.com/assets/files/calendar_action_basic_info-406f66eab1800124bf7d46e902aab9b3.png",
    "https://developers.glean.com/assets/files/calendar_action_authentication-02cee3179b5ae80592f59549392402ae.png",
    "https://developers.glean.com/assets/files/calendar_action_trigger_condition-fcd9a0c2c946dac1163dee11d6154405.png",
    "https://developers.glean.com/assets/files/calendar_action_functionality-ca088a03866b23207c4699aec2bdadf6.png",
    "https://developers.glean.com/assets/files/deploy_window-b8d8202554821dd4609e315bcc92dd54.png"
  ]
}